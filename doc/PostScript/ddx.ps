%!PS-Adobe-3.0
%%Creator: groff version 1.19.2
%%CreationDate: Mon Dec 29 01:24:04 2008
%%DocumentNeededResources: font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%DocumentSuppliedResources: procset grops 1.19 2
%%Pages: 69
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginResource: procset grops 1.19 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
}bind def
/PEND{
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
%%IncludeResource: font Times-Roman
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Roman@0 ENC0/Times-Roman RE/Times-Italic@0 ENC0/Times-Italic RE
/Times-Bold@0 ENC0/Times-Bold RE
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Bold@0 SF(De\214nition of the P)135.468 123 Q(orting Lay)
-.24 E(er f)-.12 E(or the X v11 Sample Ser)-.3 E -.12(ve)-.12 G(r).12 E
/F1 10/Times-Italic@0 SF(Susan Ang)248.82 159 Q(ebr)-.1 E(anndt)-.15 E
(Raymond Dr)252.85 177 Q -.15(ew)-.37 G(ry).15 E(Philip Karlton)258.965
195 Q -.92(To)259.505 213 S(dd Ne).92 E(wman)-.15 E/F2 10/Times-Roman@0
SF(Digital Equipment Corporation)225.5 231 Q(minor re)250.625 255 Q
(visions by)-.25 E F1(Bob Sc)261.275 279 Q(hei\215er)-.15 E F2
(Massachusetts Institute of T)211.275 297 Q(echnology)-.7 E(Re)209.115
321 Q(vised for Release 4 and Release 5 by)-.25 E F1 -.35(Ke)259.835 345
S(ith P).35 E(ac)-.8 E(kar)-.2 E(d)-.37 E F2(MIT X Consortium)249.11 363
Q(Re)238.135 387 Q(vised for Release 6 by)-.25 E F1(David P)253.585 411
Q 2.5(.W)-1.35 G(ig)-3.05 E(gins)-.1 E F2 2.5(XC)259.525 429 S
(onsortium)-2.5 E(Porting Layer De\214nition)72 768 Q 146.56 2.5(-1- A)
109.34 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 2 2
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Cop)72 276 Q(yright \251 1994 X Consortium)-.1 E
(Permission is hereby granted, free of char)72 291.6 Q(ge, to an)-.18 E
2.5(yp)-.15 G(erson obtaining a cop)-2.5 E 2.5(yo)-.1 G 2.5(ft)-2.5 G
(his softw)-2.5 E(are and associated)-.1 E
(documentation \214les \(the `)72 303.6 Q(`Softw)-.74 E(are')-.1 E
('\), to deal in the Softw)-.74 E
(are without restriction, including without limita-)-.1 E
(tion the rights to use, cop)72 315.6 Q 1.3 -.65(y, m)-.1 H(odify).65 E
2.5(,m)-.65 G(er)-2.5 E(ge, publish, distrib)-.18 E
(ute, sublicense, and/or sell copies of the Soft-)-.2 E -.1(wa)72 327.6
S(re, and to permit persons to whom the Softw).1 E
(are is furnished to do so, subject to the follo)-.1 E(wing conditions:)
-.25 E(The abo)72 343.2 Q .3 -.15(ve c)-.15 H(op).15 E(yright notice an\
d this permission notice shall be included in all copies or substantial\
 portions)-.1 E(of the Softw)72 355.2 Q(are.)-.1 E(THE SOFTW)72 370.8 Q
(ARE IS PR)-1.2 E -.5(OV)-.4 G(IDED `).5 E -.8(`A)-.74 G 2.5(SI).8 G(S')
-2.5 E(', WITHOUT W)-.74 E(ARRANTY OF ANY KIND, EXPRESS OR)-1.2 E
(IMPLIED, INCLUDING B)72 382.8 Q(UT NO)-.1 E 2.5(TL)-.4 G(IMITED T)-2.5
E 2.5(OT)-.18 G(HE W)-2.5 E(ARRANTIES OF MERCHANT)-1.2 E(ABILITY)-.93 E
2.5(,F)-1.29 G(IT)-2.5 E(-)-.92 E(NESS FOR A P)72 394.8 Q(AR)-.92 E
(TICULAR PURPOSE AND NONINFRINGEMENT)-.6 E 5(.I)-.74 G 2.5(NN)-5 G 2.5
(OE)-2.5 G(VENT SHALL THE X)-2.5 E(CONSOR)72 406.8 Q
(TIUM BE LIABLE FOR ANY CLAIM, D)-.6 E(AMA)-.4 E(GES OR O)-.4 E
(THER LIABILITY)-.4 E 2.5(,W)-1.29 G(HETHER IN)-2.5 E(AN A)72 418.8 Q
(CTION OF CONTRA)-.4 E(CT)-.4 E 2.5(,T)-.74 G(OR)-2.68 E 2.5(TO)-.6 G
2.5(RO)-2.5 G(THER)-2.9 E(WISE, ARISING FR)-.55 E
(OM, OUT OF OR IN CONNEC-)-.4 E(TION WITH THE SOFTW)72 430.8 Q
(ARE OR THE USE OR O)-1.2 E(THER DEALINGS IN THE SOFTW)-.4 E(ARE.)-1.2 E
(Porting Layer De\214nition)72 768 Q 146.56 2.5(-2- A)109.34 H
(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 3 3
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(The follo)72 84 Q(wing document e)-.25 E
(xplains the structure of the X W)-.15 E(indo)-.4 E 2.5(wS)-.25 G
(ystem display serv)-2.5 E(er and the interf)-.15 E(aces)-.1 E
(among the lar)72 96 Q(ger pieces.)-.18 E(It is intended as a reference\
 for programmers who are implementing an X Display)5 E(Serv)72 108 Q
(er on their w)-.15 E(orkstation hardw)-.1 E 2.5(are. It)-.1 F
(is included with the X W)2.5 E(indo)-.4 E 2.5(wS)-.25 G
(ystem source tape, along with the)-2.5 E(document "Strate)72 120 Q
(gies for Porting the X v11 Sample Serv)-.15 E(er)-.15 E 2.5(." The)-.55
F(order in which you should read these doc-)2.5 E(uments is:)72 132 Q
14.17(1\) Read)72 159.6 R(the \214rst section of the "Strate)2.5 E
(gies for Porting" document \(Ov)-.15 E(ervie)-.15 E 2.5(wo)-.25 G 2.5
(fP)-2.5 G(orting Process\).)-2.5 E 14.17(2\) Skim)72 187.2 R -.15(ove)
2.5 G 2.5(rt).15 G(his document \(the De\214nition document\).)-2.5 E
14.17(3\) Skim)72 214.8 R -.15(ove)2.5 G 2.5(rt).15 G
(he remainder of the Strate)-2.5 E(gies document.)-.15 E 14.17
(4\) Start)72 242.4 R(planning and w)2.5 E
(orking, referring to the Strate)-.1 E(gies and De\214nition documents.)
-.15 E -1.1(Yo)97 266.4 S 2.5(um)1.1 G(ay also w)-2.5 E
(ant to look at the follo)-.1 E(wing documents:)-.25 E 21.5<8322>72 282
S(The X W)-21.5 E(indo)-.4 E 2.5(wS)-.25 G(ystem" for an o)-2.5 E -.15
(ve)-.15 G(rvie).15 E 2.5(wo)-.25 G 2.5(fX)-2.5 G(.)-2.5 E 21.5<8322>72
297.6 S(Xlib - C Language X Interf)-21.5 E(ace" for a vie)-.1 E 2.5(wo)
-.25 G 2.5(fw)-2.5 G(hat the client programmer sees.)-2.5 E 21.5<8322>72
313.2 S 2.5(XW)-21.5 G(indo)-2.9 E 2.5(wS)-.25 G(ystem Protocol" for a \
terse description of the byte stream protocol between the client)-2.5 E
(and serv)97 325.2 Q(er)-.15 E(.)-.55 E
(LK201 and DEC are trademarks of Digital Equipment Corporation.)72 340.8
Q(Macintosh and Apple are trademarks)5 E(of Apple Computer)72 352.8 Q
2.5(,I)-.4 G 2.5(nc. PostScript)-2.5 F
(is a trademark of Adobe Systems, Inc.)2.5 E(Ethernet is a trademark of)
5 E(Xerox Corporation.)72 364.8 Q 2.5(XW)5 G(indo)-2.9 E 2.5(wS)-.25 G
(ystem is a trademark of X Consortium, Inc.)-2.5 E
(Cray is a trademark of Cray)5 E(Research, Inc.)72 376.8 Q 1.6 -.8(To u)
72 404.4 T(nderstand this document and the accompan).8 E
(ying source code, you should kno)-.15 E 2.5(wt)-.25 G(he C language.)
-2.5 E -1.1(Yo)5 G(u)1.1 E(should be f)72 416.4 Q
(amiliar with 2D graphics and windo)-.1 E
(wing concepts such as clipping, bitmaps, fonts, etc.)-.25 E -1.1(Yo)5 G
(u)1.1 E(should ha)72 428.4 Q .3 -.15(ve a g)-.2 H(eneral kno).15 E
(wledge of the X W)-.25 E(indo)-.4 E 2.5(wS)-.25 G 2.5(ystem. T)-2.5 F
2.5(oi)-.8 G(mplement the serv)-2.5 E(er code on your hard-)-.15 E -.1
(wa)72 440.4 S(re, you need to kno).1 E 2.5(wal)-.25 G
(ot about your hardw)-2.5 E(are, its graphic display de)-.1 E
(vice\(s\), and \(possibly\) its netw)-.25 E(ork-)-.1 E
(ing and multitasking f)72 452.4 Q(acilities.)-.1 E
(This document depends a lot on the source code, so you should ha)72
476.4 Q .3 -.15(ve a l)-.2 H(isting of the code handy).15 E(.)-.65 E
(Some source on the distrib)72 492 Q
(ution tape is directly compilable on your machine.)-.2 E
(Some of it will require modi-)5 E 2.5(\214cation. Other)72 504 R
(parts may ha)2.5 E .3 -.15(ve t)-.2 H 2.5(ob).15 G 2.5(ec)-2.5 G
(ompletely written from scratch.)-2.5 E(The tape also includes source f\
or a sample implementation of a display serv)72 519.6 Q
(er which runs on a v)-.15 E(ariety of)-.25 E(color and monochrome disp\
lays which you will \214nd useful for implementing an)72 531.6 Q 2.5(yt)
-.15 G(ype of X serv)-2.5 E(er)-.15 E(.)-.55 E/F1 10/Times-Bold@0 SF 2.5
(1. The)72 579.6 R 2.5(XW)2.5 G(indo)-2.68 E 2.5(wS)-.1 G(ystem)-2.5 E
F0(The X W)72 595.2 Q(indo)-.4 E 2.5(wS)-.25 G
(ystem, or simply "X," is a windo)-2.5 E(wing system that pro)-.25 E
(vides high-performance, high-le)-.15 E -.15(ve)-.25 G(l,).15 E(de)72
607.2 Q(vice-independent graphics.)-.25 E 2.5(Xi)72 631.2 S 2.5(saw)-2.5
G(indo)-2.5 E(wing system designed for bitmapped graphic displays.)-.25
E(The display can ha)5 E .3 -.15(ve a s)-.2 H(imple, mono-).15 E
(chrome display or it can ha)72 643.2 Q .3 -.15(ve a c)-.2 H
(olor display with up to 32 bits per pix).15 E
(el with a special graphics processor)-.15 E(doing the w)72 655.2 Q 2.5
(ork. \(In)-.1 F(this document, monochrome means a black and white disp\
lay with one bit per pix)2.5 E(el.)-.15 E(Ev)72 667.2 Q(en though the u\
sual meaning of monochrome is more general, this special case is so com\
mon that we)-.15 E(decided to reserv)72 679.2 Q 2.5(et)-.15 G(he w)-2.5
E(ord for this purpose.\))-.1 E 2.5(Xi)72 703.2 S 2.5(sd)-2.5 G
(esigned for a netw)-2.5 E(orking en)-.1 E(vironment where users can ru\
n applications on machines other than their)-.4 E -.25(ow)72 715.2 S 2.5
(nw).25 G 2.5(orkstations. Sometimes,)-2.6 F(the connection is o)2.5 E
-.15(ve)-.15 G 2.5(ra).15 G 2.5(nE)-2.5 G(thernet netw)-2.5 E
(ork with a protocol such as TCP/IP;)-.1 E -.2(bu)72 727.2 S(t, an).2 E
2.5(y")-.15 G(reliable" byte stream is allo)-2.5 E -.1(wa)-.25 G 2.5
(ble. A).1 F(high-bandwidth byte stream is preferable; RS-232 at 9600)
2.5 E(Porting Layer De\214nition)72 768 Q 146.56 2.5(-3- A)109.34 H
(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 4 4
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(baud w)72 84 Q(ould be slo)-.1 E 2.5(ww)-.25 G
(ithout compression techniques.)-2.5 E 2.5(Xb)72 108 S 2.5(yi)-2.5 G
(tself allo)-2.5 E(ws great freedom of design.)-.25 E -.15(Fo)5 G 2.5
(ri).15 G(nstance, it does not include an)-2.5 E 2.5(yu)-.15 G
(ser interf)-2.5 E(ace standard.)-.1 E(Its)5 E(intent is to "pro)72 120
Q(vide mechanism, not polic)-.15 E -.65(y.)-.15 G 5("B).65 G 2.5(ym)-5 G
(aking it general, it can be the foundation for a wide v)-2.5 E(ari-)
-.25 E(ety of interacti)72 132 Q .3 -.15(ve s)-.25 H(oftw).15 E(are.)-.1
E -.15(Fo)72 156 S 2.5(ram).15 G(ore detailed o)-2.5 E -.15(ve)-.15 G
(rvie).15 E 1.3 -.65(w, s)-.25 H(ee the document "The X W).65 E(indo)-.4
E 2.5(wS)-.25 G 2.5(ystem." F)-2.5 F(or details on the byte stream)-.15
E(protocol, see "X W)72 168 Q(indo)-.4 E 2.5(wS)-.25 G(ystem protocol.")
-2.5 E/F1 10/Times-Bold@0 SF 2.5(2. O)72 204 R(VER)-.5 E
(VIEW OF THE SER)-.55 E(VER)-.55 E F0(The display serv)72 219.6 Q
(er manages windo)-.15 E
(ws and simple graphics requests for the user on behalf of dif)-.25 E
(ferent client)-.25 E 2.5(applications. The)72 231.6 R
(client applications can be running on an)2.5 E 2.5(ym)-.15 G
(achine on the netw)-2.5 E 2.5(ork. The)-.1 F(serv)2.5 E(er mainly)-.15
E(does three things:)72 243.6 Q 21.5<8352>72 259.2 S
(esponds to protocol requests from e)-21.5 E
(xisting clients \(mostly graphic and te)-.15 E(xt dra)-.15 E
(wing commands\))-.15 E 21.5<8353>72 274.8 S(ends de)-21.5 E
(vice input \(k)-.25 E -.15(ey)-.1 G(strok).15 E
(es and mouse actions\) and other e)-.1 E -.15(ve)-.25 G(nts to e).15 E
(xisting clients)-.15 E 21.5<834d>72 290.4 S
(aintains client connections)-21.5 E(The serv)72 318 Q(er code is or)
-.15 E -.05(ga)-.18 G(nized into four major pieces:).05 E 21.5<8344>72
345.6 S -.25(ev)-21.5 G
(ice Independent \(DIX\) layer - code shared among all implementations)
.25 E 21.5<834f>72 361.2 S
(perating System \(OS\) layer - code that is dif)-21.5 E
(ferent for each operating system b)-.25 E(ut is shared among)-.2 E
(all graphic de)97 373.2 Q(vices for this operating system)-.25 E 21.5
<8344>72 388.8 S -.25(ev)-21.5 G
(ice Dependent \(DDX\) layer - code that is \(potentially\) dif).25 E
(ferent for each combination of operat-)-.25 E
(ing system and graphic de)97 400.8 Q(vice)-.25 E 21.5<8345>72 416.4 S
(xtension Interf)-21.5 E(ace - a standard w)-.1 E
(ay to add features to the X serv)-.1 E(er)-.15 E(The "porting layer" c\
onsists of the OS and DDX layers; these are actually parallel and neith\
er one is on top)72 444 Q(of the other)72 456 Q 5(.T)-.55 G
(he DIX layer is intended to be portable without change to tar)-5 E
(get systems and is not detailed)-.18 E(here, although se)72 468 Q -.15
(ve)-.25 G(ral routines in DIX that are called by DDX are documented.)
.15 E(Extensions incorporate)5 E(ne)72 480 Q 2.5(wf)-.25 G
(unctionality into the serv)-2.5 E
(er; and require additional functionality o)-.15 E -.15(ve)-.15 G 2.5
(ras).15 G(imple DDX.)-2.5 E(The follo)72 495.6 Q
(wing sections outline the functions of the layers.)-.25 E
(Section 3 brie\215y tells what you need to kno)5 E(w)-.25 E
(about the DIX layer)72 507.6 Q 5(.T)-.55 G(he OS layer is e)-5 E
(xplained in Section 4.)-.15 E(Section 5 gi)5 E -.15(ve)-.25 G 2.5(st)
.15 G(he theory of operation and)-2.5 E(procedural interf)72 519.6 Q
(ace for the DDX layer)-.1 E 5(.S)-.55 G
(ection 6 describes the functions which e)-5 E(xist for the e)-.15 E
(xtension)-.15 E(writer)72 531.6 Q(.)-.55 E F1 2.5(2.1. Notes)72 567.6 R
(On Resour)2.5 E(ces and Lar)-.18 E(ge Structs)-.1 E F0 2.5(Xr)72 583.2
S(esources are C structs inside the serv)-2.5 E(er)-.15 E 5(.C)-.55 G
(lient applications create and manipulate these objects accord-)-5 E
(ing to the rules of the X byte stream protocol.)72 595.2 Q
(Client applications refer to resources with resource IDs,)5 E
(which are 32-bit inte)72 607.2 Q(gers that are sent o)-.15 E -.15(ve)
-.15 G 2.5(rt).15 G(he netw)-2.5 E 2.5(ork. W)-.1 F(ithin the serv)-.4 E
(er)-.15 E 2.5(,o)-.4 G 2.5(fc)-2.5 G(ourse, the)-2.5 E 2.5(ya)-.15 G
(re just C)-2.5 E(structs, and we refer to them by pointers.)72 619.2 Q
(The DDX layer has se)72 643.2 Q -.15(ve)-.25 G(ral kinds of resources:)
.15 E 21.5<8357>72 658.8 S(indo)-21.9 E(w)-.25 E 21.5<8350>72 674.4 S
(ixmap)-21.5 E 21.5<8353>72 690 S(creen)-21.5 E 21.5<8344>72 705.6 S
-.25(ev)-21.5 G(ice).25 E(Porting Layer De\214nition)72 768 Q 146.56 2.5
(-4- A)109.34 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 5 5
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 21.5<8343>72 84 S(olormap)-21.5 E 21.5<8346>72
99.6 S(ont)-21.65 E 21.5<8343>72 115.2 S(ursor)-21.5 E 21.5<8347>72
130.8 S(raphics Conte)-21.5 E(xts)-.15 E
(The type names of the more important serv)72 146.4 Q
(er structs usually end in "Rec," such as "De)-.15 E
(viceRec;" the pointer)-.25 E(types usually end in "Ptr)72 158.4 Q
(," such as "De)-.4 E(vicePtr)-.25 E(.")-.55 E(The structs and importan\
t de\214ned constants are declared in .h \214les that ha)72 182.4 Q .3
-.15(ve n)-.2 H(ames that suggest the name of).15 E(the object.)72 194.4
Q -.15(Fo)5 G 2.5(ri).15 G(nstance, there are tw)-2.5 E 2.5(o.)-.1 G 2.5
<688c>-2.5 G(les for windo)-2.5 E(ws, windo)-.25 E -.65(w.)-.25 G 2.5
(ha).65 G(nd windo)-2.5 E(wstr)-.25 E 2.5(.h. windo)-.55 F -.65(w.)-.25
G 2.5(hd).65 G(e\214nes)-2.5 E
(only what needs to be de\214ned in order to use windo)72 206.4 Q
(ws without peeking inside of them; windo)-.25 E(wstr)-.25 E
(.h de\214nes)-.55 E(the structs with all of their components in great \
detail for those who need it.)72 218.4 Q
(Three kinds of \214elds are in these structs:)72 234 Q 21.5<8341>72
249.6 S(ttrib)-21.5 E(ute \214elds - struct \214elds that contain v)-.2
E(alues lik)-.25 E 2.5(en)-.1 G(ormal structs)-2.5 E 21.5<8350>72 265.2
S(ointers to procedures, or structures of procedures, that operate on t\
he object)-21.5 E 21.5<8341>72 280.8 S(pri)-19 E -.25(va)-.25 G
(te \214eld \(or tw).25 E(o\) used by your DDX code to k)-.1 E(eep pri)
-.1 E -.25(va)-.25 G(te data \(probably a pointer to another).25 E
(data structure\), or an array of pri)97 292.8 Q -.25(va)-.25 G
(te \214elds, which is sized as the serv).25 E(er initializes.)-.15 E
(DIX calls through the struct')72 308.4 Q 2.5(sp)-.55 G
(rocedure pointers to do its tasks.)-2.5 E
(These procedures are set either directly or)5 E
(indirectly by DDX procedures.)72 320.4 Q
(Most of the procedures described in the remainder of this document are)
5 E(accessed through one of these structs.)72 332.4 Q -.15(Fo)5 G 2.5
(re).15 G(xample, the procedure to create a pixmap is attached to a)
-2.65 E(ScreenRec and might be called by using the e)72 344.4 Q
(xpression)-.15 E
(\(* pScreen->CreatePixmap\)\(pScreen, width, height, depth\).)92 368.4
Q(All procedure pointers must be set to some routine unless noted other\
wise; a null pointer will ha)72 392.4 Q .3 -.15(ve u)-.2 H(nfortu-).15 E
(nate consequences.)72 404.4 Q
(Procedure routines will be indicated in the documentation by this con)
72 428.4 Q -.15(ve)-.4 G(ntion:).15 E -.2(vo)97 452.4 S
(id pScreen->MyScreenRoutine\(ar).2 E(g, ar)-.18 E(g, ...\))-.18 E
(as opposed to a free routine, not in a data structure:)72 476.4 Q -.2
(vo)97 500.4 S(id MyFreeRoutine\(ar).2 E(g, ar)-.18 E(g, ...\))-.18 E
(The attrib)72 536.4 Q(ute \214elds are mostly set by DIX; DDX should n\
ot modify them unless noted otherwise.)-.2 E/F1 10/Times-Bold@0 SF 2.5
(3. DIX)72 572.4 R(LA)2.5 E(YER)-1 E F0
(The DIX layer is the machine and de)72 588 Q
(vice independent part of X.)-.25 E
(The source should be common to all oper)5 E(-)-.2 E
(ating systems and de)72 600 Q 2.5(vices. The)-.25 F(port process shoul\
d not include changes to this part, therefore internal inter)2.5 E(-)-.2
E -.1(fa)72 612 S(ces to DIX modules are not discussed, e).1 E
(xcept for public interf)-.15 E(aces to the DDX and the OS layers.)-.1 E
(In the process of getting your serv)72 636 Q(er to w)-.15 E
(ork, if you think that DIX must be modi\214ed for purposes other)-.1 E
(than b)72 648 Q(ug \214x)-.2 E(es, you may be doing something wrong.)
-.15 E -.25(Ke)5 G(ep looking for a more compatible solution.).25 E
(When)5 E(the ne)72 660 Q(xt release of the X serv)-.15 E(er code is a)
-.15 E -.25(va)-.2 G(ilable, you should be able to just drop in the ne)
.25 E 2.5(wD)-.25 G(IX code and)-2.5 E(compile it.)72 672 Q
(If you change DIX, you will ha)5 E .3 -.15(ve t)-.2 H 2.5(or).15 G
(emember what changes you made and will ha)-2.5 E .3 -.15(ve t)-.2 H 2.5
(oc).15 G(hange)-2.5 E(the ne)72 684 Q 2.5(ws)-.25 G
(ources before you can update to the ne)-2.5 E 2.5(wv)-.25 G(ersion.)
-2.65 E(The heart of the DIX code is a loop called the dispatch loop.)72
708 Q(Each time the processor goes around the loop,)5 E(it sends of)72
720 Q 2.5(fa)-.25 G(ccumulated input e)-2.5 E -.15(ve)-.25 G
(nts from the input de).15 E
(vices to the clients, and it processes requests from)-.25 E
(Porting Layer De\214nition)72 768 Q 146.56 2.5(-5- A)109.34 H
(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 6 6
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(the clients.)72 84 Q(This loop is the most or)5
E -.05(ga)-.18 G(nized w).05 E(ay for the serv)-.1 E
(er to process the asynchronous requests that it)-.15 E
(needs to process.)72 96 Q(Most of these operations are performed by OS\
 and DDX routines that you must supply)5 E(.)-.65 E/F1 10/Times-Bold@0
SF 2.5(4. OS)72 132 R(LA)2.5 E(YER)-1 E F0
(This part of the source consists of a fe)72 147.6 Q 2.5(wr)-.25 G
(outines that you ha)-2.5 E .3 -.15(ve t)-.2 H 2.5(or).15 G -.25(ew)-2.5
G(rite for each operating system.).25 E(These)5 E
(OS functions maintain the client connections and schedule w)72 159.6 Q
(ork to be done for clients.)-.1 E(The)5 E 2.5(ya)-.15 G(lso pro)-2.5 E
(vide)-.15 E(an interf)72 171.6 Q
(ace to font \214les, font name to \214le name translation, and lo)-.1 E
2.5(wl)-.25 G -2.15 -.25(ev e)-2.5 H 2.5(lm).25 G(emory management.)-2.5
E -.2(vo)97 195.6 S(id OsInit\(\)).2 E
(OsInit initializes your OS code, performing whate)72 207.6 Q -.15(ve)
-.25 G 2.5(rt).15 G(asks need to be done.)-2.5 E
(Frequently there is not much)5 E(to be done.)72 219.6 Q
(The sample serv)5 E(er implementation is in Xserv)-.15 E
(er/os/osinit.c.)-.15 E F1 2.5(4.1. Scheduling)72 255.6 R
(and Request Deli)2.5 E -.1(ve)-.1 G(ry).1 E F0(The main dispatch loop \
in DIX creates the illusion of multitasking between dif)72 271.2 Q
(ferent windo)-.25 E(ws, while the)-.25 E(serv)72 283.2 Q
(er is itself b)-.15 E(ut a single process.)-.2 E
(The dispatch loop breaks up the w)5 E(ork for each client into small)
-.1 E(digestible parts.)72 295.2 Q
(Some parts are requests from a client, such as indi)5 E
(vidual graphic commands.)-.25 E(Some parts)5 E(are e)72 307.2 Q -.15
(ve)-.25 G(nts deli).15 E -.15(ve)-.25 G(red to the client, such as k)
.15 E -.15(ey)-.1 G(strok).15 E(es from the user)-.1 E 5(.T)-.55 G
(he processing of e)-5 E -.15(ve)-.25 G(nts and requests).15 E(for dif)
72 319.2 Q(ferent clients can be interlea)-.25 E -.15(ve)-.2 G 2.5(dw)
.15 G(ith one another so true multitasking is not needed in the serv)
-2.5 E(er)-.15 E(.)-.55 E -1.1(Yo)72 343.2 S 2.5(um)1.1 G
(ust supply some of the pieces for proper scheduling between clients.)
-2.5 E(int W)97 367.2 Q(aitF)-.8 E(orSomething\(pClientReady\))-.15 E
(int *pClientReady;)122 379.2 Q -.8(Wa)72 394.8 S(itF).8 E(orSomething \
is the scheduler procedure you must write that will suspend your serv)
-.15 E(er process until)-.15 E(something needs to be done.)72 406.8 Q
(This call should mak)5 E 2.5(et)-.1 G(he serv)-2.5 E
(er suspend until one or more of the follo)-.15 E(wing)-.25 E(occurs:)72
418.8 Q 21.5<8354>72 434.4 S(here is an input e)-21.5 E -.15(ve)-.25 G
(nt from the user or hardw).15 E(are \(see SetInputCheck\(\)\))-.1 E
21.5<8354>72 450 S(here are requests w)-21.5 E(aiting from kno)-.1 E
(wn clients, in which case you should return a count of clients)-.25 E
(stored in pClientReady)97 462 Q 21.5<8341>72 477.6 S(ne)-19 E 2.5(wc)
-.25 G
(lient tries to connect, in which case you should create the client and)
-2.5 E(then continue w)5 E(aiting)-.1 E(Before W)72 493.2 Q(aitF)-.8 E(\
orSomething\(\) computes the masks to pass to select, it needs to see i\
f there is an)-.15 E(ything to do)-.15 E(on the w)72 505.2 Q
(ork queue; if so, it must call a DIX routine called ProcessW)-.1 E
(orkQueue.)-.8 E -.15(ex)97 517.2 S(tern W).15 E 10.42(orkQueuePtr w)-.8
F(orkQueue;)-.1 E(if \(w)97 541.2 Q(orkQueue\))-.1 E(ProcessW)122 553.2
Q(orkQueue \(\);)-.8 E(If W)72 568.8 Q(aitF)-.8 E(orSomething\(\) decid\
es it is about to do something that might block \(in the sample serv)
-.15 E(er)-.15 E 5(,b)-.4 G(efore it)-5 E
(calls select\(\)\) it must call a DIX routine called BlockHandler\(\).)
72 580.8 Q -.2(vo)97 604.8 S(id BlockHandler\(pT).2 E
(imeout, pReadmask\))-.35 E(pointer pT)122 616.8 Q(imeout;)-.35 E
(pointer pReadmask;)122 628.8 Q(The types of the ar)72 640.8 Q
(guments are for agreement between the OS and DDX implementations,)-.18
E -.2(bu)5 G 2.5(tt).2 G(he pT)-2.5 E(ime-)-.35 E
(out is a pointer to the information determining ho)72 652.8 Q 2.5(wl)
-.25 G(ong the block is allo)-2.5 E(wed to last,)-.25 E
(and the pReadmask is)5 E 2.5(ap)72 664.8 S
(ointer to the information describing the descriptors that will be w)
-2.5 E(aited on.)-.1 E(In the sample serv)72 680.4 Q(er)-.15 E 5(,p)-.4
G -.35(Ti)-5 G(meout is a struct time).35 E -.25(va)-.25 G 2.5(l*).25 G
2.5(*, and)-2.5 F(pReadmask is the address of the select\(\) mask)2.5 E
(for reading.)72 692.4 Q
(The DIX BlockHandler\(\) iterates through the Screens,)72 708 Q
(for each one calling its BlockHandler)5 E 5(.A)-.55 G(Block-)-2.5 E
(Handler is declared thus:)72 720 Q(Porting Layer De\214nition)72 768 Q
146.56 2.5(-6- A)109.34 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 7 7
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF -.2(vo)97 84 S
(id xxxBlockHandler\(nscreen, pbdata, pptv).2 E 2.5(,p)-.65 G
(Readmask\))-2.5 E(int nscreen;)122 96 Q(pointer pbdata;)122 108 Q
(struct time)122 120 Q -.25(va)-.25 G 2.5(l*).25 G 2.5(*p)-2.5 G(ptv;)
-2.5 E(pointer pReadmask;)122 132 Q(The ar)72 144 Q
(guments are the inde)-.18 E 2.5(xo)-.15 G 2.5(ft)-2.5 G(he Screen,)-2.5
E(the blockData \214eld of the Screen,)5 E(and the ar)5 E
(guments to the)-.18 E(DIX BlockHandler\(\).)72 156 Q
(Immediately after W)72 171.6 Q(aitF)-.8 E
(orSomething returns from the block,)-.15 E -2.15 -.25(ev e)5 H 2.5(ni)
.25 G 2.5(fi)-2.5 G 2.5(td)-2.5 G(idn')-2.5 E 2.5(ta)-.18 G
(ctually block,)-2.5 E(it must call)5 E(the DIX routine W)72 183.6 Q(ak)
-.8 E(eupHandler\(\).)-.1 E -.2(vo)97 207.6 S(id W).2 E(ak)-.8 E
(eupHandler\(result, pReadmask\))-.1 E(int result;)122 219.6 Q
(pointer pReadmask;)122 231.6 Q(Once ag)72 247.2 Q 2.5(ain, the)-.05 F
(types are not speci\214ed by DIX.)2.5 E
(The result is the success indicator for the thing that \(may)5 E(ha)72
259.2 Q -.15(ve)-.2 G 2.5(\)b).15 G(lock)-2.5 E
(ed, and the pReadmask is a mask of the descriptors that came acti)-.1 E
-.15(ve)-.25 G 5(.I).15 G 2.5(nt)-5 G(he sample serv)-2.5 E(er)-.15 E(,)
-.4 E(result is the result from select\(\),)72 271.2 Q
(and pReadmask is the address of the select\(\) mask for reading.)5 E
(The DIX W)72 286.8 Q(ak)-.8 E(eupHandler\(\) calls each Screen')-.1 E
2.5(sW)-.55 G(ak)-3.3 E(eupHandler)-.1 E 5(.A)-.55 G -.8(Wa)-2.5 G -.1
(ke).8 G(upHandler is declared thus:).1 E -.2(vo)97 310.8 S(id xxxW).2 E
(ak)-.8 E(eupHandler\(nscreen, pbdata, err)-.1 E 2.5(,p)-.4 G
(Readmask\))-2.5 E(int nscreen;)122 322.8 Q(pointer pbdata;)122 334.8 Q
(unsigned long result;)122 346.8 Q(pointer pReadmask;)122 358.8 Q
(The ar)72 370.8 Q(guments are the inde)-.18 E 2.5(xo)-.15 G 2.5(ft)-2.5
G(he Screen,)-2.5 E(the blockData \214eld of the Screen,)5 E(and the ar)
5 E(guments to the)-.18 E(DIX W)72 382.8 Q(ak)-.8 E(eupHandler\(\).)-.1
E(In addition to the per)72 398.4 Q(-screen BlockHandlers, an)-.2 E 2.5
(ym)-.15 G(odule may re)-2.5 E(gister block and w)-.15 E(ak)-.1 E
(eup handlers \(only)-.1 E(together\) using:)72 410.4 Q(Bool Re)97 434.4
Q(gisterBlockAndW)-.15 E(ak)-.8 E(eupHandlers \(blockHandler)-.1 E 2.5
(,w)-.4 G(ak)-2.6 E(eupHandler)-.1 E 2.5(,b)-.4 G(lockData\))-2.5 E 7.5
(BlockHandlerProcPtr blockHandler;)122 446.4 R -.8(Wa)122 458.4 S -.1
(ke).8 G 5(upHandlerProcPtr w).1 F(ak)-.1 E(eupHandler;)-.1 E
(pointer blockData;)122 470.4 Q 2.5(AF)72 482.4 S
(ALSE return code indicates that the re)-3.24 E(gistration f)-.15 E
(ailed for lack of memory)-.1 E 5(.T)-.65 G 2.5(or)-5.8 G(emo)-2.5 E .3
-.15(ve a r)-.15 H -.15(eg).15 G(istered).15 E
(Block handler at other than serv)72 494.4 Q(er reset time \(when the)
-.15 E 2.5(ya)-.15 G(re all remo)-2.5 E -.15(ve)-.15 G 2.5(da).15 G
(utomatically\), use:)-2.5 E(Remo)97 518.4 Q -.15(ve)-.15 G(BlockAndW)
.15 E(ak)-.8 E(eupHandlers \(blockHandler)-.1 E 2.5(,w)-.4 G(ak)-2.6 E
(eupHandler)-.1 E 2.5(,b)-.4 G(lockData\))-2.5 E 5
(BlockHandlerProcPtr blockHandler;)122 530.4 R -.8(Wa)122 542.4 S -.1
(ke).8 G 2.5(upHandlerProcPtr w).1 F(ak)-.1 E(eupHandler;)-.1 E
(pointer blockData;)122 554.4 Q(All three ar)72 566.4 Q
(guments must match the v)-.18 E(alues passed to Re)-.25 E
(gisterBlockAndW)-.15 E(ak)-.8 E(eupHandlers.)-.1 E(These re)72 582 Q
(gistered block handlers are called after the per)-.15 E
(-screen handlers:)-.2 E -.2(vo)97 606 S
(id \(*BlockHandler\) \(blockData, pptv).2 E 2.5(,p)-.65 G(Readmask\))
-2.5 E 19.17(pointer blockData;)122 618 R(OST)122 630 Q(imePtr pptv;)
-.35 E 19.17(pointer pReadmask;)122 642 R(An)72 657.6 Q 2.5(yw)-.15 G
(ak)-2.6 E(eup handlers re)-.1 E(gistered with Re)-.15 E
(gisterBlockAndW)-.15 E(ak)-.8 E
(eupHandlers will be called before the Screen)-.1 E(handlers:)72 669.6 Q
-.2(vo)97 693.6 S(id \(*W).2 E(ak)-.8 E(eupHandler\) \(blockData, err)
-.1 E 2.5(,p)-.4 G(Readmask\))-2.5 E 19.17(pointer blockData;)122 705.6
R(int err;)122 717.6 Q(pointer pReadmask;)122 729.6 Q
(Porting Layer De\214nition)72 768 Q 146.56 2.5(-7- A)109.34 H
(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 8 8
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(The W)72 84 Q(aitF)-.8 E
(orSomething on the sample serv)-.15 E(er also has a b)-.15 E
(uilt in screen sa)-.2 E -.15(ve)-.2 G 2.5(rt).15 G(hat dark)-2.5 E
(ens the screen if no)-.1 E(input happens for a period of time.)72 96 Q
(The sample serv)5 E(er implementation is in Xserv)-.15 E(er/os/W)-.15 E
(aitF)-.8 E(or)-.15 E(.c.)-.55 E(Note that W)72 111.6 Q(aitF)-.8 E
(orSomething\(\) may be called when you already ha)-.15 E .3 -.15(ve s)
-.2 H -2.15 -.25(ev e).15 H(ral outstanding things \(e).25 E -.15(ve)
-.25 G(nts,).15 E(requests, or ne)72 123.6 Q 2.5(wc)-.25 G
(lients\) queued up.)-2.5 E -.15(Fo)5 G 2.5(ri).15 G(nstance, your serv)
-2.5 E(er may ha)-.15 E .3 -.15(ve j)-.2 H(ust done a lar).15 E
(ge graphics request,)-.18 E(and it may ha)72 135.6 Q .3 -.15(ve b)-.2 H
(een a long time since W).15 E(aitF)-.8 E(orSomething\(\) w)-.15 E
(as last called.)-.1 E(If man)5 E 2.5(yc)-.15 G(lients ha)-2.5 E .3 -.15
(ve l)-.2 H(ots of).15 E
(requests queued up, DIX will only service some of them for a gi)72
147.6 Q -.15(ve)-.25 G 2.5(nc).15 G(lient before going on to the ne)-2.5
E(xt client)-.15 E(\(see isItT)72 159.6 Q(imeT)-.35 E(oY)-.8 E
(ield, belo)-.55 E 2.5(w\). Therefore,)-.25 F -.8(Wa)2.5 G(itF).8 E
(orSomething\(\) will ha)-.15 E .3 -.15(ve t)-.2 H 2.5(or).15 G
(eport that these same clients)-2.5 E(still ha)72 171.6 Q .3 -.15(ve r)
-.2 H(equests queued up the ne).15 E(xt time around.)-.15 E
(An implementation should return information on as man)72 187.2 Q 2.5
(yo)-.15 G(utstanding things as it can.)-2.5 E -.15(Fo)5 G 2.5(ri).15 G
(nstance, if your)-2.5 E(implementation al)72 199.2 Q -.1(wa)-.1 G
(ys checks for client data \214rst and does not report an).1 E 2.5(yi)
-.15 G(nput e)-2.5 E -.15(ve)-.25 G(nts until there is no).15 E
(client data left, your mouse and k)72 211.2 Q -.15(ey)-.1 G
(board might get lock).15 E
(ed out by an application that constantly barrages)-.1 E(the serv)72
223.2 Q(er with graphics dra)-.15 E(wing requests.)-.15 E 2.5(Al)72
238.8 S(ist of inde)-2.5 E -.15(xe)-.15 G 2.5(s\().15 G(client->inde)
-2.5 E(x\) for clients with data ready to be read or processed should b\
e returned in)-.15 E(pClientReady)72 250.8 Q 2.5(,a)-.65 G
(nd the count of inde)-2.5 E -.15(xe)-.15 G 2.5(sr).15 G
(eturned as the result v)-2.5 E(alue of the call.)-.25 E
(These are not clients that)5 E(ha)72 262.8 Q .3 -.15(ve f)-.2 H
(ull requests ready).15 E 2.5(,b)-.65 G(ut an)-2.7 E 2.5(yc)-.15 G
(lients who ha)-2.5 E .3 -.15(ve a)-.2 H .3 -.15(ny d).15 H
(ata ready to be read or processed.).15 E(The DIX dis-)5 E(patcher will\
 process requests from each client in turn by calling ReadRequestFromCl\
ient\(\), belo)72 274.8 Q -.65(w.)-.25 G -.8(Wa)72 290.4 S(itF).8 E
(orSomething\(\) must create ne)-.15 E 2.5(wc)-.25 G(lients as the)-2.5
E 2.5(ya)-.15 G(re requested \(by whate)-2.5 E -.15(ve)-.25 G 2.5(rm).15
G(echanism at the transport)-2.5 E(le)72 302.4 Q -.15(ve)-.25 G 2.5
(l\). A).15 F(ne)2.5 E 2.5(wc)-.25 G
(lient is created by calling the DIX routine:)-2.5 E(ClientPtr Ne)97
326.4 Q(xtA)-.15 E -.25(va)-.74 G(ilableClient\(ospri).25 E(v\))-.25 E
(pointer ospri)122 338.4 Q(v;)-.25 E(This routine returns NULL if a ne)
72 350.4 Q 2.5(wc)-.25 G
(lient cannot be allocated \(e.g. maximum number of clients reached\).)
-2.5 E(The ospri)72 362.4 Q 2.5(va)-.25 G -.18(rg)-2.5 G
(ument will be stored into the OS pri).18 E -.25(va)-.25 G
(te \214eld \(pClient->osPri).25 E -.25(va)-.25 G(te\), to store OS pri)
.25 E -.25(va)-.25 G(te infor).25 E(-)-.2 E(mation about the client.)72
374.4 Q(In the sample serv)5 E(er)-.15 E 2.5(,t)-.4 G(he osPri)-2.5 E
-.25(va)-.25 G(te \214eld contains the number of the sock).25 E
(et for this)-.1 E(client. See also "Ne)72 386.4 Q 2.5(wC)-.25 G
(lient Connections.")-2.5 E(Ne)5 E(xtA)-.15 E -.25(va)-.74 G
(ilableClient\(\) will call InsertF).25 E(ak)-.15 E
(eRequest\(\), so you)-.1 E(must be prepared for this.)72 398.4 Q
(If there are outstanding input e)72 414 Q -.15(ve)-.25 G
(nts, you should mak).15 E 2.5(es)-.1 G(ure that the tw)-2.5 E 2.5(oS)
-.1 G(etInputCheck\(\) locations are)-2.5 E 2.5(unequal. The)72 426 R
(DIX dispatcher will call your implementation of ProcessInputEv)2.5 E
(ents\(\) until the Set-)-.15 E(InputCheck\(\) locations are equal.)72
438 Q(The sample serv)72 453.6 Q(er contains an implementation of W)-.15
E(aitF)-.8 E 2.5(orSomething\(\). The)-.15 F(follo)2.5 E(wing tw)-.25 E
2.5(or)-.1 G(outines indi-)-2.5 E(cate to W)72 465.6 Q(aitF)-.8 E
(orSomething\(\) what de)-.15 E(vices should be w)-.25 E(aited for)-.1 E
7.5(.f)-.55 G 2.5(di)-7.5 G 2.5(sa)-2.5 G 2.5(nO)-2.5 G 2.5(Sd)-2.5 G
(ependent type; in the sample)-2.5 E(serv)72 477.6 Q
(er it is an open \214le descriptor)-.15 E(.)-.55 E(int AddEnabledDe)97
501.6 Q(vice\(fd\))-.25 E(int fd;)122 513.6 Q(int Remo)97 537.6 Q -.15
(ve)-.15 G(EnabledDe).15 E(vice\(fd\))-.25 E(int fd;)122 549.6 Q
(These tw)72 561.6 Q 2.5(or)-.1 G(outines are usually called by DDX fro\
m the initialize cases of the Input Procedures that are)-2.5 E
(stored in the De)72 573.6 Q(viceRec \(the routine passed to AddInputDe)
-.25 E 2.5(vice\(\)\). The)-.25 F(sample serv)2.5 E
(er implementation of)-.15 E(AddEnabledDe)72 585.6 Q(vice and Remo)-.25
E -.15(ve)-.15 G(EnabledDe).15 E(vice are in Xserv)-.25 E
(er/os/connection.c.)-.15 E/F1 10/Times-Bold@0 SF 2.5(4.2. New)72 609.6
R(Client Connections)2.5 E F0(The process whereby a ne)72 625.2 Q 2.5
(wc)-.25 G(lient-serv)-2.5 E(er connection starts up is v)-.15 E
(ery dependent upon what your byte)-.15 E(stream mechanism.)72 637.2 Q
(This section describes byte stream initiation using e)5 E
(xamples from the TCP/IP imple-)-.15 E(mentation on the sample serv)72
649.2 Q(er)-.15 E(.)-.55 E(The \214rst thing that happens is a client i\
nitiates a connection with the serv)72 664.8 Q(er)-.15 E 5(.H)-.55 G .5
-.25(ow a c)-5 H(lient kno).25 E(ws to do this)-.25 E
(depends upon your netw)72 676.8 Q(ork f)-.1 E
(acilities and the Xlib implementation.)-.1 E
(In a typical scenario, a user named)5 E(Fred on his X w)72 688.8 Q(ork\
station is logged onto a Cray supercomputer running a command shell in \
an X windo)-.1 E -.65(w.)-.25 G(Fred can type shell commands and ha)72
700.8 Q .3 -.15(ve t)-.2 H(he Cray respond as though the X serv).15 E
(er were a dumb terminal.)-.15 E
(Fred types in a command to run an X client application that w)72 712.8
Q(as link)-.1 E(ed with Xlib)-.1 E 5(.X)-.4 G(lib looks at the shell)-5
E(en)72 724.8 Q(vironment v)-.4 E(ariable DISPLA)-.25 E 2.58 -1.29(Y, w)
-1.05 H(hich has the v)1.29 E(alue "fredsbittube:0.0.")-.25 E
(The host name of Fred')5 E(s)-.55 E(Porting Layer De\214nition)72 768 Q
146.56 2.5(-8- A)109.34 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 9 9
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF -.1(wo)72 84 S(rkstation is "fredsbittube," and\
 the 0s are for multiple screens and multiple X serv).1 E(er processes.)
-.15 E(\(Pre-)5 E(cisely what happens on your system depends upon ho)72
96 Q 2.5(wXa)-.25 G(nd Xlib are implemented.\))-2.5 E(The client applic\
ation calls a TCP routine on the Cray to open a TCP connection for X to\
 communicate)72 111.6 Q(with the netw)72 123.6 Q
(ork node "fredsbittube.")-.1 E(The TCP softw)5 E
(are on the Cray does this by looking up the TCP)-.1 E(address of "fred\
sbittube" and sending an open request to TCP port 6000 on fredsbittube.)
72 135.6 Q(All X serv)72 151.2 Q(ers on TCP listen for ne)-.15 E 2.5(wc)
-.25 G(lients on port 6000 by def)-2.5 E(ault; this is kno)-.1 E
(wn as a "well-kno)-.25 E(wn port" in)-.25 E(IP terminology)72 163.2 Q
(.)-.65 E(The serv)72 178.8 Q(er recei)-.15 E -.15(ve)-.25 G 2.5(st).15
G(his request from its port 6000 and checks where it came from to see i\
f it is on the)-2.5 E(serv)72 190.8 Q(er')-.15 E 2.5(sl)-.55 G
(ist of "trustw)-2.5 E(orth)-.1 E(y" hosts to talk to.)-.05 E
(Then, it opens another port for communications with the)5 E 2.5
(client. This)72 202.8 R
(is the byte stream that all X communications will go o)2.5 E -.15(ve)
-.15 G -.55(r.).15 G(Actually)72 218.4 Q 2.5(,i)-.65 G 2.5(ti)-2.5 G 2.5
(sab)-2.5 G(it more complicated than that.)-2.5 E(Each X serv)5 E
(er process running on the host machine is)-.15 E(called a "display)72
230.4 Q 2.5(." Each)-.65 F(display can ha)2.5 E .3 -.15(ve m)-.2 H
(ore than one screen that it manages.).15 E("corporateh)5 E
(ydra:3.2" rep-)-.05 E
(resents screen 2 on display 3 on the multi-screened netw)72 242.4 Q
(ork node corporateh)-.1 E 2.5(ydra. The)-.05 F(open request w)2.5 E
(ould)-.1 E(be sent on well-kno)72 254.4 Q(wn port number 6003.)-.25 E
(Once the byte stream is set up, what goes on does not depend v)72 270 Q
(ery much upon whether or not it is TCP)-.15 E(.)-1.11 E(The client sen\
ds an xConnClientPre\214x struct \(see Xproto.h\) that has the v)72 282
Q(ersion numbers for the v)-.15 E(ersion of)-.15 E
(Xlib it is running, some byte-ordering information, and tw)72 294 Q 2.5
(oc)-.1 G(haracter strings used for authorization.)-2.5 E(If the)5 E
(serv)72 306 Q(er does not lik)-.15 E 2.5(et)-.1 G
(he authorization strings or the v)-2.5 E
(ersion numbers do not match within the rules, or if)-.15 E(an)72 318 Q
(ything else is wrong, it sends a f)-.15 E
(ailure response with a reason string.)-.1 E(If the information ne)72
333.6 Q -.15(ve)-.25 G 2.5(rc).15 G(omes, or comes much too slo)-2.5 E
(wly)-.25 E 2.5(,t)-.65 G(he connection should be brok)-2.5 E(en of)-.1
E 2.5(f. Y)-.25 F(ou must)-1.1 E(implement the connection timeout.)72
345.6 Q(The sample serv)5 E(er implements this by k)-.15 E
(eeping a timestamp for each)-.1 E(still-connecting client and, each ti\
me just before it attempts to accept ne)72 357.6 Q 2.5(wc)-.25 G
(onnections, it closes an)-2.5 E 2.5(yc)-.15 G(on-)-2.5 E
(nection that are too old.)72 369.6 Q
(The connection timeout can be set from the command line.)5 E -1.1(Yo)72
385.2 S 2.5(um)1.1 G(ust implement whate)-2.5 E -.15(ve)-.25 G 2.5(ra)
.15 G(uthorization schemes you w)-2.5 E(ant to support.)-.1 E
(The sample serv)5 E(er on the distri-)-.15 E -.2(bu)72 397.2 S
(tion tape supports a simple authorization scheme.).2 E(The only interf)
5 E(ace seen by DIX is:)-.1 E(char *)97 421.2 Q
(ClientAuthorized\(client, proto_n, auth_proto, string_n, auth_string\))
97 433.2 Q(ClientPtr client;)107 445.2 Q(unsigned int proto_n;)107 457.2
Q(char *auth_proto;)107 469.2 Q(unsigned int string_n;)107 481.2 Q
(char *auth_string;)107 493.2 Q(DIX will only call this once per client\
, once it has read the full initial connection data from the client.)72
508.8 Q(If the)5 E(connection should be accepted ClientAuthorized\(\) s\
hould return NULL, and otherwise should return an)72 520.8 Q
(error message string.)72 532.8 Q(Accepting ne)72 548.4 Q 2.5(wc)-.25 G
(onnections happens internally to W)-2.5 E(aitF)-.8 E 2.5
(orSomething\(\). W)-.15 F(aitF)-.8 E(orSomething\(\) must call the)-.15
E(DIX routine Ne)72 560.4 Q(xtA)-.15 E -.25(va)-.74 G
(ilableClient\(\) to create a client object.).25 E
(Processing of the initial connection data will)5 E(be handled by DIX.)
72 572.4 Q -1.1(Yo)5 G
(ur OS layer must be able to map from a client to whate)1.1 E -.15(ve)
-.25 G 2.5(ri).15 G(nformation your OS)-2.5 E
(code needs to communicate on the gi)72 584.4 Q -.15(ve)-.25 G 2.5(nb)
.15 G(yte stream to the client.)-2.5 E
(DIX uses this ClientPtr to refer to the)5 E(client from no)72 596.4 Q
2.5(wo)-.25 G 5(n. The)-2.5 F(sample serv)2.5 E(er uses the osPri)-.15 E
-.25(va)-.25 G
(te \214eld in the ClientPtr to store the \214le descriptor).25 E
(for the sock)72 608.4 Q(et, the input and output b)-.1 E(uf)-.2 E
(fers, and authorization information.)-.25 E 1.6 -.8(To i)72 624 T
(nitialize the methods you choose to allo).8 E 2.5(wc)-.25 G
(lients to connect to your serv)-2.5 E(er)-.15 E 2.5(,m)-.4 G
(ain\(\) calls the routine)-2.5 E -.2(vo)97 648 S(id CreateW).2 E
(ellKno)-.8 E(wnSock)-.25 E(ets\(\))-.1 E
(This routine is called only once, and not called when the serv)72 663.6
Q(er is reset.)-.15 E 1.6 -.8(To r)5 H(ecreate an).8 E 2.5(ys)-.15 G
(ock)-2.5 E(ets during)-.1 E(serv)72 675.6 Q(er resets, the follo)-.15 E
(wing routine is called from the main loop:)-.25 E -.2(vo)97 699.6 S
(id ResetW).2 E(ellKno)-.8 E(wnSock)-.25 E(ets\(\))-.1 E
(Sample implementations of both of these routines are found in Xserv)72
711.6 Q(er/os/connection.c.)-.15 E(Porting Layer De\214nition)72 768 Q
146.56 2.5(-9- A)109.34 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 10 10
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF -.15(Fo)72 84 S 2.5(rm).15 G(ore details, see t\
he section called "Connection Setup" in the X protocol speci\214cation.)
-2.5 E/F1 10/Times-Bold@0 SF 2.5(4.3. Reading)72 120 R(Data fr)2.5 E
(om Clients)-.18 E F0
(Requests from the client are read in as a byte stream by the OS layer)
72 135.6 Q 5(.T)-.55 G(he)-5 E 2.5(ym)-.15 G(ay be in the form of se)
-2.5 E -.15(ve)-.25 G(ral).15 E(blocks of bytes deli)72 147.6 Q -.15(ve)
-.25 G(red in sequence; requests may be brok).15 E(en up o)-.1 E -.15
(ve)-.15 G 2.5(rb).15 G(lock boundaries or there may be)-2.5 E(man)72
159.6 Q 2.5(yr)-.15 G(equests per block.)-2.5 E
(Each request carries with it length information.)5 E
(It is the responsibility of the fol-)5 E(lo)72 171.6 Q
(wing routine to break it up into request blocks.)-.25 E
(int ReadRequestFromClient\(who\))97 195.6 Q(ClientPtr who;)122 207.6 Q
-1.1(Yo)72 223.2 S 2.5(um)1.1 G(ust write the routine ReadRequestFromCl\
ient\(\) to get one request from the byte stream belonging to)-2.5 E
(client "who.")72 235.2 Q -1.1(Yo)5 G 2.5(um)1.1 G(ust sw)-2.5 E
(ap the third and fourth bytes \(the second 16-bit w)-.1 E
(ord\) according to the byte-)-.1 E(sw)72 247.2 Q
(ap rules of the protocol to determine the length of the request.)-.1 E
(This length is measured in 32-bit w)5 E(ords,)-.1 E(not in bytes.)72
259.2 Q(Therefore, the theoretical maximum request is 256K.)5 E(\(Ho)5 E
(we)-.25 E -.15(ve)-.25 G .8 -.4(r, t).15 H(he maximum length allo).4 E
(wed)-.25 E(is dependent upon the serv)72 271.2 Q(er')-.15 E 2.5(si)-.55
G(nput b)-2.5 E(uf)-.2 E(fer)-.25 E 5(.T)-.55 G
(his size is sent to the client upon connection.)-5 E(The maximum)5 E
(size is the constant MAX_REQ)72 283.2 Q(UEST_SIZE in Xserv)-.1 E
(er/include/os.h\) The rest of the request you return is)-.15 E
(assumed NO)72 295.2 Q 2.5(Tt)-.4 G 2.5(ob)-2.5 G 2.5(ec)-2.5 G
(orrectly sw)-2.5 E
(apped for internal use, because that is the responsibility of DIX.)-.1
E(The 'who' ar)72 310.8 Q(gument is the ClientPtr returned from W)-.18 E
(aitF)-.8 E 2.5(orSomething. The)-.15 F(return v)2.5 E
(alue indicating status)-.25 E(should be set to the \(positi)72 322.8 Q
-.15(ve)-.25 G 2.5(\)b).15 G
(yte count if the read is successful, 0 if the read w)-2.5 E(as block)
-.1 E(ed, or a ne)-.1 E -.05(ga)-.15 G(ti).05 E -.15(ve)-.25 G
(error code if an error happened.)72 334.8 Q -1.1(Yo)72 350.4 S 2.5(um)
1.1 G(ust then store a pointer to the bytes of the request in the clien\
t request b)-2.5 E(uf)-.2 E(fer \214eld; who->request-)-.25 E(Buf)72
362.4 Q(fer)-.25 E 5(.T)-.55 G(his can simply be a pointer into your b)
-5 E(uf)-.2 E(fer; DIX may modify it in place b)-.25 E
(ut will not otherwise)-.2 E(cause damage.)72 374.4 Q
(Of course, the request must be contiguous; you must shuf)5 E
(\215e it around in your b)-.25 E(uf)-.2 E(fers if not.)-.25 E
(The sample serv)72 398.4 Q(er implementation is in Xserv)-.15 E
(er/os/io.c.)-.15 E(DIX can insert data into the client stream, and can\
 cause a "replay" of the current request.)72 426 Q(Bool InsertF)97 450 Q
(ak)-.15 E(eRequest\(client, data, count\))-.1 E(ClientPtr client;)107
462 Q(char *data;)107 474 Q(int count;)107 486 Q
(int ResetCurrentRequest\(client\))97 510 Q(ClientPtr client;)107 522 Q
(InsertF)72 537.6 Q(ak)-.15 E(eRequest\(\) must insert the speci\214ed \
number of bytes of data into the head of the input b)-.1 E(uf)-.2 E
(fer for)-.25 E(the client.)72 549.6 Q
(This may be a complete request, or it might be a partial request.)5 E
-.15(Fo)5 G 2.5(re).15 G(xample, Ne)-2.65 E(xtA)-.15 E -.25(va)-.74 G
(ilable-).25 E(Cient\(\) will insert a partial request in order to read\
 the initial connection data sent by the client.)72 561.6 Q(The routine)
5 E(returns F)72 573.6 Q(ALSE if memory could not be allocated.)-.74 E
(ResetCurrentRequest\(\) should "back up" the input b)5 E(uf)-.2 E(fer)
-.25 E(so that the currently e)72 585.6 Q -.15(xe)-.15 G
(cuting request will be ree).15 E -.15(xe)-.15 G 2.5(cuted. DIX).15 F
(may ha)2.5 E .3 -.15(ve a)-.2 H(ltered some v).15 E(alues \(e.g. the)
-.25 E -.15(ove)72 597.6 S
(rall request length\), so you must recheck to see if you still ha).15 E
.3 -.15(ve a c)-.2 H(omplete request.).15 E(ResetCurrentRe-)5 E
(quest\(\) should al)72 609.6 Q -.1(wa)-.1 G(ys cause a yield \(isItT).1
E(imeT)-.35 E(oY)-.8 E(ield\).)-.55 E F1 2.5(4.4. Sending)72 645.6 R(Ev)
2.5 E(ents, Err)-.1 E(ors And Replies T)-.18 E 2.5(oC)-.92 G(lients)-2.5
E F0(int WriteT)97 673.2 Q(oClient\(who, n, b)-.8 E(uf\))-.2 E
(ClientPtr who;)122 685.2 Q(int n;)122 697.2 Q(char *b)122 709.2 Q(uf;)
-.2 E(WriteT)72 721.2 Q(oClient should write n bytes starting at b)-.8 E
(uf to the ClientPtr "who".)-.2 E(It returns the number of bytes)5 E
(Porting Layer De\214nition)72 768 Q 2.5(-1)106.84 G 144.06 2.5(0- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 11 11
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(written, b)72 84 Q(ut for simplicity)-.2 E 2.5
(,t)-.65 G(he number returned must be either the same v)-2.5 E
(alue as the number requested, or)-.25 E(-1, signaling an error)72 96 Q
5(.T)-.55 G(he sample serv)-5 E(er implementation is in Xserv)-.15 E
(er/os/io.c.)-.15 E -.2(vo)97 111.6 S(id SendErrorT).2 E
(oClient\(client, majorCode, minorCode, resId, errorCode\))-.8 E
(ClientPtr client;)107 123.6 Q(unsigned int majorCode;)107 135.6 Q
(unsigned int minorCode;)107 147.6 Q(XID resId;)107 159.6 Q
(int errorCode;)107 171.6 Q(SendErrorT)72 183.6 Q(oClient can be used t\
o send errors back to clients, although in most cases your request func\
tion)-.8 E(should simply return the error code, ha)72 195.6 Q
(ving set client->errorV)-.2 E(alue to the appropriate error v)-1.11 E
(alue to return to)-.25 E(the client, and DIX will call this function w\
ith the correct opcodes for you.)72 207.6 Q -.2(vo)97 235.2 S
(id FlushAllOutput\(\)).2 E -.2(vo)97 259.2 S
(id FlushIfCriticalOutputPending\(\)).2 E -.2(vo)97 283.2 S
(id SetCriticalOutputPending\(\)).2 E
(These three routines may be implemented to support b)72 295.2 Q(uf)-.2
E(fered or delayed writes to clients, b)-.25 E(ut at the v)-.2 E(ery)
-.15 E(least, the stubs must e)72 307.2 Q 2.5(xist. FlushAllOutput\(\))
-.15 F(unconditionally \215ushes all output to clients; FlushIfCrit-)2.5
E(icalOutputPending\(\) \215ushes output only if SetCriticalOutputPendi\
ng\(\) has be called since the last time out-)72 319.2 Q(put w)72 331.2
Q(as \215ushed.)-.1 E(The sample serv)5 E(er implementation is in Xserv)
-.15 E(er/os/io.c and actually ignores requests to)-.15 E
(\215ush output on a per)72 343.2 Q(-client basis if it kno)-.2 E
(ws that there are requests in that client')-.25 E 2.5(si)-.55 G
(nput queue.)-2.5 E/F1 10/Times-Bold@0 SF 2.5(4.5. F)72 367.2 R
(ont Support)-.25 E F0(In the sample serv)72 382.8 Q(er)-.15 E 2.5(,f)
-.4 G(onts are encoded in disk \214les or fetched from the font serv)
-2.5 E(er)-.15 E 5(.F)-.55 G(or disk fonts, there is)-5.15 E
(one \214le per font, with a \214le name lik)72 394.8 Q 2.5(e")-.1 G
<8c78>-2.5 E 2.5(ed.pcf". F)-.15 F(ont serv)-.15 E(er fonts are read o)
-.15 E -.15(ve)-.15 G 2.5(rt).15 G(he netw)-2.5 E(ork using the X)-.1 E
-.15(Fo)72 406.8 S(nt Serv).15 E(er Protocol.)-.15 E(The disk directori\
es containing disk fonts and the names of the font serv)5 E
(ers are listed)-.15 E(together in the current "font path.")72 418.8 Q
(In principle, you can put all your fonts in R)72 442.8 Q
(OM or in RAM in your serv)-.4 E(er)-.15 E 5(.Y)-.55 G
(ou can put them all in one)-6.1 E(library \214le on disk.)72 454.8 Q
-1.1(Yo)5 G 2.5(uc)1.1 G(ould generate them on the \215y from strok)-2.5
E 2.5(ed)-.1 G 2.5(escriptions. By)-2.5 F(placing the appropri-)2.5 E
(ate code in the F)72 466.8 Q(ont Library)-.15 E 2.5(,y)-.65 G
(ou will automatically e)-2.5 E
(xport fonts in that format both through the X serv)-.15 E(er)-.15 E
(and the F)72 478.8 Q(ont serv)-.15 E(er)-.15 E(.)-.55 E -.4(Wi)72 502.8
S(th the incorporation of font-serv).4 E
(er based fonts and the Speedo donation from Bitstream, the font inter)
-.15 E(-)-.2 E -.1(fa)72 514.8 S(ces ha).1 E .3 -.15(ve b)-.2 H(een mo)
.15 E -.15(ve)-.15 G 2.5(di).15 G(nto a separate library)-2.5 E 2.5(,n)
-.65 G .5 -.25(ow c)-2.5 H(alled the F).25 E
(ont Library \(../fonts/lib\).)-.15 E(These routines are)5 E
(shared between the X serv)72 526.8 Q(er and the F)-.15 E(ont serv)-.15
E(er)-.15 E 2.5(,s)-.4 G 2.5(oi)-2.5 G
(nstead of this document specifying what you must)-2.5 E
(implement, simply refer to the font library interf)72 538.8 Q
(ace speci\214cation for the details.)-.1 E(All of the interf)5 E
(ace code to)-.1 E(the F)72 550.8 Q
(ont library is contained in dix/dixfonts.c)-.15 E F1 2.5(4.6. Memory)72
574.8 R(Management)2.5 E F0
(Memory management is based on functions in the C runtime library)72
590.4 Q 5(.X)-.65 G(alloc\(\), Xrealloc\(\), and Xfree\(\))-5 E -.1(wo)
72 602.4 S(rk just lik).1 E 2.5(em)-.1 G
(alloc\(\), realloc\(\), and free\(\), e)-2.5 E
(xcept that you can pass a null pointer to Xrealloc\(\) to ha)-.15 E .3
-.15(ve i)-.2 H(t).15 E(allocate ane)72 614.4 Q 2.5(wo)-.25 G 2.5(rp)
-2.5 G(ass a null pointer to Xfree\(\) and nothing will happen.)-2.5 E
(The v)5 E(ersions in the sample serv)-.15 E(er)-.15 E
(also do some checking that is useful for deb)72 626.4 Q 2.5
(ugging. Consult)-.2 F 2.5(aCr)2.5 G
(untime library reference manual for more)-2.5 E(details.)72 638.4 Q
(The macros ALLOCA)72 662.4 Q(TE_LOCAL and DEALLOCA)-1.11 E
(TE_LOCAL are pro)-1.11 E(vided in Xserv)-.15 E(er/include/os.h.)-.15 E
(These are useful if your compiler supports alloca\(\) \(or some method\
 of allocating memory from the stack\);)72 674.4 Q
(and are de\214ned appropriately on systems which support it.)72 686.4 Q
-.35(Tr)72 710.4 S
(eat memory allocation carefully in your implementation.).35 E
(Memory leaks can be v)5 E(ery hard to \214nd and are)-.15 E
(frustrating to a user)72 722.4 Q 5(.A)-.55 G 2.5(nXs)-5 G(erv)-2.5 E
(er could be running for days or weeks without being reset, just lik)
-.15 E 2.5(ear)-.1 G -.15(eg)-2.5 G(ular).15 E
(Porting Layer De\214nition)72 768 Q 2.5(-1)106.84 G 144.06 2.5(1- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 12 12
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(terminal. If)72 84 R(you leak a fe)2.5 E 2.5
(wd)-.25 G(ozen k per day)-2.5 E 2.5(,t)-.65 G
(hat will add up and will cause problems for users that lea)-2.5 E -.15
(ve)-.2 G(their w)72 96 Q(orkstations on.)-.1 E/F1 10/Times-Bold@0 SF
2.5(4.7. Client)72 132 R(Scheduling)2.5 E F0(The X serv)72 147.6 Q
(er has the ability to schedule clients much lik)-.15 E 2.5(ea)-.1 G 2.5
(no)-2.5 G(perating system w)-2.5 E(ould, suspending and)-.1 E
(restarting them without re)72 159.6 Q -.05(ga)-.15 G
(rd for the state of their input b).05 E(uf)-.2 E 2.5(fers. This)-.25 F
(functionality allo)2.5 E(ws the X serv)-.25 E(er to)-.15 E(suspend one\
 client and continue processing requests from other clients while w)72
171.6 Q(aiting for a long-term net-)-.1 E -.1(wo)72 183.6 S(rk acti).1 E
(vity \(lik)-.25 E 2.5(el)-.1 G
(oading a font\) before continuing with the \214rst client.)-2.5 E
(Bool isItT)97 195.6 Q(imeT)-.35 E(oY)-.8 E(ield;)-.55 E(isItT)72 211.2
Q(imeT)-.35 E(oY)-.8 E(ield is a global v)-.55 E
(ariable you can set if you w)-.25 E(ant to tell DIX to end the client')
-.1 E 2.5(s")-.55 G(time slice" and)-2.5 E
(start paying attention to the ne)72 223.2 Q(xt client.)-.15 E
(After the current request is \214nished, DIX will mo)5 E .3 -.15(ve t)
-.15 H 2.5(ot).15 G(he ne)-2.5 E(xt)-.15 E(client.)72 235.2 Q
(In the sample serv)72 250.8 Q(er)-.15 E 2.5(,R)-.4 G
(eadRequestFromClient\(\) sets isItT)-2.5 E(imeT)-.35 E(oY)-.8 E
(ield after 10 requests pack)-.55 E(ets in a ro)-.1 E 2.5(wa)-.25 G(re)
-2.5 E(read from the same client.)72 262.8 Q
(This scheduling algorithm can ha)72 278.4 Q .3 -.15(ve a s)-.2 H
(erious ef).15 E(fect upon performance when tw)-.25 E 2.5(oc)-.1 G
(lients are dra)-2.5 E(wing into)-.15 E(their windo)72 290.4 Q
(ws simultaneously)-.25 E 5(.I)-.65 G 2.5(fi)-5 G 2.5(ta)-2.5 G(llo)-2.5
E(ws one client to run until its request queue is empty by ignoring)-.25
E(isItT)72 302.4 Q(imeT)-.35 E(oY)-.8 E(ield, the client')-.55 E 2.5(sq)
-.55 G(ueue may in f)-2.5 E(act ne)-.1 E -.15(ve)-.25 G 2.5(re).15 G
(mpty and other clients will be block)-2.5 E(ed out.)-.1 E(On the)5 E
(other hand, if it switchs between dif)72 314.4 Q
(ferent clients too quickly)-.25 E 2.5(,p)-.65 G(erformance may suf)-2.5
E(fer due to too much)-.25 E(switching between conte)72 326.4 Q 2.5
(xts. F)-.15 F(or e)-.15 E
(xample, if a graphics processor needs to be set up with dra)-.15 E
(wing modes)-.15 E(before dra)72 338.4 Q(wing, and tw)-.15 E 2.5(od)-.1
G(if)-2.5 E(ferent clients are dra)-.25 E(wing with dif)-.15 E
(ferent modes into tw)-.25 E 2.5(od)-.1 G(if)-2.5 E(ferent windo)-.25 E
(ws, you)-.25 E(may switch your graphics processor modes so often that \
performance is impacted.)72 350.4 Q(See the Strate)72 366 Q
(gies document for heuristics on setting isItT)-.15 E(imeT)-.35 E(oY)-.8
E(ield.)-.55 E(The follo)72 381.6 Q(wing functions pro)-.25 E(vide the \
ability to suspend request processing on a particular client, resuming \
it)-.15 E(at some later time:)72 393.6 Q(int IgnoreClient \(who\))97
417.6 Q(ClientPtr who;)122 429.6 Q(int AttendClient \(who\))97 453.6 Q
(ClientPtr who;)122 465.6 Q
(Ignore client is responsible for pretending that the gi)72 477.6 Q -.15
(ve)-.25 G 2.5(nc).15 G(lient doesn')-2.5 E 2.5(te)-.18 G 2.5(xist. W)
-2.65 F(aitF)-.8 E(orSomething should not)-.15 E(return this client as \
ready for reading and should not return if only this client is ready)72
489.6 Q 5(.A)-.65 G(ttendClient undoes)-5 E(whate)72 501.6 Q -.15(ve)
-.25 G 2.5(rI).15 G(gnoreClient did, setting it up for input ag)-2.5 E
(ain.)-.05 E(Three functions support "process control" for X clients:)72
517.2 Q(Bool ClientSleep \(client, function, closure\))97 541.2 Q 11.38
(ClientPtr client;)122 553.2 R 28.05(Bool \(*function\)\(\);)122 565.2 R
44.17(pointer closure;)122 577.2 R(This suspends the current client \(t\
he calling routine is responsible for making its w)72 604.8 Q
(ay back to Dispatch\(\)\).)-.1 E
(No more X requests will be processed for this client until ClientW)72
616.8 Q(ak)-.8 E(eup is called.)-.1 E(Bool ClientSignal \(client\))97
640.8 Q 11.38(ClientPtr client;)122 652.8 R(This function causes a call\
 to the \(*function\) parameter passed to ClientSleep to be queued on t\
he w)72 680.4 Q(ork)-.1 E 2.5(queue. This)72 692.4 R
(does not automatically "w)2.5 E(ak)-.1 E(eup" the client, b)-.1 E
(ut the function called is free to do so by calling:)-.2 E(ClientW)97
716.4 Q(ak)-.8 E(eup \(client\))-.1 E 11.38(ClientPtr client;)122 728.4
R(Porting Layer De\214nition)72 768 Q 2.5(-1)106.84 G 144.06 2.5(2- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 13 13
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF
(This re-enables X request processing for the speci\214ed client.)72 84
Q/F1 10/Times-Bold@0 SF 2.5(4.8. Other)72 108 R(OS Functions)2.5 E F0
-.2(vo)97 123.6 S(id).2 E(ErrorF\(char *f, ...\))97 135.6 Q -.2(vo)97
159.6 S(id).2 E -.15(Fa)97 171.6 S(talError\(char *f, ...\)).15 E -.2
(vo)97 195.6 S(id).2 E(Error\(str\))97 207.6 Q(char *str;)107 219.6 Q
-1.1(Yo)72 235.2 S 2.5(us)1.1 G(hould write these three routines to pro)
-2.5 E(vide for diagnostic output from the dix and ddx layers, although)
-.15 E(implementing them to produce no output will not af)72 247.2 Q
(fect the correctness of your serv)-.25 E(er)-.15 E 5(.E)-.55 G
(rrorF\(\) and)-5 E -.15(Fa)72 259.2 S(talError\(\) tak).15 E 2.5(eap)
-.1 G(rintf\(\) type of format speci\214cation in the \214rst ar)-2.5 E
(gument and an implementation-depen-)-.18 E(dent number of ar)72 271.2 Q
(guments follo)-.18 E(wing that.)-.25 E(Normally)5 E 2.5(,t)-.65 G
(he formats passed to ErrorF\(\) and F)-2.5 E(atalError\(\) should)-.15
E(be terminated with a ne)72 283.2 Q 2.5(wline. Error\(\))-.25 F(pro)2.5
E(vides an os interf)-.15 E
(ace for printing out the string passed as an ar)-.1 E(gu-)-.18 E
(ment follo)72 295.2 Q(wed by a meaningful e)-.25 E
(xplanation of the last system error)-.15 E 5(.N)-.55 G
(ormally the string does not contain a)-5 E(ne)72 307.2 Q
(wline, and it is only called by the ddx layer)-.25 E 5(.I)-.55 G 2.5
(nt)-5 G(he sample implementation, Error\(\) uses the perror\(\))-2.5 E
(function.)72 319.2 Q(After printing the message ar)72 334.8 Q
(guments, F)-.18 E(atalError\(\) must be implemented such that the serv)
-.15 E(er will call)-.15 E(AbortDDX\(\) to gi)72 346.8 Q .3 -.15(ve t)
-.25 H(he ddx layer a chance to reset the hardw).15 E
(are, and then terminate the serv)-.1 E(er; it must not)-.15 E(return.)
72 358.8 Q(The sample serv)72 374.4 Q
(er implementation for these routines is in Xserv)-.15 E(er/os/util.c.)
-.15 E F1 2.5(4.9. Idiom)72 398.4 R(Support)2.5 E F0(The DBE speci\214c\
ation introduces the notion of idioms, which are groups of X requests w\
hich can be)72 414 Q -.15(exe)72 426 S(cuted more ef).15 E
(\214ciently when tak)-.25 E
(en as a whole compared to being performed indi)-.1 E
(vidually and sequen-)-.25 E(tially)72 438 Q 5(.T)-.65 G(his follo)-5 E
(wing serv)-.25 E(er internal support to allo)-.15 E
(ws DBE implementations, as well as other parts of the)-.25 E(serv)72
450 Q(er)-.15 E 2.5(,t)-.4 G 2.5(od)-2.5 G 2.5(oi)-2.5 G
(diom processing.)-2.5 E(xReqPtr PeekNe)97 477.6 Q
(xtRequest\(xReqPtr req, ClientPtr client, Bool readmore\))-.15 E
(If req is NULL, the return v)72 493.2 Q
(alue will be a pointer to the start of the complete request that follo)
-.25 E(ws the one)-.25 E(currently being e)72 505.2 Q -.15(xe)-.15 G
(cuted for the client.).15 E
(If req is not NULL, the function assumes that req is a pointer to a)5 E
(request in the client')72 517.2 Q 2.5(sr)-.55 G(equest b)-2.5 E(uf)-.2
E(fer)-.25 E 2.5(,a)-.4 G(nd the return v)-2.5 E
(alue will be a pointer to the the start of the complete)-.25 E
(request that follo)72 529.2 Q(ws req.)-.25 E
(If the complete request is not a)5 E -.25(va)-.2 G
(ilable, the function returns NULL; pointers to).25 E
(partial requests will ne)72 541.2 Q -.15(ve)-.25 G 2.5(rb).15 G 2.5(er)
-2.5 G 2.5(eturned. If)-2.5 F(\(and only if\) readmore is TR)2.5 E
(UE, PeekNe)-.4 E(xtRequest should try to)-.15 E
(read an additional request from the client if one is not already a)72
553.2 Q -.25(va)-.2 G(ilable in the client').25 E 2.5(sr)-.55 G
(equest b)-2.5 E(uf)-.2 E(fer)-.25 E 5(.I)-.55 G(f)-5 E(PeekNe)72 565.2
Q(xtRequest reads more data into the request b)-.15 E(uf)-.2 E(fer)-.25
E 2.5(,i)-.4 G 2.5(ts)-2.5 G(hould not mo)-2.5 E .3 -.15(ve o)-.15 H 2.5
(rc).15 G(hange the e)-2.5 E(xisting data.)-.15 E -.2(vo)97 592.8 S
(id SkipRequests\(xReqPtr req, ClientPtr client, int numskipped\)).2 E(\
The requests for the client up to and including the one speci\214ed by \
req will be skipped.)72 608.4 Q(numskipped must)5 E
(be the number of requests being skipped.)72 620.4 Q
(Normal request processing will resume with the request that fol-)5 E
(lo)72 632.4 Q(ws req.)-.25 E(The caller must not ha)5 E .3 -.15(ve m)
-.2 H(odi\214ed the contents of the request b).15 E(uf)-.2 E(fer in an)
-.25 E 2.5(yw)-.15 G(ay \(e.g., by doing)-2.6 E(byte sw)72 644.4 Q
(apping in place\).)-.1 E(Additionally)72 660 Q 2.5(,t)-.65 G .2 -.1
(wo m)-2.5 H
(acros in os.h operate on the xReq pointer returned by PeekNe).1 E
(xtRequest:)-.15 E(int ReqLen\(xReqPtr req, ClientPtr client\))97 687.6
Q(The v)72 703.2 Q
(alue of ReqLen is the request length in bytes of the gi)-.25 E -.15(ve)
-.25 G 2.5(nx).15 G(Req.)-2.5 E(otherReqT)97 730.8 Q
(ypePtr CastxReq\(xReq *req, otherReqT)-.8 E(ypePtr\))-.8 E
(Porting Layer De\214nition)72 768 Q 2.5(-1)106.84 G 144.06 2.5(3- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 14 14
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(The v)72 84 Q(alue of CastxReq is the con)-.25 E
-.15(ve)-.4 G(rsion of the gi).15 E -.15(ve)-.25 G 2.5(nr).15 G
(equest pointer to an otherReqT)-2.5 E(ypePtr \(which should)-.8 E
(be a pointer to a protocol structure type\).)72 96 Q
(Only those \214elds which come after the length \214eld of otherReq-)5
E -.8(Ty)72 108 S(pe may be accessed via the returned pointer).8 E(.)
-.55 E(Thus the \214rst tw)72 123.6 Q 2.5<6f8c>-.1 G
(elds of a request, reqT)-2.5 E
(ype and data, can be accessed directly using the xReq * returned)-.8 E
(by PeekNe)72 135.6 Q 2.5(xtRequest. The)-.15 F(ne)2.5 E
(xt \214eld, the length, can be accessed with ReqLen.)-.15 E(Fields be)5
E(yond that can be)-.15 E(accessed with CastxReq.)72 147.6 Q
(This comple)5 E(xity w)-.15 E
(as necessary because of the reencoding of core protocol that)-.1 E
(can happen due to the BigRequests e)72 159.6 Q(xtension.)-.15 E/F1 10
/Times-Bold@0 SF 2.5(5. DDX)72 183.6 R(LA)2.5 E(YER)-1 E F0
(This section describes the interf)72 199.2 Q(ace between DIX and DDX.)
-.1 E(While there may be an OS-dependent dri)5 E -.15(ve)-.25 G(r).15 E
(interf)72 211.2 Q(ace between DDX and the ph)-.1 E(ysical de)-.05 E
(vice, that interf)-.25 E(ace is left to the DDX implementor and is not)
-.1 E(speci\214ed here.)72 223.2 Q(The DDX layer does most of its w)72
238.8 Q(ork through procedures that are pointed to by dif)-.1 E
(ferent structs.)-.25 E(As pre)5 E(vi-)-.25 E(ously described, the beha)
72 250.8 Q(vior of these resources is lar)-.2 E
(gely determined by these procedure pointers.)-.18 E(Most of)5 E(these \
routines are for graphic display on the screen or support functions the\
reof.)72 262.8 Q(The rest are for user input)5 E(from input de)72 274.8
Q(vices.)-.25 E F1 2.5(5.1. INPUT)72 310.8 R F0
(In this document "input" refers to input from the user)72 326.4 Q 2.5
(,s)-.4 G(uch as mouse, k)-2.5 E -.15(ey)-.1 G
(board, and bar code readers.).15 E(X)5 E(input de)72 338.4 Q
(vices are of se)-.25 E -.15(ve)-.25 G(ral types: k).15 E -.15(ey)-.1 G
(board, pointing de).15 E(vice, and man)-.25 E 2.5(yo)-.15 G 2.5
(thers. The)-2.5 F(core serv)2.5 E(er has support)-.15 E(for e)72 350.4
Q(xtension de)-.15 E
(vices as described by the X Input Extension document; the interf)-.25 E
(aces used by that e)-.1 E(xtension)-.15 E(are described else)72 362.4 Q
2.5(where. The)-.25 F(core de)2.5 E
(vices are actually implemented as tw)-.25 E 2.5(oc)-.1 G
(ollections of de)-2.5 E(vices, the)-.25 E(mouse is a ButtonDe)72 374.4
Q(vice, a V)-.25 E(aluatorDe)-1.11 E(vice and a PtrFeedbackDe)-.25 E
(vice while the k)-.25 E -.15(ey)-.1 G(board is a K).15 E -.15(ey)-.25 G
(De).15 E(vice, a)-.25 E -.15(Fo)72 386.4 S(cusDe).15 E
(vice and a KbdFeedbackDe)-.25 E 2.5(vice. Each)-.25 F
(part implements a portion of the functionality of the de)2.5 E(vice.)
-.25 E(This abstraction is hidden from vie)72 398.4 Q 2.5(wf)-.25 G
(or core de)-2.5 E(vices by DIX.)-.25 E -1.1(Yo)72 422.4 S
(u, the DDX programmer)1.1 E 2.5(,a)-.4 G
(re responsible for some of the routines in this section.)-2.5 E
(Others are DIX rou-)5 E(tines that you should call to do the things yo\
u need to do in these DDX routines.)72 434.4 Q -.15(Pa)5 G 2.5(ya).15 G
(ttention to which is)-2.5 E(which.)72 446.4 Q F1 2.5(5.1.1. Input)72
482.4 R(De)2.5 E(vice Data Structur)-.15 E(es)-.18 E F0(DIX k)72 498 Q
(eeps a global directory of de)-.1 E
(vices in a central data structure called InputInfo.)-.25 E -.15(Fo)5 G
2.5(re).15 G(ach de)-2.5 E(vice there is)-.25 E 2.5(ad)72 510 S -.25(ev)
-2.5 G(ice structure called a De).25 E 2.5(viceRec. DIX)-.25 F
(can locate an)2.5 E 2.5(yD)-.15 G -.25(ev)-2.5 G
(iceRec through InputInfo.).25 E(In addition, it)5 E
(has a special pointer to identify the main pointing de)72 522 Q
(vice and a special pointer to identify the main)-.25 E -.1(ke)72 534 S
(yboard.)-.05 E(The De)72 549.6 Q(viceRec \(Xserv)-.25 E
(er/include/input.h\) is a de)-.15 E
(vice-independent structure that contains the state of an)-.25 E
(input de)72 561.6 Q 2.5(vice. A)-.25 F(De)2.5 E
(vicePtr is simply a pointer to a De)-.25 E(viceRec.)-.25 E(An xEv)72
577.2 Q(ent describes an e)-.15 E -.15(ve)-.25 G(nt the serv).15 E
(er reports to a client.)-.15 E
(De\214ned in Xproto.h, it is a huge struct of union)5 E
(of structs that ha)72 589.2 Q .3 -.15(ve \214)-.2 H
(elds for all kinds of e).15 E -.15(ve)-.25 G 2.5(nts. All).15 F
(of the v)2.5 E(ariants o)-.25 E -.15(ve)-.15 G
(rlap, so that the struct is actually).15 E -.15(ve)72 601.2 S
(ry small in memory).15 E(.)-.65 E F1 2.5(5.1.2. Pr)72 637.2 R
(ocessing Ev)-.18 E(ents)-.1 E F0(The main DDX input interf)72 652.8 Q
(ace is the follo)-.1 E(wing routine:)-.25 E -.2(vo)97 676.8 S
(id ProcessInputEv).2 E(ents\(\))-.15 E -1.1(Yo)72 688.8 S 2.5(um)1.1 G
(ust write this routine to deli)-2.5 E -.15(ve)-.25 G 2.5(ri).15 G
(nput e)-2.5 E -.15(ve)-.25 G(nts from the user).15 E 5(.D)-.55 G
(IX calls it when input is pending \(see)-5 E(ne)72 700.8 Q
(xt section\), and possibly e)-.15 E -.15(ve)-.25 G 2.5(nw).15 G
(hen it is not.)-2.5 E -1.1(Yo)5 G 2.5(us)1.1 G(hould write it to get e)
-2.5 E -.15(ve)-.25 G(nts from each de).15 E(vice and)-.25 E(deli)72
712.8 Q -.15(ve)-.25 G 2.5(rt).15 G(he e)-2.5 E -.15(ve)-.25 G
(nts to DIX.).15 E 1.6 -.8(To d)5 H(eli).8 E -.15(ve)-.25 G 2.5(rt).15 G
(he e)-2.5 E -.15(ve)-.25 G(nts to DIX, DDX should call the follo).15 E
(wing routine:)-.25 E(Porting Layer De\214nition)72 768 Q 2.5(-1)106.84
G 144.06 2.5(4- A)-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 15 15
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF -.2(vo)97 84 S(id De).2 E(vicePtr)-.25 E
(->processInputProc\(pEv)-.2 E(ent, de)-.15 E(vice, count\))-.25 E(xEv)
132 96 Q(entPtr e)-.15 E -.15(ve)-.25 G(nts;).15 E(De)132 108 Q
(viceIntPtr de)-.25 E(vice;)-.25 E(int count;)132 120 Q
(This is the "input proc" for the de)72 132 Q(vice, a DIX procedure.)
-.25 E(DIX will \214ll in this procedure pointer to one of its)5 E -.25
(ow)72 144 S 2.5(nr).25 G(outines by the time ProcessInputEv)-2.5 E
(ents\(\) is called the \214rst time.)-.15 E
(Call this input proc routine as man)5 E(y)-.15 E
(times as needed to deli)72 156 Q -.15(ve)-.25 G 2.5(ra).15 G 2.5(sm)
-2.5 G(an)-2.5 E 2.5(ye)-.15 G -.15(ve)-2.75 G(nts as should be deli).15
E -.15(ve)-.25 G 2.5(red. DIX).15 F(will b)2.5 E(uf)-.2 E
(fer them up and send them)-.25 E(out as needed.)72 168 Q
(Count is set to the number of e)5 E -.15(ve)-.25 G
(nt records which mak).15 E 2.5(eu)-.1 G 2.5(po)-2.5 G(ne atomic de)-2.5
E(vice e)-.25 E -.15(ve)-.25 G(nt and is).15 E(al)72 180 Q -.1(wa)-.1 G
(ys 1 for the core de).1 E
(vices \(see the X Input Extension for descriptions of de)-.25 E
(vices which may use count >)-.25 E(1\).)72 192 Q -.15(Fo)72 216 S 2.5
(re).15 G(xample, your ProcessInputEv)-2.65 E
(ents\(\) routine might check the mouse and the k)-.15 E -.15(ey)-.1 G
2.5(board. If).15 F(the k)2.5 E -.15(ey)-.1 G(board).15 E(had se)72 228
Q -.15(ve)-.25 G(ral k).15 E -.15(ey)-.1 G(strok).15 E
(es queued up, it could just call the k)-.1 E -.15(ey)-.1 G(board').15 E
2.5(sp)-.55 G(rocessInputProc as man)-2.5 E 2.5(yt)-.15 G(imes as)-2.5 E
(needed to \215ush its internal queue.)72 240 Q -2.15 -.25(ev e)72 264 T
(nt is an xEv).25 E(ent struct you pass to the input proc.)-.15 E
(When the input proc returns, it is \214nished with the)5 E -2.15 -.25
(ev e)72 276 T(nt rec, and you can \214ll in ne).25 E 2.5(wv)-.25 G
(alues and call the input proc ag)-2.75 E(ain with it.)-.05 E -1.1(Yo)72
300 S 2.5(us)1.1 G(hould deli)-2.5 E -.15(ve)-.25 G 2.5(rt).15 G(he e)
-2.5 E -.15(ve)-.25 G(nts in the same order that the).15 E 2.5(yw)-.15 G
(ere generated.)-2.5 E -.15(Fo)72 324 S 2.5(rk).15 G -.15(ey)-2.6 G
(board and pointing de).15 E(vices the xEv)-.25 E(ent v)-.15 E
(ariant should be k)-.25 E -.15(ey)-.1 G(ButtonPointer).15 E 5(.F)-.55 G
(ill in the follo)-5 E(wing)-.25 E(\214elds in the xEv)72 336 Q
(ent record:)-.15 E 30.28(type is)97 360 R(one of the follo)2.5 E
(wing: K)-.25 E -.15(ey)-.25 G(Press, K).15 E -.15(ey)-.25 G
(Release, ButtonPress,).15 E(ButtonRelease, or MotionNotify)197 372 Q
25.28(detail for)97 384 R -2.15 -.25(Ke y)2.5 H(Press or K).25 E -.15
(ey)-.25 G(Release \214elds, this should be the).15 E -.1(ke)197 396 S
2.5(yn)-.05 G(umber \(not the ASCII code\); otherwise unused)-2.5 E
29.72(time is)97 408 R(the time that the e)2.5 E -.15(ve)-.25 G
(nt happened \(32-bits, in milliseconds, arbitrary origin\)).15 E 24.17
(rootX is)97 420 R(the x coordinate of cursor)2.5 E 24.17(rootY is)97
432 R(the y coordinate of cursor)2.5 E
(The rest of the \214elds are \214lled in by DIX.)72 456 Q
(The time stamp is maintained by your code in the DDX layer)72 471.6 Q
2.5(,a)-.4 G(nd it is your responsibility to stamp all)-2.5 E -2.15 -.25
(ev e)72 483.6 T(nts correctly).25 E(.)-.65 E
(The x and y coordinates of the pointing de)72 499.2 Q
(vice and the time must be \214lled in for all e)-.25 E -.15(ve)-.25 G
(nt types including).15 E -.1(ke)72 511.2 S(yboard e)-.05 E -.15(ve)-.25
G(nts.).15 E(The pointing de)72 526.8 Q(vice must report all b)-.25 E
(utton press and release e)-.2 E -.15(ve)-.25 G 2.5(nts. In).15 F
(addition, it should report a Motion-)2.5 E(Notify e)72 538.8 Q -.15(ve)
-.25 G(nt e).15 E -.15(ve)-.25 G
(ry time it gets called if the pointing de).15 E(vice has mo)-.25 E -.15
(ve)-.15 G 2.5(ds).15 G(ince the last notify)-2.5 E 5(.I)-.65 G
(ntermediate)-5 E(pointing de)72 550.8 Q(vice mo)-.25 E -.15(ve)-.15 G
2.5(sa).15 G(re stored in a special GetMotionEv)-2.5 E(ents b)-.15 E(uf)
-.2 E(fer)-.25 E 2.5(,b)-.4 G(ecause most client programs are)-2.5 E
(not interested in them.)72 562.8 Q(There are quite a collection of sam\
ple implementations of this routine, one for each supported de)72 586.8
Q(vice.)-.25 E/F1 10/Times-Bold@0 SF 2.5(5.1.3. T)72 622.8 R
(elling DIX When Input is P)-.92 E(ending)-.2 E F0(In the serv)72 638.4
Q(er')-.15 E 2.5(sd)-.55 G
(ispatch loop, DIX checks to see if there is an)-2.5 E 2.5(yd)-.15 G
-.25(ev)-2.5 G(ice input pending whene).25 E -.15(ve)-.25 G 2.5(rW).15 G
(aitF)-3.3 E(or)-.15 E(-)-.2 E(Something\(\) returns.)72 650.4 Q(If the\
 check says that input is pending, DIX calls the DDX routine ProcessIn-)
5 E(putEv)72 662.4 Q(ents\(\).)-.15 E
(This check for pending input must be v)72 678 Q
(ery quick; a procedure call is too slo)-.15 E 3.8 -.65(w. T)-.25 H
(he code that does the check).65 E
(is a hardwired IF statement in DIX code that simply compares the v)72
690 Q(alues pointed to by tw)-.25 E 2.5(op)-.1 G 2.5(ointers. If)-2.5 F
(the)2.5 E -.25(va)72 702 S(lues are dif).25 E
(ferent, then it assumes that input is pending and ProcessInputEv)-.25 E
(ents\(\) is called by DIX.)-.15 E -1.1(Yo)72 717.6 S 2.5(um)1.1 G
(ust pass pointers to DIX to tell it what v)-2.5 E(alues to compare.)
-.25 E(The follo)5 E(wing procedure is used to set)-.25 E
(these pointers:)72 729.6 Q(Porting Layer De\214nition)72 768 Q 2.5(-1)
106.84 G 144.06 2.5(5- A)-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 16 16
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF -.2(vo)97 84 S(id SetInputCheck\(p1, p2\)).2 E
(long *p1, *p2;)122 96 Q -1.1(Yo)72 111.6 S 2.5(us)1.1 G(hould call it \
sometime during initialization to indicate to DIX the correct locations\
 to check.)-2.5 E -1.1(Yo)5 G(u)1.1 E
(should pay special attention to the size of what the)72 123.6 Q 2.5(ya)
-.15 G(ctually point to, because the locations are assumed to)-2.5 E
(be longs.)72 135.6 Q(These tw)72 159.6 Q 2.5(op)-.1 G
(ointers are initialized by DIX to point to arbitrary v)-2.5 E
(alues that are dif)-.25 E 2.5(ferent. In)-.25 F(other w)2.5 E(ords, if)
-.1 E(you for)72 171.6 Q
(get to call this routine during initialization, the w)-.18 E
(orst thing that will happen is that ProcessIn-)-.1 E(putEv)72 183.6 Q
(ents will be called when there are no e)-.15 E -.15(ve)-.25 G
(nts to process.).15 E(p1 and p2 might point at the head and tail of so\
me shared memory queue.)72 207.6 Q(Another use w)5 E(ould be to ha)-.1 E
-.15(ve)-.2 G(one point at a constant 0, with the other pointing at som\
e mask containing 1s for each input de)72 219.6 Q(vice that has)-.25 E
(something pending.)72 231.6 Q(The DDX layer of the sample serv)72 255.6
Q(er calls SetInputCheck\(\) once when the serv)-.15 E(er')-.15 E 2.5
(sp)-.55 G(ri)-2.5 E -.25(va)-.25 G(te internal queue is).25 E 2.5
(initialized. It)72 267.6 R(passes pointers to the queue')2.5 E 2.5(sh)
-.55 G(ead and tail.)-2.5 E(See Xserv)5 E(er/mi/mieq.c.)-.15 E(int T)97
291.6 Q(imeSinceLastInputEv)-.35 E(ent\(\))-.15 E
(DDX must time stamp all hardw)72 303.6 Q(are input e)-.1 E -.15(ve)-.25
G 2.5(nts. But).15 F(DIX sometimes needs to kno)2.5 E 2.5(wt)-.25 G
(he time and the OS)-2.5 E(layer needs to kno)72 315.6 Q 2.5(wt)-.25 G
(he time since the last hardw)-2.5 E(are input e)-.1 E -.15(ve)-.25 G
(nt in order for the screen sa).15 E -.15(ve)-.2 G 2.5(rt).15 G 2.5(ow)
-2.5 G(ork.)-2.6 E -.35(Ti)72 327.6 S(meSinceLastInputEv).35 E
(ent\(\) returns the this time in milliseconds.)-.15 E/F1 10
/Times-Bold@0 SF 2.5(5.1.4. Contr)72 363.6 R(olling Input De)-.18 E
(vices)-.15 E F0 -1.1(Yo)72 379.2 S 2.5(um)1.1 G
(ust write four routines to do v)-2.5 E(arious de)-.25 E
(vice-speci\214c things with the k)-.25 E -.15(ey)-.1 G
(board and pointing de).15 E(vice.)-.25 E(The)72 391.2 Q 2.5(yc)-.15 G
(an ha)-2.5 E .3 -.15(ve a)-.2 H .3 -.15(ny n).15 H
(ame you wish because you pass the procedure pointers to DIX routines.)
.15 E(int pInternalDe)97 427.2 Q(vice->v)-.25 E(aluator)-.25 E
(->GetMotionProc\(pde)-.2 E(vice, coords, start, stop, pScreen\))-.25 E
(De)122 439.2 Q(viceIntPtr pde)-.25 E(vice;)-.25 E(xT)122 451.2 Q
(imecoord * coords;)-.35 E(unsigned long start;)122 463.2 Q
(unsigned long stop;)122 475.2 Q(ScreenPtr pScreen;)122 487.2 Q -1.1(Yo)
72 499.2 S 2.5(uw)1.1 G
(rite this DDX routine to \214ll in coords with all the motion e)-2.5 E
-.15(ve)-.25 G(nts that ha).15 E .3 -.15(ve t)-.2 H
(imes \(32-bit count of mil-).15 E
(liseconds\) between time start and time stop.)72 511.2 Q
(It should return the number of motion e)5 E -.15(ve)-.25 G
(nts returned.).15 E(If there)5 E(is no motion e)72 523.2 Q -.15(ve)-.25
G(nts support, this routine should do nothing and return zero.).15 E
(The maximum number of)5 E(coords to return is set in InitPointerDe)72
535.2 Q(viceStruct\(\), belo)-.25 E -.65(w.)-.25 G
(When the user drags the pointing de)72 559.2 Q(vice, the cursor positi\
on theoretically sweeps through an in\214nite num-)-.25 E
(ber of points.)72 571.2 Q(Normally)5 E 2.5(,ac)-.65 G(lient that is co\
ncerned with points other than the starting and ending points will)-2.5
E(recei)72 583.2 Q .3 -.15(ve a p)-.25 H(ointer).15 E(-mo)-.2 E .3 -.15
(ve e)-.15 H -.15(ve)-.1 G(nt only as often as the serv).15 E
(er generates them. \(Mo)-.15 E .3 -.15(ve e)-.15 H -.15(ve)-.1 G
(nts do not queue up;).15 E(each ne)72 595.2 Q 2.5(wo)-.25 G
(ne replaces the last in the queue.\))-2.5 E 2.5(As)5 G(erv)-2.5 E(er)
-.15 E 2.5(,i)-.4 G 2.5(fd)-2.5 G(esired, can implement a scheme to sa)
-2.5 E .3 -.15(ve t)-.2 H(hese).15 E(intermediate e)72 607.2 Q -.15(ve)
-.25 G(nts in a motion b).15 E(uf)-.2 E(fer)-.25 E 5(.A)-.55 G
(client application, lik)-2.5 E 2.5(eap)-.1 G
(aint program, may then request that)-2.5 E(these e)72 619.2 Q -.15(ve)
-.25 G(nts be deli).15 E -.15(ve)-.25 G
(red to it through the GetMotionProc routine.).15 E -.2(vo)97 643.2 S
(id pInternalDe).2 E(vice->bell->BellProc\(percent, pDe)-.25 E
(vice, ctrl, unkno)-.25 E(wn\))-.25 E(int percent;)122 655.2 Q(De)122
667.2 Q(viceIntPtr pDe)-.25 E(vice;)-.25 E(pointer ctrl;)122 679.2 Q
(int class;)122 691.2 Q -1.1(Yo)72 703.2 S 2.5(un)1.1 G
(eed to write this routine to ring the bell on the k)-2.5 E -.15(ey)-.1
G 2.5(board. loud).15 F(is a number from 0 to 100, with 100)2.5 E
(being the loudest.)72 715.2 Q
(Class is either BellFeedbackClass or KbdFeedbackClass \(from XI.h\).)5
E(Porting Layer De\214nition)72 768 Q 2.5(-1)106.84 G 144.06 2.5(6- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 17 17
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF -.2(vo)97 84 S(id pInternalDe).2 E(vice->somede)
-.25 E(vice->CtrlProc\(de)-.25 E(vice, ctrl\))-.25 E(De)122 96 Q
(vicePtr de)-.25 E(vice;)-.25 E(SomethingCtrl *ctrl;)122 108 Q -1.1(Yo)
72 135.6 S 2.5(uw)1.1 G(rite tw)-2.5 E 2.5(ov)-.1 G
(ersions of this procedure, one for the k)-2.65 E -.15(ey)-.1 G
(board and one for the pointing de).15 E 2.5(vice. DIX)-.25 F(calls it)
2.5 E(to inform DDX when a client has requested changes in the current \
settings for the particular de)72 147.6 Q 2.5(vice. F)-.25 F(or a)-.15 E
-.1(ke)72 159.6 S(yboard, this might be the repeat threshold and rate.)
-.05 E -.15(Fo)5 G 2.5(rap).15 G(ointing de)-2.5 E
(vice, this might be a scaling f)-.25 E(actor)-.1 E
(\(coarse or \214ne\) for position reporting.)72 171.6 Q
(See input.h for the ctrl structures.)5 E/F1 10/Times-Bold@0 SF 2.5
(5.1.5. Input)72 207.6 R(Initialization)2.5 E F0
(Input initialization is a bit complicated.)72 223.2 Q(It all starts wi\
th InitInput\(\), a routine that you write to call AddIn-)5 E(putDe)72
235.2 Q(vice\(\) twice \(once for pointing de)-.25 E
(vice and once for k)-.25 E -.15(ey)-.1 G 2.5(board.\) Y).15 F
(ou also w)-1.1 E(ant to call Re)-.1 E(gis-)-.15 E(terK)72 247.2 Q -.15
(ey)-.25 G(boardDe).15 E(vice\(\) and Re)-.25 E(gisterPointerDe)-.15 E
(vice\(\) on them.)-.25 E(When you Add the de)72 271.2 Q
(vices, a routine you supply for each de)-.25 E
(vice gets called to initialize them.)-.25 E -1.1(Yo)5 G(ur indi-)1.1 E
(vidual initialize routines must call InitK)72 283.2 Q -.15(ey)-.25 G
(boardDe).15 E(viceStruct\(\) or InitPointerDe)-.25 E
(viceStruct\(\), depending)-.25 E(upon which it is.)72 295.2 Q
(In other w)5 E(ords, you indicate twice that the k)-.1 E -.15(ey)-.1 G
(board is the k).15 E -.15(ey)-.1 G(board and the pointer is the).15 E
(pointer)72 307.2 Q(.)-.55 E -.2(vo)97 331.2 S(id InitInput\(ar).2 E
(gc, ar)-.18 E(gv\))-.18 E(int ar)107 343.2 Q(gc;)-.18 E(char **ar)107
355.2 Q(gv;)-.18 E(InitInput is a DDX routine you must write to initial\
ize the input subsystem in DDX.)72 370.8 Q(It must call AddInput-)5 E
(De)72 382.8 Q(vice\(\) for each de)-.25 E(vice that might generate e)
-.25 E -.15(ve)-.25 G 2.5(nts. In).15 F(addition, you must re)2.5 E
(gister the main k)-.15 E -.15(ey)-.1 G(board and).15 E(pointing de)72
394.8 Q(vices by calling Re)-.25 E(gisterPointerDe)-.15 E
(vice\(\) and Re)-.25 E(gisterK)-.15 E -.15(ey)-.25 G(boardDe).15 E
(vice\(\).)-.25 E(De)97 418.8 Q(vicePtr AddInputDe)-.25 E(vice\(de)-.25
E(viceProc, autoStart\))-.25 E(De)122 430.8 Q(viceProc de)-.25 E
(viceProc;)-.25 E(Bool autoStart;)122 442.8 Q(AddInputDe)72 458.4 Q
(vice is a DIX routine you call to create a de)-.25 E(vice object.)-.25
E(de)5 E(viceProc is a DDX routine that is)-.25 E(called by DIX to do v)
72 470.4 Q(arious operations.)-.25 E(AutoStart should be TR)5 E
(UE for de)-.4 E(vices that need to be turned on at)-.25 E
(initialization time with a special call, as opposed to w)72 482.4 Q
(aiting for some client application to turn them on.)-.1 E
(This routine returns NULL if suf)72 494.4 Q
(\214cient memory cannot be allocated to install the de)-.25 E(vice.)
-.25 E(Note also that e)72 518.4 Q(xcept for the main k)-.15 E -.15(ey)
-.1 G(board and pointing de).15 E(vice, an e)-.25 E
(xtension is needed to pro)-.15 E(vide for a)-.15 E(client interf)72
530.4 Q(ace to a de)-.1 E(vice.)-.25 E -.2(vo)97 554.4 S(id Re).2 E
(gisterPointerDe)-.15 E(vice\(de)-.25 E(vice\))-.25 E(De)122 566.4 Q
(vicePtr de)-.25 E(vice;)-.25 E(Re)72 582 Q(gisterPointerDe)-.15 E
(vice is a DIX routine that your DDX code calls that mak)-.25 E
(es that de)-.1 E(vice the main pointing)-.25 E(de)72 594 Q 2.5
(vice. This)-.25 F
(routine is called once upon initialization and cannot be called ag)2.5
E(ain.)-.05 E -.2(vo)97 618 S(id Re).2 E(gisterK)-.15 E -.15(ey)-.25 G
(boardDe).15 E(vice\(de)-.25 E(vice\))-.25 E(De)122 630 Q(vicePtr de)
-.25 E(vice;)-.25 E(Re)72 645.6 Q(gisterK)-.15 E -.15(ey)-.25 G(boardDe)
.15 E(vice mak)-.25 E(es the gi)-.1 E -.15(ve)-.25 G 2.5(nd).15 G -.25
(ev)-2.5 G(ice the main k).25 E -.15(ey)-.1 G 2.5(board. This).15 F
(routine is called once upon ini-)2.5 E
(tialization and cannot be called ag)72 657.6 Q(ain.)-.05 E(The follo)72
681.6 Q(wing DIX procedures return the speci\214ed De)-.25 E(vicePtr)
-.25 E 2.5(.T)-.55 G(he)-2.5 E 2.5(ym)-.15 G
(ay or may not be useful to DDX)-2.5 E(implementors.)72 693.6 Q(De)97
717.6 Q(vicePtr LookupK)-.25 E -.15(ey)-.25 G(boardDe).15 E(vice\(\))
-.25 E(Porting Layer De\214nition)72 768 Q 2.5(-1)106.84 G 144.06 2.5
(7- A)-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 18 18
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(LookupK)72 84 Q -.15(ey)-.25 G(boardDe).15 E
(vice returns pointer for current main k)-.25 E -.15(ey)-.1 G(board de)
.15 E(vice.)-.25 E(De)97 108 Q(vicePtr LookupPointerDe)-.25 E(vice\(\))
-.25 E(LookupPointerDe)72 123.6 Q
(vice returns pointer for current main pointing de)-.25 E(vice.)-.25 E
2.5(AD)72 151.2 S -.25(ev)-2.5 G
(iceProc \(the kind passed to AddInputDe).25 E(vice\(\)\) in the follo)
-.25 E(wing form:)-.25 E(Bool pInternalDe)97 175.2 Q(vice->De)-.25 E
(viceProc\(de)-.25 E(vice, action\);)-.25 E(De)122 187.2 Q
(viceIntPtr de)-.25 E(vice;)-.25 E(int action;)122 199.2 Q -1.1(Yo)72
214.8 S 2.5(um)1.1 G(ust write a De)-2.5 E(viceProc for each de)-.25 E
2.5(vice. de)-.25 F(vice points to the de)-.25 E(vice record.)-.25 E
(action tells what action)5 E(to tak)72 226.8 Q(e; it will be one of)-.1
E(these de\214ned constants)5 E(\(de\214ned in input.h\):)5 E 21.5<8344>
72 242.4 S(EVICE_INIT - At DEVICE_INIT time, the de)-21.5 E
(vice should initialize itself by calling InitPointerDe-)-.25 E
(viceStruct\(\), InitK)97 254.4 Q -.15(ey)-.25 G(boardDe).15 E
(viceStruct\(\), or a similar routine \(see belo)-.25 E
(w\) and "opening" the de)-.25 E(vice if)-.25 E(necessary)97 266.4 Q 5
(.I)-.65 G 2.5(fy)-5 G(ou return a non-zero \(i.e., != Success\) v)-2.5
E(alue from the DEVICE_INIT call, that de)-.25 E(vice)-.25 E
(will be considered una)97 278.4 Q -.25(va)-.2 G
(ilable. If either the main k).25 E -.15(ey)-.1 G
(board or main pointing de).15 E(vice cannot be initial-)-.25 E
(ized, the DIX code will refuse to continue booting up.)97 290.4 Q 21.5
<8344>72 306 S(EVICE_ON - If the De)-21.5 E
(viceProc is called with DEVICE_ON, then it is allo)-.25 E
(wed to start putting)-.25 E -2.15 -.25(ev e)97 318 T(nts into the clie\
nt stream by calling through the ProcessInputProc in the de).25 E(vice.)
-.25 E 21.5<8344>72 333.6 S(EVICE_OFF - If the De)-21.5 E
(viceProc is called with DEVICE_OFF)-.25 E 2.5(,n)-.8 G 2.5(of)-2.5 G
(urther e)-2.5 E -.15(ve)-.25 G(nts from that de).15 E(vice)-.25 E
(should be gi)97 345.6 Q -.15(ve)-.25 G 2.5(nt).15 G 2.5(ot)-2.5 G
(he DIX layer)-2.5 E 5(.T)-.55 G(he de)-5 E
(vice will appear to be dead to the user)-.25 E(.)-.55 E 21.5<8344>72
361.2 S
(EVICE_CLOSE - At DEVICE_CLOSE \(terminate or reset\) time, the de)-21.5
E(vice should be totally)-.25 E(closed do)97 373.2 Q(wn.)-.25 E -.2(vo)
122 397.2 S(id InitPointerDe).2 E(viceStruct\(de)-.25 E
(vice, map, mapLength,)-.25 E(GetMotionEv)172 409.2 Q
(ents, ControlProc, numMotionEv)-.15 E(ents\))-.15 E(De)147 421.2 Q
(vicePtr de)-.25 E(vice;)-.25 E(CARD8 *map;)147 433.2 Q(int mapLength;)
147 445.2 Q -1.11(Va)147 457.2 S(luatorMotionProcPtr ControlProc;)1.11 E
(PtrCtrlProcPtr GetMotionEv)147 469.2 Q(ents;)-.15 E(int numMotionEv)147
481.2 Q(ents;)-.15 E(InitPointerDe)97 493.2 Q(viceStruct is a DIX routi\
ne you call at DEVICE_INIT time to declare some operating)-.25 E
(routines and data structures for a pointing de)97 505.2 Q 2.5
(vice. map)-.25 F(and mapLength are as described in the X)2.5 E -.4(Wi)
97 517.2 S(ndo).4 E 2.5(wS)-.25 G(ystem protocol speci\214cation.)-2.5 E
(ControlProc and GetMotionEv)5 E(ents are DDX routines, see)-.15 E(abo)
97 529.2 Q -.15(ve)-.15 G(.).15 E(numMotionEv)97 553.2 Q
(ents is for the motion-b)-.15 E(uf)-.2 E(fer)-.25 E
(-size for the GetMotionEv)-.2 E(ents request.)-.15 E 2.5(At)5 G
(ypical length)-2.5 E(for a motion b)97 565.2 Q(uf)-.2 E(fer w)-.25 E
(ould be 100 e)-.1 E -.15(ve)-.25 G 2.5(nts. A).15 F(serv)2.5 E
(er that does not implement this capability should set)-.15 E
(numMotionEv)97 577.2 Q(ents to zero.)-.15 E -.2(vo)122 601.2 S
(id InitK).2 E -.15(ey)-.25 G(boardDe).15 E(viceStruct\(de)-.25 E
(vice, pK)-.25 E -.15(ey)-.25 G(Syms, pModi\214ers, Bell, ControlProc\))
.15 E(De)147 613.2 Q(vicePtr de)-.25 E(vice;)-.25 E -2.15 -.25(Ke y)147
625.2 T(SymsPtr pK).25 E -.15(ey)-.25 G(Syms;).15 E
(CARD8 *pModi\214ers;)147 637.2 Q(BellProcPtr Bell;)147 649.2 Q
(KbdCtrlProcPtr ControlProc;)147 661.2 Q -1.1(Yo)97 685.2 S 2.5(uc)1.1 G
(all this DIX routine when a k)-2.5 E -.15(ey)-.1 G(board de).15 E
(vice is initialized and its de)-.25 E(vice procedure is called)-.25 E
(with DEVICE_INIT)97 697.2 Q 5(.T)-.74 G(he formats of the k)-5 E -.15
(ey)-.1 G(syms and modi\214er maps are de\214ned in).15 E(Xserv)97 709.2
Q 2.5(er/include/input.h. The)-.15 F 2.5(yd)-.15 G
(escribe the layout of k)-2.5 E -.15(ey)-.1 G 2.5(so).15 G 2.5(nt)-2.5 G
(he k)-2.5 E -.15(ey)-.1 G(boards, and the glyphs associ-).15 E
(ated with them.)97 721.2 Q 2.5(\(S)5 G(ee the ne)-2.5 E
(xt section for information on setting up the modi\214er map and the k)
-.15 E -.15(ey)-.1 G(sym).15 E(Porting Layer De\214nition)72 768 Q 2.5
(-1)106.84 G 144.06 2.5(8- A)-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 19 19
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(map.\) ControlProc)97 84 R
(and Bell are DDX routines, see abo)2.5 E -.15(ve)-.15 G(.).15 E/F1 10
/Times-Bold@0 SF 2.5(5.1.6. K)72 120 R(eyboard Mapping and K)-.25 E
(eycodes)-.25 E F0(When you send a k)72 135.6 Q -.15(ey)-.1 G(board e)
.15 E -.15(ve)-.25 G(nt, you send a report that a gi).15 E -.15(ve)-.25
G 2.5(nk).15 G .3 -.15(ey h)-2.6 H(as either been pressed or has been)
.15 E 2.5(released. There)72 147.6 R(must be a k)2.5 E -.15(ey)-.1 G
(code for each k).15 E .3 -.15(ey t)-.1 H(hat identi\214es the k).15 E
-.15(ey)-.1 G 2.5(;t).15 G(he k)-2.5 E -.15(ey)-.1 G(code-to-k).15 E .3
-.15(ey m)-.1 H(apping can be).15 E(an)72 159.6 Q 2.5(ym)-.15 G(apping \
you desire, because you specify the mapping in a table you set up for D\
IX.)-2.5 E(Ho)5 E(we)-.25 E -.15(ve)-.25 G .8 -.4(r, y).15 H(ou are).4 E
(restricted by the protocol speci\214cation to k)72 171.6 Q -.15(ey)-.1
G(code v).15 E(alues in the range 8 to 255 inclusi)-.25 E -.15(ve)-.25 G
(.).15 E(The k)72 195.6 Q -.15(ey)-.1 G
(code mapping information that you set up consists of the follo).15 E
(wing:)-.25 E 21.5<8341>72 211.2 S(minimum and maximum k)-19 E -.15(ey)
-.1 G(code number).15 E 21.5<8341>72 226.8 S 2.5(na)-21.5 G
(rray of sets of k)-2.5 E -.15(ey)-.1 G(syms for each k).15 E -.15(ey)
-.1 G 2.5(,t)-.5 G(hat is of length maxk)-2.5 E -.15(ey)-.1 G
(code - mink).15 E -.15(ey)-.1 G(code + 1.).15 E(Each ele-)5 E
(ment of this array is a list of codes for symbols that are on that k)97
238.8 Q -.15(ey)-.1 G 5(.T)-.5 G(here is no limit to the number)-5 E
(of symbols that can be on a k)97 250.8 Q -.15(ey)-.1 G(.)-.5 E
(Once the map is set up, DIX k)72 266.4 Q
(eeps and maintains the client')-.1 E 2.5(sc)-.55 G(hanges to it.)-2.5 E
(The X protocol de\214nes standard names to indicate the symbol\(s\) pr\
inted on each k)72 290.4 Q -.15(ey)-.1 G(cap. \(See).15 E(X11/k)72 302.4
Q -.15(ey)-.1 G(sym.h\)).15 E(Le)72 326.4 Q -.05(ga)-.15 G 2.5(lm).05 G
(odi\214er k)-2.5 E -.15(ey)-.1 G 2.5(sm).15 G
(ust generate both up and do)-2.5 E(wn transitions.)-.25 E
(When a client tries to change a modi\214er)5 E -.1(ke)72 338.4 S 2.5
(y\()-.05 G(for instance, to mak)-2.5 E 2.5(e")-.1 G(A" the "Control" k)
-2.5 E -.15(ey)-.1 G(\), DIX calls the follo).15 E
(wing routine, which should retuurn)-.25 E(TR)72 350.4 Q(UE if the k)-.4
E .3 -.15(ey c)-.1 H(an be used as a modi\214er on the gi).15 E -.15(ve)
-.25 G 2.5(nd).15 G -.25(ev)-2.5 G(ice:).25 E(Bool Le)97 374.4 Q -.05
(ga)-.15 G(lModi\214er\(k).05 E -.15(ey)-.1 G 2.5(,p)-.5 G(De)-2.5 E
(v\))-.25 E(unsigned int k)107 386.4 Q -.15(ey)-.1 G(;).15 E(De)107
398.4 Q(vicePtr pDe)-.25 E(v;)-.25 E F1 2.5(5.2. Scr)72 422.4 R(eens)
-.18 E F0(Dif)72 438 Q(ferent computer graphics displays ha)-.25 E .3
-.15(ve d)-.2 H(if).15 E(ferent capabilities.)-.25 E
(Some are simple monochrome frame)5 E -.2(bu)72 450 S -.25(ff).2 G
(ers that are just lying there in memory).25 E 2.5(,w)-.65 G
(aiting to be written into.)-2.6 E(Others are color displays with man)5
E(y)-.15 E(bits per pix)72 462 Q(el using some color lookup table.)-.15
E(Still others ha)5 E .3 -.15(ve h)-.2 H
(igh-speed graphic processors that prefer to).15 E(do all of the w)72
474 Q(ork themselv)-.1 E(es, including maintaining their o)-.15 E
(wn high-le)-.25 E -.15(ve)-.25 G(l, graphic data structures.).15 E F1
2.5(5.2.1. Scr)72 510 R(een Hard)-.18 E(war)-.15 E 2.5(eR)-.18 G(equir)
-2.5 E(ements)-.18 E F0(The only requirement on screens is that you be \
able to both read and write locations in the frame b)72 525.6 Q(uf)-.2 E
(fer)-.25 E(.)-.55 E(All screens must ha)72 537.6 Q .3 -.15(ve a d)-.2 H
(epth of 32 or less \(unless you use an X e).15 E(xtension to allo)-.15
E 2.5(wag)-.25 G(reater depth\).)-2.5 E(All)5 E(screens must \214t into\
 one of the classes listed in the section in this document on V)72 549.6
Q(isuals and Depths.)-.6 E 2.5(Xu)72 565.2 S(ses the pix)-2.5 E
(el as its fundamental unit of distance on the screen.)-.15 E
(Therefore, most programs will measure)5 E -2.15 -.25(ev e)72 577.2 T
(rything in pix).25 E(els.)-.15 E(The sample serv)72 592.8 Q
(er assumes square pix)-.15 E 2.5(els. Serious)-.15 F
(WYSIWYG \(what you see is what you get\) applications)2.5 E
(for publishing and dra)72 604.8 Q(wing programs will adjust for dif)
-.15 E(ferent screen resolutions automatically)-.25 E 5(.C)-.65 G
(onsider)-5 E(-)-.2 E(able w)72 616.8 Q(ork is in)-.1 E -.2(vo)-.4 G(lv)
.2 E(ed in compensating for non-square pix)-.15 E
(els \(a bit in the DDX code for the sample serv)-.15 E(er)-.15 E -.2
(bu)72 628.8 S 2.5(tq).2 G(uite a bit in the client applications\).)-2.5
E F1 2.5(5.2.2. Data)72 664.8 R(Structur)2.5 E(es)-.18 E F0 2.5(Xs)72
680.4 S(upports multiple screens that are connected to the same serv)
-2.5 E(er)-.15 E 5(.T)-.55 G(herefore, all the per)-5 E
(-screen information)-.2 E(is b)72 692.4 Q
(undled into one data structure of attrib)-.2 E
(utes and procedures, which is the ScreenRec \(see)-.2 E(Xserv)72 704.4
Q(er/include/scrnintstr)-.15 E 2.5(.h\). The)-.55 F
(procedure entry points in a ScreenRec operate on re)2.5 E
(gions, colormaps,)-.15 E
(cursors, and fonts, because these resources can dif)72 716.4 Q
(fer in format from one screen to another)-.25 E(.)-.55 E
(Porting Layer De\214nition)72 768 Q 2.5(-1)106.84 G 144.06 2.5(9- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 20 20
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF -.4(Wi)72 84 S(ndo).4 E
(ws are areas on the screen that can be dra)-.25 E
(wn into by graphic routines.)-.15 E("Pixmaps" are of)5 E(f-screen)-.25
E(graphic areas that can be dra)72 96 Q(wn into.)-.15 E(The)5 E 2.5(ya)
-.15 G(re both considered dra)-2.5 E -.1(wa)-.15 G
(bles and are described in the section).1 E(on Dra)72 108 Q -.1(wa)-.15
G 2.5(bles. All).1 F(graphic operations w)2.5 E(ork on dra)-.1 E -.1(wa)
-.15 G(bles, and operations are a).1 E -.25(va)-.2 G(ilable to cop).25 E
2.5(yp)-.1 G(atches)-2.5 E(from one dra)72 120 Q -.1(wa)-.15 G
(ble to another).1 E(.)-.55 E(The pix)72 144 Q(el image data in all dra)
-.15 E -.1(wa)-.15 G(bles is in a format that is pri).1 E -.25(va)-.25 G
(te to DDX.).25 E(In f)5 E(act, each instance of a dra)-.1 E(w-)-.15 E
(able is associated with a gi)72 156 Q -.15(ve)-.25 G 2.5(ns).15 G 2.5
(creen. Presumably)-2.5 F 2.5(,t)-.65 G(he pix)-2.5 E
(el image data for pixmaps is chosen to be con-)-.15 E -.15(ve)72 168 S
(niently understood by the hardw).15 E 2.5(are. All)-.1 F
(screens in a single serv)2.5 E(er must be able to handle all pixmaps)
-.15 E(depths declared in the connection setup information.)72 180 Q
(Pixmap images are transferred to the serv)72 195.6 Q(er in one of tw)
-.15 E 2.5(ow)-.1 G(ays: XYPixmap or ZPimap.)-2.6 E(XYPixmaps are a)5 E
(series of bitmaps, one for each bit plane of the image, using the bitm\
ap padding rules from the connection)72 207.6 Q 2.5(setup. ZPixmaps)72
219.6 R(are a series of bits, nibbles, bytes or w)2.5 E
(ords, one for each pix)-.1 E(el, using the format rules)-.15 E
(\(padding and so on\) for the appropriate depth.)72 231.6 Q
(All screens in a gi)72 247.2 Q -.15(ve)-.25 G 2.5(ns).15 G(erv)-2.5 E
(er must agree on a set of pixmap image formats \(PixmapF)-.15 E
(ormat\) to support)-.15 E(\(depth, number of bits per pix)72 259.2 Q
(el, etc.\).)-.15 E
(There is no color interpretation of bits in the pixmap.)72 274.8 Q
(Pixmaps do not contain pix)5 E(el v)-.15 E 2.5(alues. The)-.25 F
(interpreta-)2.5 E
(tion is made only when the bits are transferred onto the screen.)72
286.8 Q(The screenInfo structure \(in scrnintstr)72 302.4 Q(.h\) is a g\
lobal data structure that has a pointer to an array of Screen-)-.55 E
(Recs, one for each screen on the serv)72 314.4 Q(er)-.15 E 5(.\()-.55 G
(These constitute the one and only description of each screen in the)-5
E(serv)72 326.4 Q(er)-.15 E 2.5(.\) Each)-.55 F
(screen has an identifying inde)2.5 E 2.5(x\()-.15 G(0, 1, 2, ...\).)
-2.5 E(In addition, the screenInfo struct contains global)5 E(serv)72
338.4 Q(er)-.15 E(-wide details, such as the bit- and byte- order in al\
l bit images, and the list of pixmap image formats)-.2 E
(that are supported.)72 350.4 Q(The X protocol insists that these must \
be the same for all screens on the serv)5 E(er)-.15 E(.)-.55 E/F1 10
/Times-Bold@0 SF 2.5(5.2.3. Output)72 386.4 R(Initialization)2.5 E F0
(InitOutput\(pScreenInfo, ar)97 414 Q(gc, ar)-.18 E(gv\))-.18 E
(ScreenInfo *pScreenInfo;)122 426 Q(int ar)122 438 Q(gc;)-.18 E
(char **ar)122 450 Q(gv;)-.18 E
(Upon initialization, your DDX routine InitOutput\(\) is called by DIX.)
72 462 Q(It is passed a pointer to screenInfo to)5 E 2.5(initialize. It)
72 474 R(is also passed the ar)2.5 E(gc and ar)-.18 E
(gv from main\(\) for your serv)-.18 E(er for the command-line ar)-.15 E
(guments.)-.18 E(These ar)72 486 Q(guments may indicate what or ho)-.18
E 2.5(wm)-.25 G(an)-2.5 E 2.5(ys)-.15 G(creen de)-2.5 E
(vice\(s\) to use or in what w)-.25 E(ay to use them.)-.1 E -.15(Fo)5 G
(r).15 E(instance, your serv)72 498 Q(er command line may allo)-.15 E
2.5(wa")-.25 G(-D" \215ag follo)-2.5 E(wed by the name of the screen de)
-.25 E(vice to use.)-.25 E -1.1(Yo)72 522 S(ur InitOutput\(\) routine s\
hould initialize each screen you wish to use by calling AddScreen\(\), \
and then it)1.1 E
(should initialize the pixmap formats that you support by storing v)72
534 Q(alues directly into the screenInfo data)-.25 E 2.5(structure. Y)72
546 R(ou should also set certain implementation-dependent numbers and p\
rocedures in your screen-)-1.1 E(Info, which determines the pixmap and \
scanline padding rules for all screens in the serv)72 558 Q(er)-.15 E(.)
-.55 E(int AddScreen\(scrInitProc, ar)97 582 Q(gc, ar)-.18 E(gv\))-.18 E
(Bool \(*scrInitProc\)\(\);)122 594 Q(int ar)122 606 Q(gc;)-.18 E
(char **ar)122 618 Q(gv;)-.18 E -1.1(Yo)72 630 S 2.5(us)1.1 G(hould cal\
l AddScreen\(\), a DIX procedure, in InitOutput\(\) once for each scree\
n to add it to the screen-)-2.5 E(Info database.)72 642 Q
(The \214rst ar)5 E
(gument is an initialization procedure for the screen that you supply)
-.18 E 5(.T)-.65 G(he second)-5 E(and third are the ar)72 654 Q
(gc and ar)-.18 E(gv from main\(\).)-.18 E
(It returns the screen number of the screen installed, or -1 if)5 E
(there is either insuf)72 666 Q
(\214cient memory to add the screen, or \(*scrInitProc\) returned F)-.25
E(ALSE.)-.74 E(The scrInitProc should be of the follo)72 690 Q
(wing form:)-.25 E(Bool scrInitProc\(iScreen, pScreen, ar)97 714 Q
(gc, ar)-.18 E(gv\))-.18 E(int iScreen;)122 726 Q
(Porting Layer De\214nition)72 768 Q 2.5(-2)106.84 G 144.06 2.5(0- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 21 21
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(ScreenPtr pScreen;)122 84 Q(int ar)122 96 Q(gc;)
-.18 E(char **ar)122 108 Q(gv;)-.18 E(iScreen is the inde)72 120 Q 2.5
(xf)-.15 G(or this screen; 0 for the \214rst one initialized, 1 for the\
 second, etc.)-2.5 E(pScreen is the)5 E(pointer to the screen')72 132 Q
2.5(sn)-.55 G .5 -.25(ew S)-2.5 H 2.5(creenRec. ar).25 F(gc and ar)-.18
E(gv are as before.)-.18 E -1.1(Yo)5 G
(ur screen initialize procedure should)1.1 E(return TR)72 144 Q
(UE upon success or F)-.4 E(ALSE if the screen cannot be initialized \(\
for instance, if the screen hardw)-.74 E(are)-.1 E(does not e)72 156 Q
(xist on this machine\).)-.15 E
(This procedure must determine what actual de)72 180 Q
(vice it is supposed to initialize.)-.25 E(If you ha)5 E .3 -.15(ve a d)
-.2 H(if).15 E(ferent proce-)-.25 E
(dure for each screen, then it is no problem.)72 192 Q(If you ha)5 E .3
-.15(ve t)-.2 H(he same procedure for multiple screens, it may).15 E(ha)
72 204 Q .3 -.15(ve t)-.2 H(rouble \214guring out which screen to initi\
alize each time around, especially if InitOutput\(\) does not ini-).15 E
(tialize all of the screens.)72 216 Q(It is probably easiest to ha)5 E
.3 -.15(ve o)-.2 H(ne procedure for each screen.).15 E(The initializati\
on procedure should \214ll in all the screen procedures for that screen\
 \(windo)72 240 Q(wing functions,)-.25 E(re)72 252 Q
(gion functions, etc.\) and certain screen attrib)-.15 E
(utes for that screen.)-.2 E/F1 10/Times-Bold@0 SF 2.5(5.2.4. Region)72
288 R(Routines in the Scr)2.5 E(eenRec)-.18 E F0 2.5(Ar)72 303.6 S -.15
(eg)-2.5 G
(ion is a dynamically allocated data structure that describes an irre)
.15 E(gularly shaped piece of real estate in)-.15 E(XY pix)72 315.6 Q
(el space.)-.15 E -1.1(Yo)5 G 2.5(uc)1.1 G
(an think of it as a set of pix)-2.5 E
(els on the screen to be operated upon with set operations)-.15 E
(such as AND and OR.)72 327.6 Q 2.5(Ar)72 343.2 S -.15(eg)-2.5 G(ion is\
 frequently implemented as a list of rectangles or bitmaps that enclose\
 the selected pix).15 E(els.)-.15 E(Re)72 355.2 Q
(gion operators control the "clipping polic)-.15 E -.65(y,)-.15 G 2.5
("o).65 G 2.5(rt)-2.5 G(he operations that w)-2.5 E(ork on re)-.1 E 2.5
(gions. \(The)-.15 F(sample serv)2.5 E(er)-.15 E
(uses YX-banded rectangles.)72 367.2 Q(Unless you ha)5 E .3 -.15(ve s)
-.2 H(omething already implemented for your graphics system,).15 E
(you should k)72 379.2 Q(eep that implementation.\))-.1 E
(The procedure pointers to the re)5 E(gion operators are located in the)
-.15 E(ScreenRec data structure.)72 391.2 Q(The de\214nition of a re)5 E
(gion can be found in the \214le Xserv)-.15 E(er/include/re)-.15 E
(gionstr)-.15 E(.h.)-.55 E(The re)72 403.2 Q
(gion code is found in Xserv)-.15 E(er/mi/mire)-.15 E 2.5(gion.c. DDX)
-.15 F(implementations using other re)2.5 E(gion formats will)-.15 E
(need to supply dif)72 415.2 Q(ferent v)-.25 E(ersions of the re)-.15 E
(gion operators.)-.15 E
(Since the list of rectangles is unbounded in size, part of the re)72
439.2 Q(gion data structure is usually a lar)-.15 E(ge, dynami-)-.18 E
(cally allocated chunk of memory)72 451.2 Q 5(.A)-.65 G 2.5(sy)-5 G
(our re)-2.5 E(gion operators calculate logical combinations of re)-.15
E(gions, these)-.15 E(blocks may need to be reallocated by your re)72
463.2 Q(gion softw)-.15 E 2.5(are. F)-.1 F
(or instance, in the sample serv)-.15 E(er)-.15 E 2.5(,aR)-.4 G -.15(eg)
-2.5 G(ionRec).15 E(has some header information and a pointer to a dyna\
mically allocated rectangle list.)72 475.2 Q(Periodically)5 E 2.5(,t)
-.65 G(he rec-)-2.5 E(tangle list needs to be e)72 487.2 Q
(xpanded with Xrealloc\(\), whereupon the ne)-.15 E 2.5(wp)-.25 G
(ointer is remembered in the Re)-2.5 E(gion-)-.15 E(Rec.)72 499.2 Q
(Most of the re)72 523.2 Q(gion operations come in tw)-.15 E 2.5(of)-.1
G(orms: a function pointer in the Screen structure, and a macro.)-2.5 E
(The serv)72 535.2 Q(er can be compiled so that the macros mak)-.15 E
2.5(ed)-.1 G(irect calls to the appropriate functions \(instead of)-2.5
E(indirecting through a screen function pointer\), or it can be compile\
d so that the macros are identical to the)72 547.2 Q
(function pointer forms.)72 559.2 Q(Making direct calls is f)5 E
(aster on man)-.1 E 2.5(ya)-.15 G(rchitectures.)-2.5 E(Re)97 583.2 Q
(gionPtr pScreen->Re)-.15 E(gionCreate\( rect, size\))-.15 E
(BoxPtr rect;)122 595.2 Q(int size;)122 607.2 Q(macro: Re)97 631.2 Q
(gionPtr REGION_CREA)-.15 E(TE\(pScreen, rect, size\))-1.11 E(Re)72
655.2 Q(gionCreate creates a re)-.15 E
(gion that describes ONE rectangle.)-.15 E(The caller can a)5 E -.2(vo)
-.2 G(id unnecessary reallocation).2 E(and cop)72 667.2 Q(ying by decla\
ring the probable maximum number of rectangles that this re)-.1 E
(gion will need to describe)-.15 E 2.5(itself. Y)72 679.2 R(our re)-1.1
E(gion routines, though, cannot f)-.15 E(ail just because the re)-.1 E
(gion gro)-.15 E(ws be)-.25 E(yond this size.)-.15 E(The caller)5 E
(of this routine can pass almost an)72 691.2 Q
(ything as the size; the v)-.15 E
(alue is merely a good guess as to the maximum)-.25 E
(size until it is pro)72 703.2 Q -.15(ve)-.15 G 2.5(nw).15 G
(rong by subsequent use.)-2.5 E -1.1(Yo)5 G(ur re)1.1 E
(gion procedures are then on their o)-.15 E(wn in estimating)-.25 E(ho)
72 715.2 Q 2.5(wb)-.25 G(ig the re)-2.5 E(gion will get.)-.15 E -1.1(Yo)
5 G(ur implementation might ignore size, if applicable.)1.1 E
(Porting Layer De\214nition)72 768 Q 2.5(-2)106.84 G 144.06 2.5(1- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 22 22
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF -.2(vo)97 84 S(id pScreen->Re).2 E
(gionInit \(pRe)-.15 E(gion, rect, size\))-.15 E(Re)122 96 Q 7.09
(gionPtr pRe)-.15 F(gion;)-.15 E 44.16(BoxPtr rect;)122 108 R 36.94
(int size;)122 120 R(macro: REGION_INIT\(pScreen, pRe)97 144 Q
(gion, rect, size\))-.15 E(Gi)72 168 Q -.15(ve)-.25 G 2.5(na).15 G 2.5
(ne)-2.5 G(xisting ra)-2.65 E 2.5(wr)-.15 G -.15(eg)-2.5 G
(ion structure \(such as an local v).15 E
(ariable\), this routine \214lls in the appropriate \214elds)-.25 E
(to mak)72 180 Q 2.5(et)-.1 G(his re)-2.5 E
(gion as usable as one returned from Re)-.15 E 2.5(gionCreate. This)-.15
F -.2(avo)2.5 G(ids the additional dynamic mem-).2 E(ory allocation o)72
192 Q -.15(ve)-.15 G(rhead for the re).15 E(gion structure itself.)-.15
E(Bool pScreen->Re)97 216 Q(gionCop)-.15 E(y\(dstr)-.1 E(gn, srcr)-.18 E
(gn\))-.18 E(Re)122 228 Q(gionPtr dstr)-.15 E(gn, srcr)-.18 E(gn;)-.18 E
(macro: Bool REGION_COPY\(pScreen, dstr)97 252 Q(gn, srcr)-.18 E(gn\))
-.18 E(Re)72 276 Q(gionCop)-.15 E 2.5(yc)-.1 G
(opies the description of one re)-2.5 E(gion, srcr)-.15 E
(gn, to another already-created re)-.18 E(gion, dstr)-.15 E(gn; return-)
-.18 E(ing TR)72 288 Q(UE if the cop)-.4 E 2.5(ys)-.1 G(ucceeded, and F)
-2.5 E(ALSE otherwise.)-.74 E -.2(vo)97 312 S(id pScreen->Re).2 E
(gionDestro)-.15 E(y\( pRe)-.1 E(gion\))-.15 E(Re)122 324 Q(gionPtr pRe)
-.15 E(gion;)-.15 E(macro: REGION_DESTR)97 348 Q -.5(OY)-.4 G
(\(pScreen, pRe).5 E(gion\))-.15 E(Re)72 372 Q(gionDestro)-.15 E 2.5(yd)
-.1 G(estro)-2.5 E(ys a re)-.1 E(gion and frees all allocated memory)
-.15 E(.)-.65 E -.2(vo)97 396 S(id pScreen->Re).2 E(gionUninit \(pRe)
-.15 E(gion\))-.15 E(Re)122 408 Q(gionPtr pRe)-.15 E(gion;)-.15 E
(macro: REGION_UNINIT\(pScreen, pRe)97 432 Q(gion\))-.15 E(Frees e)72
456 Q -.15(ve)-.25 G(rything e).15 E(xcept the re)-.15 E
(gion structure itself, useful when the re)-.15 E(gion w)-.15 E
(as originally passed to Re)-.1 E(gion-)-.15 E(Init instead of recei)72
468 Q -.15(ve)-.25 G 2.5(df).15 G(rom Re)-2.5 E 2.5(gionCreate. When)
-.15 F(this call returns, pRe)2.5 E
(gion must not be reused until it has)-.15 E(been Re)72 480 Q
(gionInit'ed ag)-.15 E(ain.)-.05 E(Bool pScreen->Intersect\(ne)97 504 Q
(wRe)-.25 E(g, re)-.15 E(g1, re)-.15 E(g2\))-.15 E(Re)122 516 Q
(gionPtr ne)-.15 E(wRe)-.25 E(g, re)-.15 E(g1, re)-.15 E(g2;)-.15 E
(macro: Bool REGION_INTERSECT\(pScreen, ne)97 540 Q(wRe)-.25 E(g, re)
-.15 E(g1, re)-.15 E(g2\))-.15 E 2.5(Bool pScreen->Union\(ne)97 564 R
(wRe)-.25 E(g, re)-.15 E(g1, re)-.15 E(g2\))-.15 E(Re)122 576 Q
(gionPtr ne)-.15 E(wRe)-.25 E(g, re)-.15 E(g1, re)-.15 E(g2;)-.15 E
(macro: Bool REGION_UNION\(pScreen, ne)97 600 Q(wRe)-.25 E(g, re)-.15 E
(g1, re)-.15 E(g2\))-.15 E 2.5(Bool pScreen->Subtract\(ne)97 624 R(wRe)
-.25 E(g, re)-.15 E(gMinuend, re)-.15 E(gSubtrahend\))-.15 E(Re)122 636
Q(gionPtr ne)-.15 E(wRe)-.25 E(g, re)-.15 E(gMinuend, re)-.15 E
(gSubtrahend;)-.15 E(macro: Bool REGION_UNION\(pScreen, ne)97 660 Q(wRe)
-.25 E(g, re)-.15 E(gMinuend, re)-.15 E(gSubtrahend\))-.15 E
(Bool pScreen->In)97 684 Q -.15(ve)-.4 G(rse\(ne).15 E(wRe)-.25 E
(g, pRe)-.15 E 2.5(g, pBox\))-.15 F(Re)122 696 Q(gionPtr ne)-.15 E(wRe)
-.25 E(g, pRe)-.15 E(g;)-.15 E(BoxPtr pBox;)122 708 Q
(Porting Layer De\214nition)72 768 Q 2.5(-2)106.84 G 144.06 2.5(2- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 23 23
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(macro: Bool REGION_INVERSE\(pScreen, ne)97 84 Q
(wRe)-.25 E(g, pRe)-.15 E 2.5(g, pBox\))-.15 F(The abo)72 108 Q .3 -.15
(ve f)-.15 H(our calls all do basic logical operations on re).15 E 2.5
(gions. The)-.15 F 2.5(ys)-.15 G(et the ne)-2.5 E 2.5(wr)-.25 G -.15(eg)
-2.5 G(ion \(which already).15 E -.15(ex)72 120 S
(ists\) to describe the logical intersection, union, set dif).15 E
(ference, or in)-.25 E -.15(ve)-.4 G(rse of the re).15 E
(gion\(s\) that were passed)-.15 E 2.5(in. Y)72 132 R
(our routines must be able to handle a situation where the ne)-1.1 E
(wRe)-.25 E 2.5(gi)-.15 G 2.5(st)-2.5 G(he same re)-2.5 E
(gion as one of the)-.15 E(other re)72 144 Q(gion ar)-.15 E(guments.)
-.18 E(The subtract function remo)72 168 Q -.15(ve)-.15 G 2.5(st).15 G
(he Subtrahend from the Minuend and puts the result in ne)-2.5 E(wRe)
-.25 E(g.)-.15 E(The in)72 192 Q -.15(ve)-.4 G
(rse function returns a re).15 E(gion that is the pBox minus the re)-.15
E(gion passed in.)-.15 E(\(A true "in)5 E -.15(ve)-.4 G(rse" w).15 E
(ould)-.1 E(mak)72 204 Q 2.5(ear)-.1 G -.15(eg)-2.5 G(ion that e).15 E
(xtends to in\214nity in all directions b)-.15 E
(ut has holes in the middle.\))-.2 E(It is unde\214ned for situa-)5 E
(tions where the re)72 216 Q(gion e)-.15 E(xtends be)-.15 E
(yond the box.)-.15 E(Each routine must return the v)72 240 Q(alue TR)
-.25 E(UE for success.)-.4 E -.2(vo)97 264 S(id pScreen->Re).2 E
(gionReset\(pRe)-.15 E(gion, pBox\))-.15 E(Re)122 276 Q(gionPtr pRe)-.15
E(gion;)-.15 E(BoxPtr pBox;)122 288 Q(macro: REGION_RESET\(pScreen, pRe)
97 312 Q(gion, pBox\))-.15 E(Re)72 336 Q(gionReset sets the re)-.15 E(g\
ion to describe one rectangle and reallocates it to a size of one recta\
ngle, if applica-)-.15 E(ble.)72 348 Q -.2(vo)97 372 S 2.5
(id pScreen->T).2 F(ranslateRe)-.35 E(gion\(pRe)-.15 E(gion, x, y\))-.15
E(Re)122 384 Q(gionPtr pRe)-.15 E(gion;)-.15 E(int x, y;)122 396 Q
(macro: REGION_TRANSLA)97 420 Q(TE\(pScreen, pRe)-1.11 E(gion, x, y\))
-.15 E -.35(Tr)72 444 S(anslateRe).35 E(gion simply mo)-.15 E -.15(ve)
-.15 G 2.5(sar).15 G -.15(eg)-2.5 G
(ion +x in the x direction and +y in the y direction.).15 E 2.5
(int pScreen->RectIn\(pRe)97 468 R(gion, pBox\))-.15 E(Re)122 480 Q
(gionPtr pRe)-.15 E(gion;)-.15 E(BoxPtr pBox;)122 492 Q
(macro: int RECT_IN_REGION\(pScreen, pRe)97 516 Q(gion, pBox\))-.15 E
(RectIn returns one of the de\214ned constants r)72 540 Q(gnIN, r)-.18 E
(gnOUT)-.18 E 2.5(,o)-.74 G 2.5(rr)-2.5 G(gnP)-2.68 E(AR)-.92 E 1.48
-.74(T, d)-.6 H(epending upon whether the box).74 E
(is entirely inside the re)72 552 Q(gion, entirely outside of the re)
-.15 E(gion, or partly in and partly out of the re)-.15 E 2.5
(gion. These)-.15 F(constants are de\214ned in Xserv)72 564 Q
(er/include/re)-.15 E(gion.h.)-.15 E(Bool pScreen->PointInRe)97 588 Q
(gion\(pRe)-.15 E(gion, x, y)-.15 E 2.5(,p)-.65 G(Box\))-2.5 E(Re)122
600 Q(gionPtr pRe)-.15 E(gion;)-.15 E(int x, y;)122 612 Q(BoxPtr pBox;)
122 624 Q(macro: Bool POINT_IN_REGION\(pScreen, pRe)97 648 Q(gion, x, y)
-.15 E 2.5(,p)-.65 G(Box\))-2.5 E(PointInRe)72 672 Q
(gion returns true if the point x, y is in the re)-.15 E 2.5(gion. In)
-.15 F(addition, it \214lls the rectangle pBox with)2.5 E
(coordinates of a rectangle that is entirely inside of pRe)72 684 Q
(gion and encloses the point.)-.15 E(In the mi implementa-)5 E
(tion, it is the lar)72 696 Q(gest such rectangle.)-.18 E
(\(Due to the sample serv)5 E(er implementation, this comes cheaply)-.15
E(.\))-.65 E(This routine used by DIX when tracking the pointing de)72
720 Q(vice and deciding whether to report mouse e)-.25 E -.15(ve)-.25 G
(nts).15 E(Porting Layer De\214nition)72 768 Q 2.5(-2)106.84 G 144.06
2.5(3- A)-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 24 24
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(or change the cursor)72 84 Q 5(.F)-.55 G
(or instance, DIX needs to change the cursor when it mo)-5.15 E -.15(ve)
-.15 G 2.5(sf).15 G(rom one windo)-2.5 E 2.5(wt)-.25 G(o)-2.5 E(another)
72 96 Q 5(.D)-.55 G(ue to o)-5 E -.15(ve)-.15 G(rlapping windo).15 E
(ws, the shape to check may be irre)-.25 E(gular)-.15 E 5(.A)-.55 G
(PointInRe)-2.5 E(gion\(\) call for)-.15 E -2.15 -.25(ev e)72 108 T
(ry pointing de).25 E(vice mo)-.25 E -.15(ve)-.15 G(ment may be too e)
.15 E(xpensi)-.15 E -.15(ve)-.25 G 5(.T).15 G(he pBox is a kind of w)-5
E(ak)-.1 E(e-up box; DIX need not)-.1 E(call PointInRe)72 120 Q
(gion\(\) ag)-.15 E(ain until the cursor w)-.05 E
(anders outside of the returned box.)-.1 E(Bool pScreen->Re)97 144 Q
(gionNotEmpty\(pRe)-.15 E(gion\))-.15 E(Re)122 156 Q(gionPtr pRe)-.15 E
(gion;)-.15 E(macro: Bool REGION_NO)97 180 Q(TEMPTY\(pScreen, pRe)-.4 E
(gion\))-.15 E(Re)72 204 Q
(gionNotEmpty is a boolean function that returns true or f)-.15 E
(alse depending upon whether the re)-.1 E(gion)-.15 E(encloses an)72 216
Q 2.5(yp)-.15 G(ix)-2.5 E(els.)-.15 E -.2(vo)97 240 S(id pScreen->Re).2
E(gionEmpty\(pRe)-.15 E(gion\))-.15 E(Re)122 252 Q(gionPtr pRe)-.15 E
(gion;)-.15 E(macro: REGION_EMPTY\(pScreen, pRe)97 276 Q(gion\))-.15 E
(Re)72 300 Q(gionEmpty sets the re)-.15 E(gion to be empty)-.15 E(.)-.65
E(BoxPtr pScreen->Re)97 324 Q(gionExtents\(pRe)-.15 E(gion\))-.15 E(Re)
122 336 Q(gionPtr pRe)-.15 E(gion;)-.15 E
(macro: REGION_EXTENTS\(pScreen, pRe)97 360 Q(gion\))-.15 E(Re)72 384 Q
(gionExtents returns a rectangle that is the smallest possible superset\
 of the entire re)-.15 E 2.5(gion. The)-.15 F(caller will)2.5 E
(not modify this rectangle, so it can be the one in your re)72 396 Q
(gion struct.)-.15 E(Bool pScreen->Re)97 420 Q
(gionAppend \(pDstRgn, pRe)-.15 E(gion\))-.15 E(Re)122 432 Q
(gionPtr pDstRgn;)-.15 E(Re)122 444 Q(gionPtr pRe)-.15 E(gion;)-.15 E
(macro: Bool REGION_APPEND\(pScreen, pDstRgn, pRe)97 468 Q(gion\))-.15 E
(Bool pScreen->Re)97 492 Q(gionV)-.15 E(alidate \(pRe)-1.11 E(gion, pOv)
-.15 E(erlap\))-.15 E(Re)122 504 Q(gionPtr pRe)-.15 E(gion;)-.15 E
(Bool *pOv)122 516 Q(erlap;)-.15 E(macro: Bool REGION_V)97 540 Q(ALID)
-1.35 E -1.11(AT)-.4 G(E\(pScreen, pRe)1.11 E(gion, pOv)-.15 E(erlap\))
-.15 E(These functions pro)72 564 Q(vide an optimization for clip list \
generation and must be used in conjunction.)-.15 E(The com-)5 E
(bined ef)72 576 Q(fect is to produce the union of a collection of re)
-.25 E(gions, by using Re)-.15 E(gionAppend se)-.15 E -.15(ve)-.25 G
(ral times, and).15 E(\214nally calling Re)72 588 Q(gionV)-.15 E
(alidate which tak)-1.11 E
(es the intermediate representation \(which needn')-.1 E 2.5(tb)-.18 G
2.5(eav)-2.5 G(alid re)-2.75 E(gion\))-.15 E
(and produces the desired union.)72 600 Q(pOv)5 E(erlap is set to TR)
-.15 E(UE if an)-.4 E 2.5(yo)-.15 G 2.5(ft)-2.5 G(he original re)-2.5 E
(gions o)-.15 E -.15(ve)-.15 G(rlap; F).15 E(ALSE)-.74 E(otherwise.)72
612 Q(Re)97 636 Q(gionPtr pScreen->BitmapT)-.15 E(oRe)-.8 E
(gion \(pPixmap\))-.15 E(PixmapPtr pPixmap;)122 648 Q(macro: Re)97 672 Q
(gionPtr BITMAP_T)-.15 E(O_REGION\(pScreen, pPixmap\))-.18 E(Gi)72 696 Q
-.15(ve)-.25 G 2.5(nad).15 G
(epth-1 pixmap, this routine must create a v)-2.5 E(alid re)-.25 E
(gion which includes all the areas of the pixmap)-.15 E
(\214lled with 1')72 708 Q 2.5(sa)-.55 G(nd e)-2.5 E
(xcludes the areas \214lled with 0')-.15 E 2.5(s. This)-.55 F
(routine returns NULL if out of memory)2.5 E(.)-.65 E
(Porting Layer De\214nition)72 768 Q 2.5(-2)106.84 G 144.06 2.5(4- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 25 25
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Re)97 84 Q(gionPtr pScreen->RectsT)-.15 E(oRe)
-.8 E(gion \(nrects, pRects, ordering\))-.15 E(int nrects;)122 96 Q
(xRectangle *pRects;)122 108 Q(int ordering;)122 120 Q(macro: Re)97 144
Q(gionPtr RECTS_T)-.15 E(O_REGION\(pScreen, nrects, pRects, ordering\))
-.18 E(Gi)72 168 Q -.15(ve)-.25 G 2.5(nac).15 G
(lient-supplied list of rectangles, produces a re)-2.5 E
(gion which includes the union of all the rectangles.)-.15 E
(Ordering may be used as a hint which describes ho)72 180 Q 2.5(wt)-.25
G(he rectangles are sorted.)-2.5 E(As the hint is pro)5 E(vided by a)
-.15 E(client, it must not be required to be correct, b)72 192 Q
(ut the results when it is not correct are not de\214ned \(core dump)-.2
E(is not an option here\).)72 204 Q -.2(vo)97 228 S
(id pScreen->SendGraphicsExpose\(client,pRe).2 E(gion,dra)-.15 E -.1(wa)
-.15 G(ble,major).1 E(,minor\))-.4 E(ClientPtr client;)122 240 Q(Re)122
252 Q(gionPtr pRe)-.15 E(gion;)-.15 E(XID dra)122 264 Q -.1(wa)-.15 G
(ble;).1 E(int major;)122 276 Q(int minor;)122 288 Q
(SendGraphicsExpose dispatches a list of GraphicsExposure e)72 312 Q
-.15(ve)-.25 G(nts which span the re).15 E(gion to the speci\214ed)-.15
E 2.5(client. If)72 324 R(the re)2.5 E(gion is empty)-.15 E 2.5(,o)-.65
G 2.5(raN)-2.5 G(ULL pointer)-2.5 E 2.5(,aN)-.4 G(oExpose e)-2.5 E -.15
(ve)-.25 G(nt is sent instead.).15 E/F1 10/Times-Bold@0 SF 2.5
(5.2.5. Cursor)72 348 R(Routines f)2.5 E(or a Scr)-.25 E(een)-.18 E F0
2.5(Ac)72 363.6 S(ursor is the visual form tied to the pointing de)-2.5
E 2.5(vice. The)-.25 F(def)2.5 E(ault cursor is an "X" shape, b)-.1 E
(ut the cursor)-.2 E(can ha)72 375.6 Q .3 -.15(ve a)-.2 H .3 -.15(ny s)
.15 H 2.5(hape. When).15 F 2.5(ac)2.5 G(lient creates a windo)-2.5 E 1.3
-.65(w, i)-.25 H 2.5(td).65 G
(eclares what shape the cursor will be when it)-2.5 E
(strays into that windo)72 387.6 Q 2.5(wo)-.25 G 2.5(nt)-2.5 G
(he screen.)-2.5 E -.15(Fo)72 411.6 S 2.5(re).15 G(ach possible shape t\
he cursor assumes, there is a CursorRec data structure.)-2.5 E
(This data structure con-)5 E(tains a pointer to a CursorBits data stru\
cture which contains a bitmap for the image of the cursor and a bit-)72
423.6 Q(map for a mask behind the cursor)72 435.6 Q 2.5(,i)-.4 G 2.5(na)
-2.5 G(ddition, the CursorRec data structure contains fore)-2.5 E
(ground and back-)-.15 E(ground colors for the cursor)72 447.6 Q 5(.T)
-.55 G(he CursorBits data structure is shared among multiple CursorRec \
structures)-5 E
(which use the same font and glyph to describe both source and mask.)72
459.6 Q(The cursor image is applied to the)5 E(screen by applying the m\
ask \214rst, clearing 1 bits in its form to the background color)72
471.6 Q 2.5(,a)-.4 G(nd then o)-2.5 E -.15(ve)-.15 G(rwriting).15 E
(on the source image, in the fore)72 483.6 Q(ground color)-.15 E 5(.\()
-.55 G(One bits of the source image that f)-5 E
(all on top of zero bits of)-.1 E(the mask image are unde\214ned.\))72
495.6 Q(This w)5 E(ay)-.1 E 2.5(,ac)-.65 G(ursor can ha)-2.5 E .3 -.15
(ve t)-.2 H(ransparent parts, and opaque parts in tw).15 E 2.5(oc)-.1 G
(ol-)-2.5 E 2.5(ors. X)72 507.6 R(allo)2.5 E(ws an)-.25 E 2.5(yc)-.15 G
(ursor size, b)-2.5 E(ut some hardw)-.2 E(are cursor schemes allo)-.1 E
2.5(wam)-.25 G(aximum of N pix)-2.5 E(els by M pix-)-.15 E 2.5
(els. Therefore,)72 519.6 R(you are allo)2.5 E
(wed to transform the cursor to a smaller size, b)-.25 E
(ut be sure to include the hot-spot.)-.2 E(CursorBits in Xserv)72 543.6
Q(er/include/cursorstr)-.15 E(.h is a de)-.55 E
(vice-independent structure containing a de)-.25 E(vice-independent)-.25
E(representation of the bits for the source and mask.)72 555.6 Q
(\(This is possible because the bitmap representation is)5 E
(the same for all screens.\))72 567.6 Q
(When a cursor is created, it is "realized" for each screen.)72 591.6 Q
(At realization time, each screen has the chance to)5 E(con)72 603.6 Q
-.15(ve)-.4 G
(rt the bits into some other representation that may be more con).15 E
-.15(ve)-.4 G(nient \(for instance, putting the cursor).15 E(into of)72
615.6 Q(f-screen memory\) and set up its de)-.25 E(vice-pri)-.25 E -.25
(va)-.25 G(te area in either the CursorRec data structure or Cursor).25
E(-)-.2 E(Bits data structure as appropriate to possibly point to whate)
72 627.6 Q -.15(ve)-.25 G 2.5(rd).15 G(ata structures are needed.)-2.5 E
(It is more mem-)5 E(ory-conserv)72 639.6 Q(ati)-.25 E .3 -.15(ve t)-.25
H 2.5(os).15 G(hare realizations by using the CursorBits pri)-2.5 E -.25
(va)-.25 G(te \214eld, b).25 E(ut this mak)-.2 E(es the assumption)-.1 E
(that the realization is independent of the colors used \(which is typi\
cally true\).)72 651.6 Q -.15(Fo)5 G 2.5(ri).15 G(nstance, the follo)
-2.5 E(wing)-.25 E(are the de)72 663.6 Q(vice pri)-.25 E -.25(va)-.25 G
(te entries for a particular screen and cursor:).25 E(pCursor)97 687.6 Q
(->de)-.2 E(vPri)-.25 E(v[pScreen->myNum])-.25 E(pCursor)97 699.6 Q
(->bits->de)-.2 E(vPri)-.25 E(v[pScreen->myNum])-.25 E(This is done bec\
ause the change from one cursor shape to another must be f)72 723.6 Q
(ast and responsi)-.1 E -.15(ve)-.25 G 2.5(;t).15 G(he cursor)-2.5 E
(Porting Layer De\214nition)72 768 Q 2.5(-2)106.84 G 144.06 2.5(5- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 26 26
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(image should be able to \215utter as f)72 84 Q
(ast as the user mo)-.1 E -.15(ve)-.15 G 2.5(si).15 G 2.5(ta)-2.5 G
(cross the screen.)-2.5 E -1.1(Yo)72 108 S 2.5(um)1.1 G
(ust implement the follo)-2.5 E(wing routines for your hardw)-.25 E
(are:)-.1 E(Bool pScreen->RealizeCursor\( pScr)97 132 Q 2.5(,p)-.4 G
(Curs\))-2.5 E(ScreenPtr pScr;)122 144 Q(CursorPtr pCurs;)122 156 Q
(Bool pScreen->UnrealizeCursor\( pScr)97 180 Q 2.5(,p)-.4 G(Curs\))-2.5
E(ScreenPtr pScr;)122 192 Q(CursorPtr pCurs;)122 204 Q(RealizeCursor an\
d UnrealizeCursor should realize \(allocate and calculate all data need\
ed\) and unrealize)72 228 Q
(\(free the dynamically allocated data\) a gi)72 240 Q -.15(ve)-.25 G
2.5(nc).15 G(ursor when DIX needs them.)-2.5 E(The)5 E 2.5(ya)-.15 G
(re called whene)-2.5 E -.15(ve)-.25 G 2.5(ra).15 G(de)72 252 Q
(vice-independent cursor is created or destro)-.25 E 2.5(yed. The)-.1 F
(source and mask bits pointed to by \214elds in pCurs)2.5 E
(are unde\214ned for bits be)72 264 Q(yond the right edge of the cursor)
-.15 E 5(.T)-.55 G(his is so because the bits are in Bitmap format,)-5 E
(which may ha)72 276 Q .3 -.15(ve p)-.2 H(ad bits on the right edge.).15
E -1.1(Yo)5 G 2.5(us)1.1 G
(hould inhibit UnrealizeCursor\(\) if the cursor is currently)-2.5 E
(in use; this happens when the system is reset.)72 288 Q
(Bool pScreen->DisplayCursor\( pScr)97 312 Q 2.5(,p)-.4 G(Curs\))-2.5 E
(ScreenPtr pScr;)122 324 Q(CursorPtr pCurs;)122 336 Q
(DisplayCursor should change the cursor on the gi)72 360 Q -.15(ve)-.25
G 2.5(ns).15 G(creen to the one passed in.)-2.5 E
(It is called by DIX when)5 E(the user mo)72 372 Q -.15(ve)-.15 G 2.5
(st).15 G(he pointing de)-2.5 E(vice into a dif)-.25 E(ferent windo)-.25
E 2.5(ww)-.25 G(ith a dif)-2.5 E(ferent cursor)-.25 E 5(.T)-.55 G
(he hotspot in the cur)-5 E(-)-.2 E
(sor should be aligned with the current cursor position.)72 384 Q -.2
(vo)97 408 S(id pScreen->RecolorCursor\( pScr).2 E 2.5(,p)-.4 G
(Curs, displayed\))-2.5 E(ScreenPtr pScr;)122 420 Q(CursorPtr pCurs;)122
432 Q(Bool displayed;)122 444 Q
(RecolorCursor noti\214es DDX that the colors in pCurs ha)72 459.6 Q .3
-.15(ve c)-.2 H(hanged and indicates whether this is the cursor).15 E
(currently being displayed.)72 471.6 Q(If it is, the cursor hardw)5 E
(are state may ha)-.1 E .3 -.15(ve t)-.2 H 2.5(ob).15 G 2.5(eu)-2.5 G
2.5(pdated. Whether)-2.5 F(displayed or)2.5 E
(not, state created at RealizeCursor time may ha)72 483.6 Q .3 -.15
(ve t)-.2 H 2.5(ob).15 G 2.5(eu)-2.5 G 2.5(pdated. A)-2.5 F(generic v)
2.5 E(ersion, miRecolorCursor)-.15 E 2.5(,m)-.4 G(ay)-2.5 E(be used tha\
t does an unrealize, a realize, and possibly a display \(in micursor)72
495.6 Q(.c\); ho)-.55 E(we)-.25 E -.15(ve)-.25 G 2.5(rt).15 G
(his constrains)-2.5 E(UnrealizeCursor and RealizeCursor to al)72 507.6
Q -.1(wa)-.1 G(ys return TR).1 E
(UE as no error indication is returned here.)-.4 E -.2(vo)97 531.6 S
(id pScreen->ConstrainCursor\( pScr).2 E 2.5(,p)-.4 G(Box\))-2.5 E
(ScreenPtr pScr;)122 543.6 Q(BoxPtr pBox;)122 555.6 Q(ConstrainCursor s\
hould cause the cursor to restrict its motion to the rectangle pBox.)72
579.6 Q(DIX code is capable)5 E
(of enforcing this constraint by forcefully mo)72 591.6 Q
(ving the cursor if it strays out of the rectangle, b)-.15 E
(ut Constrain-)-.2 E(Cursor of)72 603.6 Q(fers a w)-.25 E
(ay to send a hint to the dri)-.1 E -.15(ve)-.25 G 2.5(ro).15 G 2.5(rh)
-2.5 G(ardw)-2.5 E(are if such support is a)-.1 E -.25(va)-.2 G 2.5
(ilable. This).25 F(can pre)2.5 E -.15(ve)-.25 G(nt).15 E
(the cursor from w)72 615.6 Q
(andering out of the box, then jumping back, as DIX forces it back.)-.1
E -.2(vo)97 639.6 S(id pScreen->PointerNonInterestBox\( pScr).2 E 2.5
(,p)-.4 G(Box\))-2.5 E(ScreenPtr pScr;)122 651.6 Q(BoxPtr pBox;)122
663.6 Q(PointerNonInterestBox is DIX')72 687.6 Q 2.5(sw)-.55 G
(ay of telling the pointing de)-2.6 E(vice code not to report motion e)
-.25 E -.15(ve)-.25 G(nts while).15 E(the cursor is inside a gi)72 699.6
Q -.15(ve)-.25 G 2.5(nr).15 G(ectangle on the gi)-2.5 E -.15(ve)-.25 G
2.5(ns).15 G 2.5(creen. It)-2.5 F
(is optional and, if not implemented, it should)2.5 E(do nothing.)72
711.6 Q(This routine is called only when the client has declared that i\
t is not interested in motion e)5 E -.15(ve)-.25 G(nts).15 E(in a gi)72
723.6 Q -.15(ve)-.25 G 2.5(nw).15 G(indo)-2.5 E 3.8 -.65(w. T)-.25 H
(he rectangle you get may be a subset of that windo).65 E 3.8 -.65(w. I)
-.25 H 2.5(ts).65 G -2.25 -.2(av e)-2.5 H 2.5(sD).2 G(IX code the time)
-2.5 E(Porting Layer De\214nition)72 768 Q 2.5(-2)106.84 G 144.06 2.5
(6- A)-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 27 27
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF
(required to discard uninteresting mouse motion e)72 84 Q -.15(ve)-.25 G
2.5(nts. This).15 F(is only a hint, which may speed performance.)2.5 E
(Nothing in DIX currently calls PointerNonInterestBox.)72 96 Q -.2(vo)97
120 S(id pScreen->CursorLimits\( pScr).2 E 2.5(,p)-.4 G
(Curs, pHotBox, pT)-2.5 E(opLeftBox\))-.8 E(ScreenPtr pScr;)122 132 Q
(CursorPtr pCurs;)122 144 Q(BoxPtr pHotBox;)122 156 Q(BoxPtr pT)122 168
Q 10.24(opLeftBox; /*)-.8 F(return v)2.5 E(alue */)-.25 E
(CursorLimits should calculate the box that the cursor hot spot is ph)72
195.6 Q(ysically capable of mo)-.05 E(ving within, as a)-.15 E
(function of the screen pScr)72 207.6 Q 2.5(,t)-.4 G(he de)-2.5 E
(vice-independent cursor pCurs, and a box that DIX h)-.25 E
(ypothetically w)-.05 E(ould)-.1 E -.1(wa)72 219.6 S
(nt the hot spot con\214ned within, pHotBox.).1 E
(This routine is for informing DIX only; it alters no state)5 E
(within DDX.)72 231.6 Q(Bool pScreen->SetCursorPosition\( pScr)97 255.6
Q 2.5(,n)-.4 G -.25(ew)-2.5 G(x, ne).25 E(wy)-.25 E 2.5(,g)-.65 G
(enerateEv)-2.5 E(ent\))-.15 E(ScreenPtr pScr;)122 267.6 Q(int ne)122
279.6 Q(wx;)-.25 E(int ne)122 291.6 Q(wy;)-.25 E(Bool generateEv)122
303.6 Q(ent;)-.15 E(SetCursorPosition should arti\214cially mo)72 331.2
Q .3 -.15(ve t)-.15 H(he cursor as though the user had jerk).15 E
(ed the pointing de)-.1 E(vice v)-.25 E(ery)-.15 E(quickly)72 343.2 Q 5
(.T)-.65 G(his is called in response to the W)-5 E
(arpPointer request from the client, and at other times.)-.8 E
(If genera-)5 E(teEv)72 355.2 Q(ent is T)-.15 E(rue, the de)-.35 E
(vice should decide whether or not to call ProcessInputEv)-.25 E
(ents\(\) and then it must call)-.15 E(De)72 367.2 Q(vicePtr)-.25 E 2.5
(->processInputProc. Its)-.2 F(ef)2.5 E
(fects are, of course, limited in v)-.25 E
(alue for absolute pointing de)-.25 E(vices such)-.25 E(as a tablet.)72
379.2 Q -.2(vo)97 403.2 S(id Ne).2 E(wCurrentScreen\(ne)-.25 E
(wScreen, x, y\))-.25 E(ScreenPtr ne)107 415.2 Q(wScreen;)-.25 E
(int x,y;)107 427.2 Q(If your ddx pro)72 454.8 Q
(vides some mechanism for the user to magically mo)-.15 E .3 -.15(ve t)
-.15 H(he pointer between multiple screens,).15 E
(you need to inform DIX when this occurs.)72 466.8 Q -1.1(Yo)5 G 2.5(us)
1.1 G(hould call Ne)-2.5 E(wCurrentScreen to accomplish this, specify-)
-.25 E(ing the ne)72 478.8 Q 2.5(ws)-.25 G(creen and the ne)-2.5 E 2.5
(wxa)-.25 G(nd y coordinates of the pointer on that screen.)-2.5 E/F1 10
/Times-Bold@0 SF 2.5(5.2.6. V)72 514.8 R(isuals, Depths and Pixmap F)
-.37 E(ormats f)-.25 E(or Scr)-.25 E(eens)-.18 E F0
(The "depth" of a image is the number of bits that are used per pix)72
530.4 Q(el to display it.)-.15 E(The "bits per pix)72 554.4 Q
(el" of a pixmap image that is sent o)-.15 E -.15(ve)-.15 G 2.5(rt).15 G
(he client byte stream is a number that is either 4, 8,)-2.5 E
(16, 24 or 32.)72 566.4 Q(It is the number of bits used per pix)5 E
(el in Z format.)-.15 E -.15(Fo)5 G 2.5(ri).15 G
(nstance, a pixmap image that has a)-2.5 E
(depth of six is best sent in Z format as 8 bits per pix)72 578.4 Q(el.)
-.15 E 2.5(A")72 602.4 S(pixmap image format" or a "pixmap format" is a\
 description of the format of a pixmap image as it is)-2.5 E(sent o)72
614.4 Q -.15(ve)-.15 G 2.5(rt).15 G(he byte stream.)-2.5 E -.15(Fo)5 G
2.5(re).15 G(ach depth a)-2.5 E -.25(va)-.2 G(ilable on a serv).25 E(er)
-.15 E 2.5(,t)-.4 G(here is one and only one pixmap format.)-2.5 E
(This pixmap image format gi)72 626.4 Q -.15(ve)-.25 G 2.5(st).15 G
(he bits per pix)-2.5 E(el and the scanline padding unit. \(F)-.15 E
(or instance, are pix)-.15 E(el)-.15 E(ro)72 638.4 Q
(ws padded to bytes, 16-bit w)-.25 E(ords, or 32-bit w)-.1 E(ords?\))-.1
E -.15(Fo)72 662.4 S 2.5(re).15 G
(ach screen, you must decide upon what depth\(s\) it supports.)-2.5 E
-1.1(Yo)5 G 2.5(us)1.1 G(hould only count the number of bits)-2.5 E
(used for the actual image.)72 674.4 Q
(Some displays store additional bits to indicate what windo)5 E 2.5(wt)
-.25 G(his pix)-2.5 E(el is in, ho)-.15 E(w)-.25 E
(close this object is to a vie)72 686.4 Q(wer)-.25 E 2.5(,t)-.4 G
(ransparenc)-2.5 E 1.3 -.65(y, a)-.15 H
(nd other data; do not count these bits.).65 E 2.5(A")72 710.4 S
(display class" tells whether the display is monochrome or color)-2.5 E
2.5(,w)-.4 G(hether there is a lookup table, and)-2.5 E(ho)72 722.4 Q
2.5(wt)-.25 G(he lookup table w)-2.5 E(orks.)-.1 E
(Porting Layer De\214nition)72 768 Q 2.5(-2)106.84 G 144.06 2.5(7- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 28 28
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(A")72 84 S(visual" is a combination of dept\
h, display class, and a description of ho)-2.5 E 2.5(wt)-.25 G(he pix)
-2.5 E(el v)-.15 E(alues result in a)-.25 E(color on the screen.)72 96 Q
(Each visual has a set of masks and of)5 E
(fsets that are used to separate a pix)-.25 E(el v)-.15 E(alue into)-.25
E(its red, green, and blue components and a count of the number of colo\
rmap entries.)72 108 Q(Some of these \214elds)5 E
(are only meaningful when the class dictates so.)72 120 Q
(Each visual also has a screen ID telling which screen it is)5 E
(usable on.)72 132 Q(Note that the depth does not imply the number of m\
ap_entries; for instance, a display can ha)5 E .3 -.15(ve 8)-.2 H
(bits per pix)72 144 Q(el b)-.15 E
(ut only 254 colormap entries for use by applications \(the other tw)-.2
E 2.5(ob)-.1 G(eing reserv)-2.5 E(ed by hard-)-.15 E -.1(wa)72 156 S
(re for the cursor\).).1 E(Each visual is identi\214ed by a 32-bit visu\
al ID which the client uses to choose what visual is desired on a)72 180
Q(gi)72 192 Q -.15(ve)-.25 G 2.5(nw).15 G(indo)-2.5 E 3.8 -.65(w. C)-.25
H(lients can be using more than one visual on the same screen at the sa\
me time.).65 E(The class of a display describes ho)72 207.6 Q 2.5(wt)
-.25 G(his translation tak)-2.5 E(es place.)-.1 E(There are three w)5 E
(ays to do the translation.)-.1 E 21.5<8350>72 223.2 S(seudo - The pix)
-21.5 E(el v)-.15 E(alue, as a whole, is look)-.25 E
(ed up in a table of length map_entries to determine the)-.1 E
(color to display)97 235.2 Q(.)-.65 E 21.5<8354>72 250.8 S
(rue - The pix)-21.85 E(el v)-.15 E(alue is brok)-.25 E
(en up into red, green, and blue \214elds, each of which are look)-.1 E
(ed up in)-.1 E(separate red, green, and blue lookup tables, each of le\
ngth map_entries.)97 262.8 Q 21.5<8347>72 278.4 S(ray - The pix)-21.5 E
(el v)-.15 E(alue is look)-.25 E
(ed up in a table of length map_entries to determine a gray le)-.1 E
-.15(ve)-.25 G 2.5(lt).15 G 2.5(od)-2.5 G(is-)-2.5 E(play)97 290.4 Q(.)
-.65 E(In addition, the lookup table can be static \(resulting colors a\
re \214x)72 306 Q(ed for each pix)-.15 E(el v)-.15 E(alue\) or dynamic)
-.25 E(\(lookup entries are under control of the client program\).)72
318 Q(This leads to a total of six classes:)5 E 21.5<8353>72 345.6 S
(tatic Gray - The pix)-21.5 E(el v)-.15 E(alue \(of ho)-.25 E(we)-.25 E
-.15(ve)-.25 G 2.5(rm).15 G(an)-2.5 E 2.5(yb)-.15 G
(its\) determines directly the le)-2.5 E -.15(ve)-.25 G 2.5(lo).15 G 2.5
(fg)-2.5 G(ray that the)-2.5 E(pix)97 357.6 Q(el assumes.)-.15 E 21.5
<8347>72 373.2 S(ray Scale - The pix)-21.5 E(el v)-.15 E
(alue is fed through a lookup table to arri)-.25 E .3 -.15(ve a)-.25 H
2.5(tt).15 G(he le)-2.5 E -.15(ve)-.25 G 2.5(lo).15 G 2.5(fg)-2.5 G
(ray to display for)-2.5 E(the gi)97 385.2 Q -.15(ve)-.25 G 2.5(np).15 G
(ix)-2.5 E(el.)-.15 E 21.5<8353>72 400.8 S(tatic Color - The pix)-21.5 E
(el v)-.15 E(alue is fed through a \214x)-.25 E
(ed lookup table that yields the color to display for)-.15 E(that pix)97
412.8 Q(el.)-.15 E 21.5<8350>72 428.4 S(seudoColor - The whole pix)-21.5
E(el v)-.15 E
(alue is fed through a programmable lookup table that has one color)-.25
E(\(including red, green, and blue intensities\) for each possible pix)
97 440.4 Q(el v)-.15 E(alue, and that color is displayed.)-.25 E 21.5
<8354>72 456 S(rue Color - Each pix)-21.85 E(el v)-.15 E(alue consists \
of one or more bits that directly determine each primary color)-.25 E
(intensity after being fed through a \214x)97 468 Q(ed table.)-.15 E
21.5<8344>72 483.6 S(irect Color - Each pix)-21.5 E(el v)-.15 E
(alue consists of one or more bits for each primary color)-.25 E 5(.E)
-.55 G(ach primary)-5 E(color v)97 495.6 Q(alue is indi)-.25 E
(vidually look)-.25 E(ed up in a table for that primary color)-.1 E 2.5
(,y)-.4 G(ielding an intensity for that)-2.5 E(primary color)97 507.6 Q
5(.F)-.55 G(or each pix)-5.15 E(el, the red v)-.15 E(alue is look)-.25 E
(ed up in the red table, the green v)-.1 E(alue in the green)-.25 E
(table, and the blue v)97 519.6 Q(alue in the blue table.)-.25 E
(Here are some e)72 535.2 Q(xamples:)-.15 E 2.5(As)97 550.8 S
(imple monochrome 1 bit per pix)-2.5 E(el display is Static Gray)-.15 E
(.)-.65 E 2.5(Ad)97 574.8 S(isplay that has 2 bits per pix)-2.5 E(el fo\
r a choice between the colors of black, white, green and violet is)-.15
E(Static Color)97 586.8 Q(.)-.55 E 2.5(Ad)97 610.8 S
(isplay that has three bits per pix)-2.5 E
(el, where each bit turns on or of)-.15 E 2.5(fo)-.25 G
(ne of the red, green or blue)-2.5 E(guns, is in the T)97 622.8 Q
(rue Color class.)-.35 E(If you tak)97 646.8 Q 2.5(et)-.1 G(he last e)
-2.5 E(xample and scramble the correspondence between pix)-.15 E(el v)
-.15 E(alues and colors it)-.25 E(becomes a Static Color display)97
658.8 Q(.)-.65 E 2.5(Ad)97 682.8 S(isplay has 8 bits per pix)-2.5 E 2.5
(el. The)-.15 F 2.5(8b)2.5 G
(its select one entry out of 256 entries in a lookup table, each)-2.5 E
(entry consisting of 24 bits \(8bits each for red, green, and blue\).)97
694.8 Q(The display can sho)5 E 2.5(wa)-.25 G .3 -.15(ny 2)-2.5 H
(56 of 16).15 E(million colors on the screen at once.)97 706.8 Q
(This is a pseudocolor display)5 E 5(.T)-.65 G
(he client application gets to \214ll)-5 E
(the lookup table in this class of display)97 718.8 Q(.)-.65 E
(Porting Layer De\214nition)72 768 Q 2.5(-2)106.84 G 144.06 2.5(8- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 29 29
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Imagine the same hardw)97 84 Q
(are from the last e)-.1 E 2.5(xample. Y)-.15 F(our serv)-1.1 E
(er softw)-.15 E(are allo)-.1 E(ws the user)-.25 E 2.5(,o)-.4 G 2.5(nt)
-2.5 G(he com-)-2.5 E(mand line that starts up the serv)97 96 Q
(er program, to \214ll the lookup table to his liking once and for all.)
-.15 E(From then on, the serv)97 108 Q(er softw)-.15 E(are w)-.1 E
(ould not change the lookup table until it e)-.1 E 2.5(xits. F)-.15 F
(or instance, the)-.15 E(def)97 120 Q(ault might be a lookup table with\
 a reasonable sample of colors from throughout the color space.)-.1 E(B\
ut the user could specify that the table be \214lled with 256 steps of \
gray scale because he kne)97 132 Q 2.5(wa)-.25 G(head)-2.5 E
(of time he w)97 144 Q(ould be manipulating a lot of black-and-white sc\
anned photographs and not v)-.1 E(ery man)-.15 E(y)-.15 E(color things.)
97 156 Q(Clients w)5 E
(ould be presented with this unchangeable lookup table.)-.1 E
(Although the hard-)5 E -.1(wa)97 168 S
(re quali\214es as a PseudoColor display).1 E 2.5(,t)-.65 G(he f)-2.5 E
(acade presented to the X client is that this is a Static)-.1 E
(Color display)97 180 Q(.)-.65 E -1.1(Yo)97 204 S 2.5(uh)1.1 G -2.25 -.2
(av e)-2.5 H(to decide what kind of display you ha)2.7 E .3 -.15(ve o)
-.2 H 2.5(rw).15 G(ant to pretend you ha)-2.6 E -.15(ve)-.2 G 5(.W).15 G
(hen you initialize)-5 E(the screen\(s\), this class v)97 216 Q
(alue must be set in the V)-.25 E
(isualRec data structure along with other display)-.6 E
(characteristics lik)97 228 Q 2.5(et)-.1 G(he depth and other numbers.)
-2.5 E(The allo)97 252 Q -.1(wa)-.25 G(ble DepthRec').1 E 2.5(sa)-.55 G
(nd V)-2.5 E(isualRec')-.6 E 2.5(sa)-.55 G
(re pointed to by \214elds in the ScreenRec.)-2.5 E(These are set)5 E(u\
p when InitOutput\(\) is called; you should Xalloc\(\) appropriate bloc\
ks or use static v)97 264 Q(ariables initial-)-.25 E
(ized to the correct v)97 276 Q(alues.)-.25 E/F1 10/Times-Bold@0 SF 2.5
(5.2.7. Colormaps)72 312 R -.25(fo)2.5 G 2.5(rS).25 G(cr)-2.5 E(eens)
-.18 E F0 2.5(Ac)72 327.6 S(olormap is a de)-2.5 E
(vice-independent mapping between pix)-.25 E(el v)-.15 E
(alues and colors displayed on the screen.)-.25 E(Dif)72 351.6 Q
(ferent windo)-.25 E(ws on the same screen can ha)-.25 E .3 -.15(ve d)
-.2 H(if).15 E(ferent colormaps at the same time.)-.25 E(At an)5 E 2.5
(yg)-.15 G -2.15 -.25(iv e)-2.5 H 2.5(nt).25 G(ime,)-2.5 E
(the most recently installed colormap\(s\) will be in use in the serv)72
363.6 Q(er so that its \(their\) windo)-.15 E(ws' colors will be)-.25 E
(guaranteed to be correct.)72 375.6 Q(Other windo)5 E(ws may be of)-.25
E(f-color)-.25 E 5(.A)-.55 G
(lthough this may seem to be chaotic, in prac-)-5 E
(tice most clients use the def)72 387.6 Q(ault colormap for the screen.)
-.1 E(The def)72 411.6 Q(ault colormap for a screen is initialized when\
 the screen is initialized.)-.1 E(It al)5 E -.1(wa)-.1 G
(ys remains in e).1 E(xis-)-.15 E(tence and is not o)72 423.6 Q
(wned by an)-.25 E 2.5(yr)-.15 G -.15(eg)-2.5 G(ular client.).15 E
(It is o)5 E(wned by client 0 \(the serv)-.25 E(er itself\).)-.15 E(Man)
5 E 2.5(yc)-.15 G(lients will)-2.5 E(simply use this def)72 435.6 Q
(ault colormap for their dra)-.1 E 2.5(wing. Depending)-.15 F
(upon the class of the screen, the entries in)2.5 E
(this colormap may be modi\214able by client applications.)72 447.6 Q F1
2.5(5.2.7.1. Colormap)72 483.6 R(Routines)2.5 E F0 -1.1(Yo)72 499.2 S
2.5(un)1.1 G(eed to implement the follo)-2.5 E
(wing routines to handle the de)-.25 E
(vice-dependent aspects of color maps.)-.25 E -1.1(Yo)5 G(u)1.1 E(will \
end up placing pointers to these procedures in your ScreenRec data stru\
cture\(s\).)72 511.2 Q(The sample serv)5 E(er)-.15 E
(implementations of man)72 523.2 Q 2.5(yo)-.15 G 2.5(ft)-2.5 G(hese rou\
tines are in both cfbcmap.c and mfbcmap.c; since mfb does not do)-2.5 E
-.15(ve)72 535.2 S(ry much with color).15 E 2.5(,t)-.4 G(he cfb v)-2.5 E
(ersions are typically more useful prototypes.)-.15 E
(Bool pScreen->CreateColormap\(pColormap\))97 559.2 Q
(ColormapPtr pColormap;)122 571.2 Q(This routine is called by the DIX C\
reateColormap routine after it has allocated all the data for the ne)72
598.8 Q 2.5(wc)-.25 G(ol-)-2.5 E
(ormap and just before it returns to the dispatcher)72 610.8 Q 5(.I)-.55
G 2.5(ti)-5 G 2.5(st)-2.5 G(he DDX layer')-2.5 E 2.5(sc)-.55 G
(hance to initialize the colormap,)-2.5 E
(particularly if it is a static map.)72 622.8 Q(See the follo)5 E
(wing section for more details on initializing colormaps.)-.25 E(The)5 E
(routine returns F)72 634.8 Q(ALSE if creation f)-.74 E
(ailed, such as due to memory limitations.)-.1 E
(Notice that the colormap has a)5 E(de)72 646.8 Q(vPri)-.25 E 2.5<768c>
-.25 G(eld from which you can hang an)-2.5 E 2.5(yc)-.15 G
(olormap speci\214c storage you need.)-2.5 E(Since each colormap)5 E(mi\
ght need special information, we attached the \214eld to the colormap a\
nd not the visual.)72 658.8 Q -.2(vo)97 682.8 S(id pScreen->Destro).2 E
(yColormap\(pColormap\))-.1 E(ColormapPtr pColormap;)122 694.8 Q
(Porting Layer De\214nition)72 768 Q 2.5(-2)106.84 G 144.06 2.5(9- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 30 30
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(This routine is called by the DIX FreeColormap \
routine after it has uninstalled the colormap and noti\214ed all)72 84 Q
(interested parties, and before it has freed an)72 96 Q 2.5(yo)-.15 G
2.5(ft)-2.5 G(he colormap storage.)-2.5 E(It is the DDX layer')5 E 2.5
(sc)-.55 G(hance to free)-2.5 E(an)72 108 Q 2.5(yd)-.15 G
(ata it added to the colormap.)-2.5 E -.2(vo)97 132 S
(id pScreen->InstallColormap\(pColormap\)).2 E(ColormapPtr pColormap;)
122 144 Q(InstallColormap should \214ll a lookup table on the screen wi\
th which the colormap is associated with the col-)72 171.6 Q
(ors in pColormap.)72 183.6 Q(If there is only one hardw)5 E
(are lookup table for the screen, then all colors on the screen)-.1 E
(may change simultaneously)72 195.6 Q(.)-.65 E
(In the more general case of multiple hardw)72 219.6 Q
(are lookup tables, this may cause some other colormap to be)-.1 E
(uninstalled, meaning that windo)72 231.6 Q
(ws that subscribed to the colormap that w)-.25 E
(as uninstalled may end up being)-.1 E(of)72 243.6 Q(f-color)-.25 E 5
(.S)-.55 G(ee the note, belo)-5 E 1.3 -.65(w, a)-.25 H
(bout uninstalling maps.).65 E -.2(vo)97 267.6 S
(id pScreen->UninstallColormap\(pColormap\)).2 E(ColormapPtr pColormap;)
122 279.6 Q(UninstallColormap should remo)72 307.2 Q .3 -.15(ve p)-.15 H
(Colormap from screen pColormap->pScreen.).15 E(Some other map, such as)
5 E(the def)72 319.2 Q(ault map if possible, should be installed in pla\
ce of pColormap if applicable.)-.1 E(If pColormap is the)5 E(def)72
331.2 Q(ault map, do nothing.)-.1 E(If an)5 E 2.5(yc)-.15 G
(lient has requested ColormapNotify e)-2.5 E -.15(ve)-.25 G
(nts, the DDX layer must notify the).15 E 2.5(client. \(The)72 343.2 R
(routine W)2.5 E(alkT)-.8 E(ree\(\) is be used to \214nd such windo)-.35
E 2.5(ws. The)-.25 F(DIX routines T)2.5 E(ellNoMap\(\), T)-.7 E(ell-)-.7
E(Ne)72 355.2 Q 2.5(wMap\(\) and)-.25 F -.7(Te)2.5 G
(llGainedMap\(\) are pro).7 E
(vided to be used as the procedure parameter to W)-.15 E(alkT)-.8 E 2.5
(ree. These)-.35 F(procedures are in Xserv)72 367.2 Q
(er/dix/colormap.c.\))-.15 E
(int pScreen->ListInstalledColormaps\(pScreen, pCmapList\))97 391.2 Q
(ScreenPtr pScreen;)122 403.2 Q(XID *pCmapList;)122 415.2 Q(ListInstall\
edColormaps \214lls the pCMapList in with the resource ids of the insta\
lled maps and returns a)72 454.8 Q(count of installed maps.)72 466.8 Q
(pCmapList will point to an array of size MaxInstalledMaps that w)5 E
(as allocated by)-.1 E(the caller)72 478.8 Q(.)-.55 E -.2(vo)97 502.8 S
(id pScreen->StoreColors \(pmap, ndef, pdefs\)).2 E(ColormapPtr pmap;)
122 514.8 Q(int ndef;)122 526.8 Q(xColorItem *pdefs;)122 538.8 Q
(StoreColors changes some of the entries in the colormap pmap.)72 566.4
Q(The number of entries to change are ndef,)5 E
(and pdefs points to the information describing what to change.)72 578.4
Q(Note that partial changes of entries in the)5 E(colormap are allo)72
590.4 Q 2.5(wed. Only)-.25 F(the colors indicated in the \215ags \214el\
d of each xColorItem need to be changed.)2.5 E(Ho)72 602.4 Q(we)-.25 E
-.15(ve)-.25 G .8 -.4(r, a).15 H
(ll three color \214elds will be sent with the proper v).4 E
(alue for the bene\214t of screens that may not be)-.25 E
(able to set part of a colormap v)72 614.4 Q 2.5(alue. If)-.25 F
(the screen is a static class, this routine does nothing.)2.5 E
(The structure)5 E(of colormap entries is nontri)72 626.4 Q(vial; see c\
olormapst.h and the de\214nition of xColorItem in Xproto.h for more)-.25
E(details.)72 638.4 Q -.2(vo)97 662.4 S(id pScreen->Resolv).2 E
(eColor\(pRed, pGreen, pBlue, pV)-.15 E(isual\))-.6 E
(unsigned short *pRed, *pGreen, *pBlue;)122 674.4 Q -.6(Vi)122 686.4 S
(sualPtr pV).6 E(isual;)-.6 E(Porting Layer De\214nition)72 768 Q 2.5
(-3)106.84 G 144.06 2.5(0- A)-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 31 31
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Gi)72 84 Q -.15(ve)-.25 G 2.5(nar).15 G
(equested color)-2.5 E 2.5(,R)-.4 G(esolv)-2.5 E
(eColor returns the nearest color that this hardw)-.15 E
(are is capable of displaying)-.1 E(on this visual.)72 96 Q(In other w)5
E(ords, this rounds of)-.1 E 2.5(fe)-.25 G(ach v)-2.5 E
(alue, in place, to the number of bits per primary color)-.25 E
(that your screen can use.)72 108 Q
(Remember that each screen has one of these routines.)5 E(The le)5 E
-.15(ve)-.25 G 2.5(lo).15 G 2.5(fr)-2.5 G(oundof)-2.5 E(f)-.25 E
(should be what you w)72 120 Q(ould e)-.1 E(xpect from the v)-.15 E
(alue you put in the bits_per_r)-.25 E(gb \214eld of the pV)-.18 E
(isual.)-.6 E(Each v)72 144 Q(alue is an unsigned v)-.25 E
(alue ranging from 0 to 65535.)-.25 E(The bits least lik)5 E
(ely to be used are the lo)-.1 E(west)-.25 E(ones.)72 156 Q -.15(Fo)72
171.6 S 2.5(re).15 G(xample, if you had a pseudocolor display with an)
-2.65 E 2.5(yn)-.15 G(umber of bits per pix)-2.5 E
(el that had a lookup table)-.15 E
(supplying 6 bits for each color gun \(a total of 256K dif)72 183.6 Q
(ferent colors\), you w)-.25 E(ould round of)-.1 E 2.5(fe)-.25 G(ach v)
-2.5 E(alue to 6)-.25 E 2.5(bits. Please)72 195.6 R(don')2.5 E 2.5(ts)
-.18 G(imply truncate these v)-2.5 E
(alues to the upper 6 bits, scale the result so that the maximum)-.25 E
-.25(va)72 207.6 S
(lue seen by the client will be 65535 for each primary).25 E 5(.T)-.65 G
(his mak)-5 E(es color v)-.1 E(alues more portable between)-.25 E(dif)72
219.6 Q(ferent depth displays \(a 6-bit truncated white will not look w\
hite on an 8-bit display\).)-.25 E/F1 10/Times-Bold@0 SF 2.5
(5.2.7.2. Initializing)72 243.6 R 2.5(aC)2.5 G(olormap)-2.5 E F0
(When a client requests a ne)72 259.2 Q 2.5(wc)-.25 G
(olormap and when the serv)-2.5 E(er creates the def)-.15 E
(ault colormap, the procedure)-.1 E
(CreateColormap in the DIX layer is in)72 271.2 Q -.2(vo)-.4 G -.1(ke).2
G 2.5(d. That).1 F(procedure allocates memory for the colormap and)2.5 E
(related storage such as the lists of which client o)72 283.2 Q
(wns which pix)-.25 E 2.5(els. It)-.15 F
(then sets a bit, BeingCreated, in the)2.5 E
(\215ags \214eld of the ColormapRec and calls the DDX layer')72 295.2 Q
2.5(sC)-.55 G(reateColormap routine.)-2.5 E(This is your chance to)5 E
(initialize the colormap.)72 307.2 Q(If the colormap is static, which y\
ou can tell by looking at the class \214eld, you will)5 E -.1(wa)72
319.2 S(nt to \214ll in each color cell to match the hardw).1 E
(ares notion of the color for that pix)-.1 E 2.5(el. If)-.15 F
(the colormap is)2.5 E(the def)72 331.2 Q
(ault for the screen, which you can tell by looking at the IsDef)-.1 E
(ault bit in the \215ags \214eld, you should)-.1 E(allocate BlackPix)72
343.2 Q(el and WhitePix)-.15 E(el to match the v)-.15 E
(alues you set in the pScreen structure.)-.25 E(\(Of course, you)5 E
(pick)72 355.2 Q(ed those v)-.1 E(alues to be)-.25 E(gin with.\))-.15 E
-1.1(Yo)72 370.8 S 2.5(uc)1.1 G(an also w)-2.5 E
(ait and use AllocColor\(\) to allocate blackPix)-.1 E(el and whitePix)
-.15 E(el after the def)-.15 E(ault colormap has)-.1 E(been created.)72
382.8 Q(If the def)5 E(ault colormap is static and you initialized it i\
n pScreen->CreateColormap, then use)-.1 E(can use AllocColor afterw)72
394.8 Q(ards to choose pix)-.1 E(el v)-.15 E(alues with the closest r)
-.25 E(gb v)-.18 E(alues to those desired for black-)-.25 E(Pix)72 406.8
Q(el and whitePix)-.15 E 2.5(el. If)-.15 F(the def)2.5 E
(ault colormap is dynamic and uninitialized, then the r)-.1 E(gb v)-.18
E(alues you request)-.25 E(will be obe)72 418.8 Q
(yed, and AllocColor will ag)-.15 E(ain choose pix)-.05 E(el v)-.15 E
(alues for you.)-.25 E(These pix)5 E(el v)-.15 E(alues can then be)-.25
E(stored into the screen.)72 430.8 Q(There are tw)72 446.4 Q 2.5(ow)-.1
G(ays to \214ll in the colormap.)-2.6 E(The simplest w)5 E
(ay is to use the DIX function AllocColor)-.1 E(.)-.55 E
(int AllocColor \(pmap, pred, pgreen, pblue, pPix, client\))72 470.4 Q
20(ColormapPtr pmap;)82 482.4 R(unsigned short)82 494.4 Q
(*pred, *pgreen, *pblue;)15 E(Pix)82 506.4 Q 35(el *pPix;)-.15 F 40
(int client;)82 518.4 R(This tak)72 542.4 Q
(es three pointers to 16 bit color v)-.1 E
(alues and a pointer to a suggested pix)-.25 E(el v)-.15 E 2.5
(alue. The)-.25 F(pix)2.5 E(el v)-.15 E(alue is)-.25 E(either an inde)72
554.4 Q 2.5(xi)-.15 G(nto one colormap or a combination of three indice\
s depending on the type of pmap.)-2.5 E(If your)5 E
(colormap starts out empty)72 566.4 Q 2.5(,a)-.65 G(nd you don')-2.5 E
2.5(td)-.18 G(eliberately pick the same v)-2.5 E
(alue twice, you will al)-.25 E -.1(wa)-.1 G(ys get your).1 E
(suggested pix)72 578.4 Q 2.5(el. The)-.15 F(truly nerv)2.5 E
(ous could check that the v)-.2 E
(alue returned in *pPix is the one AllocColor w)-.25 E(as)-.1 E
(called with.)72 590.4 Q(If you don')5 E 2.5(tc)-.18 G(are which pix)
-2.5 E(el is used, or w)-.15 E(ould lik)-.1 E 2.5(et)-.1 G
(hem sequentially allocated from entry 0,)-2.5 E(set *pPix to 0.)72
602.4 Q(This will \214nd the \214rst free pix)5 E(el and use that.)-.15
E(AllocColor will tak)72 618 Q 2.5(ec)-.1 G(are of all the)-2.5 E(bookk)
5 E 2.5(eeping and will)-.1 F(call StoreColors to get the colormap r)2.5
E(gb v)-.18 E(alues)-.25 E 2.5(initialized. The)72 630 R(hardw)2.5 E
(are colormap will be changed whene)-.1 E -.15(ve)-.25 G 2.5(rt).15 G
(his colormap is installed.)-2.5 E(If for some reason AllocColor doesn')
72 645.6 Q 2.5(td)-.18 G 2.5(ow)-2.5 G(hat you w)-2.5 E
(ant, you can do your o)-.1 E(wn bookk)-.25 E(eeping and call Store-)-.1
E(Colors yourself.)72 657.6 Q(This is much more dif)5 E
(\214cult and shouldn')-.25 E 2.5(tb)-.18 G 2.5(en)-2.5 G
(ecessary for most de)-2.5 E(vices.)-.25 E F1 2.5(5.2.8. F)72 693.6 R
(onts f)-.25 E(or Scr)-.25 E(eens)-.18 E F0 2.5(Af)72 709.2 S
(ont is a set of bitmaps that depict the symbols in a character set.)
-2.5 E(Each font is for only one typef)5 E(ace in a)-.1 E(gi)72 721.2 Q
-.15(ve)-.25 G 2.5(ns).15 G(ize, in other w)-2.5 E
(ords, just one bitmap for each character)-.1 E 5(.P)-.55 G
(arallel fonts may be a)-5.15 E -.25(va)-.2 G(ilable in a v).25 E
(ariety of)-.25 E(Porting Layer De\214nition)72 768 Q 2.5(-3)106.84 G
144.06 2.5(1- A)-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 32 32
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(sizes and v)72 84 Q
(ariations, including "bold" and "italic.")-.25 E 2.5(Xs)5 G
(upports fonts for 8-bit and 16-bit character codes \(for)-2.5 E
(oriental languages that ha)72 96 Q .3 -.15(ve m)-.2 H
(ore than 256 characters in the font\).).15 E
(Glyphs are bitmaps for indi)5 E(vidual char)-.25 E(-)-.2 E(acters.)72
108 Q
(The source comes with some useful font \214les in an ASCII, plain-te)72
132 Q(xt format that should be comprehensible)-.15 E(on a wide v)72 144
Q(ariety of operating systems.)-.25 E(The te)5 E
(xt format, referred to as BDF)-.15 E 2.5(,i)-.8 G 2.5(sas)-2.5 G
(light e)-2.5 E(xtension of the cur)-.15 E(-)-.2 E
(rent Adobe 2.1 Bitmap Distrib)72 156 Q(ution F)-.2 E
(ormat \(Adobe Systems, Inc.\).)-.15 E 2.5(As)72 180 S
(hort paper in PostScript format is included with the sample serv)-2.5 E
(er that de\214nes BDF)-.15 E 5(.I)-.8 G 2.5(ti)-5 G(ncludes helpful)
-2.5 E(pictures, which is wh)72 192 Q 2.5(yi)-.05 G 2.5(ti)-2.5 G 2.5
(sd)-2.5 G(one in PostScript and is not included in this document.)-2.5
E -1.1(Yo)72 216 S(ur implementation should include some sort of font c\
ompiler to read these \214les and generate binary \214les)1.1 E
(that are directly usable by your serv)72 228 Q(er implementation.)-.15
E(The sample serv)5 E(er comes with the source for a font)-.15 E
(compiler)72 240 Q(.)-.55 E(It is important the font properties contain\
ed in the BDF \214les are preserv)72 264 Q(ed across an)-.15 E 2.5(yf)
-.15 G(ont compilation. In)-2.5 E(particular)72 276 Q 2.5(,c)-.4 G(op)
-2.5 E(yright information cannot be casually tossed aside without le)-.1
E -.05(ga)-.15 G 2.5(lr).05 G(ami\214cations. Other proper)-2.5 E(-)-.2
E(ties will be important to some sophisticated applications.)72 288 Q
(All clients get font information from the serv)72 312 Q(er)-.15 E 5(.T)
-.55 G(herefore, your serv)-5 E(er can support an)-.15 E 2.5(yf)-.15 G
(onts it w)-2.5 E(ants to.)-.1 E(It)5 E
(should probably support at least the fonts supplied with the X11 tape.)
72 324 Q(In principle, you can con)5 E -.15(ve)-.4 G(rt fonts).15 E
(from other sources or dream up your o)72 336 Q
(wn fonts for use on your serv)-.25 E(er)-.15 E(.)-.55 E/F1 10
/Times-Bold@0 SF 2.5(5.2.8.1. P)72 372 R(ortable Compiled F)-.2 E(ormat)
-.25 E F0 2.5(Af)72 387.6 S
(ont compiler is supplied with the sample serv)-2.5 E(er)-.15 E 5(.I)
-.55 G 2.5(th)-5 G(as compile-time switches to con)-2.5 E -.15(ve)-.4 G
(rt the BDF \214les).15 E
(into a portable binary form, called Portable Compiled F)72 399.6 Q
(ormat or PCF)-.15 E 5(.T)-.8 G(his allo)-5 E
(ws for an arbitrary data for)-.25 E(-)-.2 E(mat inside the \214le, and\
 by describing the details of the format in the header of the \214le, a\
n)72 411.6 Q 2.5(yP)-.15 G(CF \214le can be)-2.5 E(read by an)72 423.6 Q
2.5(yP)-.15 G(CF reading client.)-2.5 E
(By selecting the format which matches the required internal format for)
5 E(your renderer)72 435.6 Q 2.5(,t)-.4 G(he PCF reader can a)-2.5 E -.2
(vo)-.2 G(id reformatting the data each time it is read in.).2 E
(The font compiler)5 E(should be quite portable.)72 447.6 Q
(The fonts included with the tape are stored in fonts/bdf.)72 471.6 Q
(The font compiler is found in fonts/tools/bdftopcf.)5 E F1 2.5
(5.2.8.2. F)72 495.6 R(ont Realization)-.25 E F0
(Each screen con\214gured into the serv)72 511.2 Q
(er has an opportunity at font-load time to "realize" a font into some)
-.15 E(internal format if necessary)72 523.2 Q 5(.T)-.65 G
(his happens e)-5 E -.15(ve)-.25 G
(ry time the font is loaded into memory).15 E(.)-.65 E 2.5(Af)72 547.2 S
(ont \(F)-2.5 E(ontRec in Xserv)-.15 E(er/include/dixfontstr)-.15 E
(.h\) is a de)-.55 E(vice-independent structure containing a de)-.25 E
(vice-inde-)-.25 E(pendent representation of the font.)72 559.2 Q
(When a font is created, it is "realized" for each screen.)5 E
(At this point,)5 E(the screen has the chance to con)72 571.2 Q -.15(ve)
-.4 G(rt the font into some other format.).15 E
(The DDX layer can also put informa-)5 E(tion in the de)72 583.2 Q(vPri)
-.25 E -.25(va)-.25 G(te storage.).25 E(Bool pScreen->RealizeF)97 607.2
Q(ont\(pScr)-.15 E 2.5(,p)-.4 G -.15(Fo)-2.5 G(nt\)).15 E
(ScreenPtr pScr;)122 619.2 Q -.15(Fo)122 631.2 S(ntPtr pF).15 E(ont;)
-.15 E(Bool pScreen->UnrealizeF)97 655.2 Q(ont\(pScr)-.15 E 2.5(,p)-.4 G
-.15(Fo)-2.5 G(nt\)).15 E(ScreenPtr pScr;)122 667.2 Q -.15(Fo)122 679.2
S(ntPtr pF).15 E(ont;)-.15 E(RealizeF)72 703.2 Q(ont and UnrealizeF)-.15
E(ont should calculate and allocate these e)-.15 E
(xtra data structures and dispose of them)-.15 E(when no longer needed.)
72 715.2 Q(These are called in response to OpenF)5 E(ont and CloseF)-.15
E(ont requests from the client.)-.15 E(The sample serv)72 727.2 Q
(er implementation is in mfbfont.c \(which does v)-.15 E(ery little\).)
-.15 E(Porting Layer De\214nition)72 768 Q 2.5(-3)106.84 G 144.06 2.5
(2- A)-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 33 33
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF 2.5(5.2.9. Other)72 84 R(Scr)2.5 E(een Routines)
-.18 E/F1 10/Times-Roman@0 SF -1.1(Yo)72 99.6 S 2.5(um)1.1 G
(ust supply se)-2.5 E -.15(ve)-.25 G
(ral other screen-speci\214c routines for your X serv).15 E
(er implementation.)-.15 E(Some of these)5 E
(are described in other sections:)72 111.6 Q 21.5<8347>72 127.2 S
(etImage\(\) is described in the Dra)-21.5 E(wing Primiti)-.15 E -.15
(ve)-.25 G 2.5(ss).15 G(ection.)-2.5 E 21.5<8347>72 142.8 S
(etSpans\(\) is described in the Pixblit routine section.)-21.5 E 21.5
<8353>72 158.4 S -2.15 -.25(ev e)-21.5 H(ral windo).25 E 2.5(wa)-.25 G
(nd pixmap manipulation procedures are described in the W)-2.5 E(indo)
-.4 E 2.5(ws)-.25 G(ection under)-2.5 E(Dra)97 170.4 Q -.1(wa)-.15 G
(bles.).1 E 21.5<8354>72 186 S
(he CreateGC\(\) routine is described under Graphics Conte)-21.5 E(xts.)
-.15 E -.2(vo)97 213.6 S(id pScreen->QueryBestSize\(kind, pW).2 E
(idth, pHeight\))-.4 E(int kind;)122 225.6 Q(unsigned short *pW)122
237.6 Q(idth, *pHeight;)-.4 E(ScreenPtr pScreen;)122 249.6 Q(QueryBestS\
ize\(\) returns the best sizes for cursors, tiles, and stipples in resp\
onse to client requests.)72 273.6 Q(kind is)5 E
(one of the de\214ned constants CursorShape, T)72 285.6 Q
(ileShape, or StippleShape \(de\214ned in X.h\).)-.35 E -.15(Fo)5 G 2.5
(rC).15 G(ursorShape,)-2.5 E
(return the maximum width and height for cursors that you can handle.)72
297.6 Q -.15(Fo)5 G 2.5(rT).15 G(ileShape and StippleShape,)-2.85 E
(start with the suggested v)72 309.6 Q(alues in pW)-.25 E
(idth and pHeight and modify them in place to be optimal v)-.4 E
(alues that)-.25 E(are greater than or equal to the suggested v)72 321.6
Q 2.5(alues. The)-.25 F(sample serv)2.5 E(er implementation is in)-.15 E
(Xserv)72 333.6 Q(er/mfb/mfbmisc.c.)-.15 E(pScreen->SourceV)97 357.6 Q
(alidate\(pDra)-1.11 E -.1(wa)-.15 G(ble, x, y).1 E 2.5(,w)-.65 G
(idth, height\))-2.5 E(Dra)122 369.6 Q -.1(wa)-.15 G(blePtr pDra).1 E
-.1(wa)-.15 G(ble;).1 E(int x, y)122 381.6 Q 2.5(,w)-.65 G
(idth, height;)-2.5 E(SourceV)72 405.6 Q
(alidate should be called by Cop)-1.11 E(yArea/Cop)-.1 E(yPlane primiti)
-.1 E -.15(ve)-.25 G 2.5(sw).15 G(hen the source dra)-2.5 E -.1(wa)-.15
G(ble is not the).1 E(same as the destination, and the SourceV)72 417.6
Q(alidate function pointer in the screen is non-null.)-1.11 E
(If you kno)5 E 2.5(wt)-.25 G(hat)-2.5 E(you will ne)72 429.6 Q -.15(ve)
-.25 G 2.5(rn).15 G(eed SourceV)-2.5 E(alidate, you can a)-1.11 E -.2
(vo)-.2 G(id this check.).2 E(Currently)5 E 2.5(,S)-.65 G(ourceV)-2.5 E
(alidate is used by the mi)-1.11 E(softw)72 441.6 Q
(are cursor code to remo)-.1 E .3 -.15(ve t)-.15 H
(he cursor from the screen when the source rectangle o).15 E -.15(ve)
-.15 G(rlaps the cursor).15 E 2.5(position. x,y)72 453.6 R
(,width,height describe the source rectangle \(source relati)-.65 E -.15
(ve)-.25 G 2.5(,t).15 G(hat is\) for the cop)-2.5 E 2.5(yo)-.1 G
(peration.)-2.5 E(Bool pScreen->Sa)97 477.6 Q -.15(ve)-.2 G
(Screen\(pScreen, on\)).15 E(ScreenPtr pScreen;)122 489.6 Q(int on;)122
501.6 Q(Sa)72 525.6 Q -.15(ve)-.2 G(Screen\(\) is used for Screen Sa).15
E -.15(ve)-.2 G 2.5(rs).15 G(upport \(see W)-2.5 E(aitF)-.8 E 2.5
(orSomething\(\)\). pScreen)-.15 F(is the screen to sa)2.5 E -.15(ve)-.2
G(.).15 E(Bool pScreen->CloseScreen\(pScreen\))97 549.6 Q
(ScreenPtr pScreen;)107 561.6 Q(When the serv)72 585.6 Q
(er is reset, it calls this routine for each screen.)-.15 E
(Bool pScreen->CreateScreenResources\(pScreen\))97 609.6 Q
(ScreenPtr pScreen;)107 621.6 Q(If this routine is not NULL, it will be\
 called once per screen per serv)72 645.6 Q
(er initialization/reset after all modules)-.15 E(ha)72 657.6 Q .3 -.15
(ve h)-.2 H(ad a chance to re).15 E(gister their de)-.15 E(vPri)-.25 E
-.25(va)-.25 G
(tes on all structures that support them \(see the section on de).25 E
(vPri-)-.25 E -.25(va)72 669.6 S(tes belo).25 E 2.5(w\). If)-.25 F
(you need to create an)2.5 E 2.5(yr)-.15 G(esources that ha)-2.5 E .3
-.15(ve d)-.2 H(ynamic de).15 E(vPri)-.25 E -.25(va)-.25 G
(tes as part of your screen ini-).25 E(tialization, you should do so in\
 this function instead of in the screen init function passed to AddScre\
en to)72 681.6 Q(guarantee that the resources ha)72 693.6 Q .3 -.15
(ve a c)-.2 H(omplete set of de).15 E(vPri)-.25 E -.25(va)-.25 G 2.5
(tes. This).25 F(routine returns TR)2.5 E(UE if successful.)-.4 E
(Porting Layer De\214nition)72 768 Q 2.5(-3)106.84 G 144.06 2.5(3- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 34 34
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF 2.5(5.3. Drawables)72 84 R/F1 10/Times-Roman@0 SF
2.5(Ad)72 99.6 S(ra)-2.5 E -.1(wa)-.15 G(ble is a descriptor of a surf)
.1 E(ace that graphics are dra)-.1 E(wn into, either a windo)-.15 E 2.5
(wo)-.25 G 2.5(nt)-2.5 G(he screen or a)-2.5 E(pixmap in memory)72 111.6
Q(.)-.65 E(Each dra)72 135.6 Q -.1(wa)-.15 G(ble has a type, class, Scr\
eenPtr for the screen it is associated with, depth, position, size, and)
.1 E(serial number)72 147.6 Q 5(.T)-.55 G
(he type is one of the de\214ned constants DRA)-5 E -1.2(WA)-.9 G
(BLE_PIXMAP)1.2 E 2.5(,D)-1.11 G(RA)-2.5 E -1.2(WA)-.9 G(BLE_WINDO)1.2 E
(W)-.35 E(and UNDRA)72 159.6 Q -1.2(WA)-.9 G(BLE_WINDO)1.2 E 4.34 -.92
(W. \()-.35 H(An undra).92 E -.1(wa)-.15 G(ble windo).1 E 2.5(wi)-.25 G
2.5(su)-2.5 G(sed for windo)-2.5 E 2.5(wc)-.25 G(lass InputOnly)-2.5 E
2.5(.\) The)-.65 F(serial number is guaranteed to be unique across dra)
72 171.6 Q -.1(wa)-.15 G(bles, and is used in determining the v).1 E
(alidity of the)-.25 E(clipping information in a GC.)72 183.6 Q
(The screen selects the set of procedures used to manipulate and dra)5 E
2.5(wi)-.15 G(nto the)-2.5 E(dra)72 195.6 Q -.1(wa)-.15 G 2.5
(ble. Position).1 F(is used \(currently\) only by windo)2.5 E
(ws; pixmaps must set these \214elds to 0,0 as this reduces)-.25 E
(the amount of conditional code e)72 207.6 Q -.15(xe)-.15 G
(cuted throughout the mi code.).15 E
(Size indicates the actual client-speci\214ed)5 E(size of the dra)72
219.6 Q -.1(wa)-.15 G 2.5(ble. There).1 F(are, in f)2.5 E
(act, no other \214elds that a windo)-.1 E 2.5(wd)-.25 G(ra)-2.5 E -.1
(wa)-.15 G(ble and pixmap dra).1 E -.1(wa)-.15 G(ble ha).1 E -.15(ve)-.2
G(in common besides those mentioned here.)72 231.6 Q
(Both PixmapRecs and W)72 255.6 Q(indo)-.4 E
(wRecs are structs that start with a dra)-.25 E -.1(wa)-.15 G
(ble and continue on with more \214elds.).1 E(Pixmaps ha)72 267.6 Q .3
-.15(ve d)-.2 H -.25(ev).15 G(Pri).25 E -.25(va)-.25 G
(te pointers which usually point to the pixmap data b).25 E
(ut could concei)-.2 E -.25(va)-.25 G(bly be used for).25 E(an)72 279.6
Q(ything that DDX w)-.15 E 2.5(ants. Both)-.1 F(windo)2.5 E
(ws and pixmaps ha)-.25 E .3 -.15(ve a)-.2 H 2.5(na).15 G(rray of de)
-2.5 E(vPri)-.25 E -.25(va)-.25 G(tes unions, one entry of).25 E
(which will probably be used for DDX speci\214c data.)72 291.6 Q
(Entries in this array are allocated using Allocate{W)5 E(in-)-.4 E(do)
72 303.6 Q(w|Pixmap}Pri)-.25 E -.25(va)-.25 G(teInde).25 E
(x\(\) \(see Wrappers and de)-.15 E(vPri)-.25 E -.25(va)-.25 G(tes belo)
.25 E 2.5(w\). This)-.25 F(is done because dif)2.5 E(ferent graphics)
-.25 E(hardw)72 315.6 Q(are has dif)-.1 E
(ferent requirements for management; if the graphics is al)-.25 E -.1
(wa)-.1 G(ys handled by a processor with).1 E
(an independent address space, there is no point ha)72 327.6 Q
(ving a pointer to the bit image itself.)-.2 E
(The de\214nition of a dra)72 351.6 Q -.1(wa)-.15 G
(ble and a pixmap can be found in the \214le Xserv).1 E
(er/include/pixmapstr)-.15 E 2.5(.h. The)-.55 F(de\214ni-)2.5 E
(tion of a windo)72 363.6 Q 2.5(wc)-.25 G
(an be found in the \214le Xserv)-2.5 E(er/include/windo)-.15 E(wstr)
-.25 E(.h.)-.55 E F0 2.5(5.3.1. Pixmaps)72 399.6 R F1 2.5(Ap)72 415.2 S
(ixmap is a three-dimensional array of bits stored some)-2.5 E(where of)
-.25 E(fscreen, rather than in the visible portion)-.25 E
(of the screen')72 427.2 Q 2.5(sd)-.55 G(isplay frame b)-2.5 E(uf)-.2 E
(fer)-.25 E 5(.I)-.55 G 2.5(tc)-5 G
(an be used as a source or destination in graphics operations.)-2.5 E
(There)5 E(is no implied interpretation of the pix)72 439.2 Q(el v)-.15
E(alues in a pixmap, because it has no associated visual or colormap.)
-.25 E(There is only a depth that indicates the number of signi\214cant\
 bits per pix)72 451.2 Q 2.5(el. Also,)-.15 F(there is no implied ph)2.5
E(ysi-)-.05 E(cal size for each pix)72 463.2 Q
(el; all graphic units are in numbers of pix)-.15 E 2.5(els. Therefore,)
-.15 F 2.5(ap)2.5 G(ixmap alone does not con-)-2.5 E(stitute a complete\
 image; it represents only a rectangular array of pix)72 475.2 Q(el v)
-.15 E(alues.)-.25 E
(Note that the pixmap data structure is reference-counted.)72 499.2 Q
(The serv)72 523.2 Q
(er implementation is free to put the pixmap data an)-.15 E
(ywhere it sees \214t, according to its graphics)-.15 E(hardw)72 535.2 Q
(are setup.)-.1 E(Man)5 E 2.5(yi)-.15 G(mplementations will simply ha)
-2.5 E .3 -.15(ve t)-.2 H(he data dynamically allocated in the serv).15
E(er')-.15 E(s)-.55 E(address space.)72 547.2 Q(More sophisticated impl\
ementations may put the data in undisplayed frameb)5 E(uf)-.2 E
(fer storage.)-.25 E(In addition to dynamic de)72 571.2 Q(vPri)-.25 E
-.25(va)-.25 G(tes \(see the section on de).25 E(vPri)-.25 E -.25(va)
-.25 G(tes belo).25 E(w\), the pixmap data structure has)-.25 E(tw)72
583.2 Q 2.5<6f8c>-.1 G(elds that are pri)-2.5 E -.25(va)-.25 G
(te to the de).25 E 2.5(vice. Although)-.25 F(you can use them for an)
2.5 E(ything you w)-.15 E(ant, the)-.1 E 2.5(yh)-.15 G -2.25 -.2(av e)
-2.5 H(intended purposes.)72 595.2 Q(de)5 E
(vKind is intended to be a de)-.25 E
(vice speci\214c indication of the pixmap location \(host)-.25 E(memory)
72 607.2 Q 2.5(,o)-.65 G -.25(ff)-2.5 G(-screen, etc.\).).25 E
(In the sample serv)5 E(er)-.15 E 2.5(,s)-.4 G
(ince all pixmaps are in memory)-2.5 E 2.5(,d)-.65 G -.25(ev)-2.5 G
(Kind stores the width).25 E(of the pixmap in bitmap scanline units.)72
619.2 Q(de)5 E(vPri)-.25 E -.25(va)-.25 G
(te is probably a pointer to the bits in the pixmap.).25 E 2.5(Ab)72
643.2 S(itmap is a pixmap that is one bit deep.)-2.5 E
(PixmapPtr pScreen->CreatePixmap\(pScreen, width, height, depth\))97
667.2 Q(ScreenPtr pScreen;)122 679.2 Q(int width, height, depth;)122
691.2 Q
(This ScreenRec procedure must create a pixmap of the size requested.)72
715.2 Q(It must allocate a PixmapRec and)5 E
(\214ll in all of the \214elds.)72 727.2 Q
(The reference count \214eld must be set to 1.)5 E
(If width or height are zero, no space)5 E(Porting Layer De\214nition)72
768 Q 2.5(-3)106.84 G 144.06 2.5(4- A)-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 35 35
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(should be allocated for the pixmap data, and if\
 the implementation is using the de)72 84 Q(vPri)-.25 E -.25(va)-.25 G
(te \214eld as a pointer).25 E
(to the pixmap data, it should be set to NULL.)72 96 Q
(If successful, it returns a pointer to the ne)5 E 2.5(wp)-.25 G
(ixmap; if not, it)-2.5 E(returns NULL.)72 108 Q(See Xserv)5 E
(er/mfb/mfbpixmap.c for the sample serv)-.15 E(er implementation.)-.15 E
(Bool pScreen->Destro)97 132 Q(yPixmap\(pPixmap\))-.1 E
(PixmapPtr pPixmap;)122 144 Q(This ScreenRec procedure must "destro)72
168 Q(y" a pixmap.)-.1 E
(It should decrement the reference count and, if zero, it)5 E
(must deallocate the PixmapRec and all attached de)72 180 Q(vPri)-.25 E
-.25(va)-.25 G(te blocks.).25 E(If successful, it returns TR)5 E 2.5
(UE. See)-.4 F(Xserv)72 192 Q(er/mfb/mfbpixmap.c for the sample serv)
-.15 E(er implementation.)-.15 E(Bool)97 216 Q
(pScreen->ModifyPixmapHeader\(pPixmap, width, height, depth, bitsPerPix)
97 228 Q(el, de)-.15 E(vKind, pPixData\))-.25 E 5(PixmapPtr pPixmap;)122
240 R 21.94(int width;)122 252 R 21.94(int height;)122 264 R 21.94
(int depth;)122 276 R 21.94(int bitsPerPix)122 288 R(el;)-.15 E 21.94
(int de)122 300 R(vKind;)-.25 E 10(pointer pPixData;)122 312 R
(This routine tak)72 336 Q
(es a pixmap header \(the PixmapRec plus all the dynamic de)-.1 E(vPri)
-.25 E -.25(va)-.25 G(tes\) and initializes the).25 E
(\214elds of the PixmapRec to the parameters of the same name.)72 348 Q
(pPixmap must ha)5 E .3 -.15(ve b)-.2 H(een created via).15 E
(pScreen->CreatePixmap with a zero width or height to a)72 360 Q -.2(vo)
-.2 G(id allocating space for the pixmap data.).2 E(pPix-)5 E(Data is a\
ssumed to be the pixmap data; it will be stored in an implementation-de\
pendent place \(usually)72 372 Q(pPixmap->de)72 384 Q(vPri)-.25 E -.25
(va)-.25 G 2.5(te.ptr\). This).25 F(routine returns TR)2.5 E
(UE if successful.)-.4 E(See Xserv)5 E(er/mi/miscrinit.c for the)-.15 E
(sample serv)72 396 Q(er implementation.)-.15 E(PixmapPtr)97 420 Q
(GetScratchPixmapHeader\(pScreen, width, height, depth, bitsPerPix)97
432 Q(el, de)-.15 E(vKind, pPixData\))-.25 E 5(ScreenPtr pScreen;)122
444 R 21.94(int width;)122 456 R 21.94(int height;)122 468 R 21.94
(int depth;)122 480 R 21.94(int bitsPerPix)122 492 R(el;)-.15 E 21.94
(int de)122 504 R(vKind;)-.25 E 10(pointer pPixData;)122 516 R -.2(vo)97
540 S(id FreeScratchPixmapHeader\(pPixmap\)).2 E(PixmapPtr pPixmap;)122
552 Q(DDX should use these tw)72 576 Q 2.5(oD)-.1 G
(IX routines when it has a b)-2.5 E(uf)-.2 E(fer of ra)-.25 E 2.5(wi)
-.15 G(mage data that it w)-2.5 E(ants to manipulate)-.1 E
(as a pixmap temporarily)72 588 Q 2.5(,u)-.65 G
(sually so that some other part of the serv)-2.5 E(er can be le)-.15 E
-.15(ve)-.25 G(raged to perform some).15 E(operation on the data.)72 600
Q(The data should be passed in pPixData, and will be stored in an imple\
mentation-)5 E(dependent place \(usually pPixmap->de)72 612 Q(vPri)-.25
E -.25(va)-.25 G
(te.ptr\). The other \214elds go into the corresponding PixmapRec).25 E
2.5(\214elds. If)72 624 R
(successful, GetScratchPixmapHeader returns a v)2.5 E
(alid PixmapPtr which can be used an)-.25 E(ywhere the)-.15 E(serv)72
636 Q(er e)-.15 E(xpects a pixmap, else it returns NULL.)-.15 E
(The pixmap should be released when no longer needed)5 E(\(usually with\
in the same function that allocated it\) with FreeScratchPixmapHeader)72
648 Q(.)-.55 E/F1 10/Times-Bold@0 SF 2.5(5.3.2. W)72 672 R(indo)-.18 E
(ws)-.1 E F0 2.5(Aw)72 687.6 S(indo)-2.5 E 2.5(wi)-.25 G 2.5(sav)-2.5 G
(isible, or potentially visible, rectangle on the screen.)-2.5 E
(DIX windo)5 E(wing functions maintain)-.25 E(an internal n-ary tree da\
ta structure, which represents the current relationships of the mapped \
windo)72 699.6 Q(ws.)-.25 E -.4(Wi)72 711.6 S(ndo).4 E
(ws that are contained in another windo)-.25 E 2.5(wa)-.25 G
(re children of that windo)-2.5 E 2.5(wa)-.25 G
(nd are clipped to the bound-)-2.5 E(aries of the parent.)72 723.6 Q
(The root windo)5 E 2.5(wi)-.25 G 2.5(nt)-2.5 G(he tree is the windo)
-2.5 E 2.5(wf)-.25 G(or the entire screen.)-2.5 E(Sibling windo)5 E(ws)
-.25 E(Porting Layer De\214nition)72 768 Q 2.5(-3)106.84 G 144.06 2.5
(5- A)-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 36 36
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(constitute a doubly-link)72 84 Q
(ed list; the parent windo)-.1 E 2.5(wh)-.25 G
(as a pointer to the head and tail of this list.)-2.5 E(Each child)5 E
(also has a pointer to its parent.)72 96 Q(The border of a windo)72 120
Q 2.5(wi)-.25 G 2.5(sd)-2.5 G(ra)-2.5 E
(wn by a DDX procedure when DIX requests that it be dra)-.15 E 2.5
(wn. The)-.15 F(contents)2.5 E(of the windo)72 132 Q 2.5(wi)-.25 G 2.5
(sd)-2.5 G(ra)-2.5 E(wn by the client through requests to the serv)-.15
E(er)-.15 E(.)-.55 E -.4(Wi)72 156 S(ndo).4 E 2.5(wp)-.25 G
(ainting is orchestrated through an e)-2.5 E(xpose e)-.15 E -.15(ve)-.25
G(nt system.).15 E(When a re)5 E(gion is e)-.15 E(xposed, DIX gener)-.15
E(-)-.2 E(ates an e)72 168 Q(xpose e)-.15 E -.15(ve)-.25 G
(nt, telling the client to repaint the windo).15 E 2.5(wa)-.25 G
(nd passing the re)-2.5 E(gion that is the minimal area)-.15 E
(needed to be repainted.)72 180 Q(As a f)72 204 Q -.2(avo)-.1 G 2.5(rt)
.2 G 2.5(oc)-2.5 G(lients, the serv)-2.5 E
(er may retain the output to the hidden parts of windo)-.15 E(ws in of)
-.25 E(f-screen memory;)-.25 E(this is called "backing store".)72 216 Q
(When a part of such a windo)5 E 2.5(wb)-.25 G(ecomes e)-2.5 E
(xposed, it can quickly mo)-.15 E .3 -.15(ve p)-.15 H(ix).15 E(els)-.15
E(into place instead of triggering an e)72 228 Q(xpose e)-.15 E -.15(ve)
-.25 G(nt and w).15 E(aiting for a client on the other end of the netw)
-.1 E(ork to)-.1 E 2.5(respond. Ev)72 240 R(en if the netw)-.15 E(ork r\
esponse is insigni\214cant, the time to intelligently paint a section o\
f a windo)-.1 E(w)-.25 E(is usually more than the time to just cop)72
252 Q 2.5(ya)-.1 G(lready-painted sections.)-2.5 E
(At best, the repainting in)5 E -.2(vo)-.4 G(lv).2 E(es blank-)-.15 E
(ing out the area to a background color)72 264 Q 2.5(,w)-.4 G
(hich will tak)-2.5 E 2.5(ea)-.1 G(bout the same amount of time.)-2.5 E
(In this w)5 E(ay)-.1 E 2.5(,b)-.65 G(ack-)-2.5 E
(ing store can dramatically increase the performance of windo)72 276 Q
2.5(wm)-.25 G -.15(ove)-2.5 G(s.).15 E
(On the other hand, backing store can be quite comple)72 300 Q
(x, because all graphics dra)-.15 E(wn to hidden areas must be)-.15 E
(intercepted and redirected to the of)72 312 Q(f-screen windo)-.25 E 2.5
(ws)-.25 G 2.5(ections. Not)-2.5 F(only can this be complicated for the)
2.5 E(serv)72 324 Q(er programmer)-.15 E 2.5(,b)-.4 G
(ut it can also impact windo)-2.7 E 2.5(wp)-.25 G(ainting performance.)
-2.5 E(The backing store implementa-)5 E(tion can choose, at an)72 336 Q
2.5(yt)-.15 G(ime, to for)-2.5 E
(get pieces of backing that are written into, relying instead upon e)
-.18 E(xpose)-.15 E -2.15 -.25(ev e)72 348 T
(nts to repaint for simplicity).25 E(.)-.65 E(In X, the decision to use\
 the backing-store scheme is made by you, the serv)72 372 Q
(er implementor)-.15 E 5(.X)-.55 G(pro)-2.5 E(vides)-.15 E(hooks for im\
plementing backing store, therefore the decision to use this strate)72
384 Q(gy can be made on the \215y)-.15 E(.)-.65 E -.15(Fo)72 396 S 2.5
(re).15 G(xample, you may use backing store only for certain windo)-2.65
E(ws that the user requests or you may use)-.25 E(backing store until m\
emory runs out, at which time you start dropping pieces of backing as n\
eeded to mak)72 408 Q(e)-.1 E(more room.)72 420 Q(When a windo)72 444 Q
2.5(wo)-.25 G(peration is requested by the client, such as a windo)-2.5
E 2.5(wb)-.25 G(eing created or mo)-2.5 E -.15(ve)-.15 G(d, a ne).15 E
2.5(ws)-.25 G(tate)-2.5 E(is computed.)72 456 Q
(During this transition, DIX informs DDX what rectangles in what windo)5
E(ws are about to)-.25 E
(become obscured and what rectangles in what windo)72 468 Q(ws ha)-.25 E
.3 -.15(ve b)-.2 H(ecome e).15 E 2.5(xposed. This)-.15 F(pro)2.5 E
(vides a hook for)-.15 E(the implementation of backing store.)72 480 Q
(If DDX is unable to restore e)5 E(xposed re)-.15 E
(gions, DIX generates e)-.15 E(xpose)-.15 E -2.15 -.25(ev e)72 492 T
(nts to the client.).25 E(It is then the client')5 E 2.5(sr)-.55 G
(esponsibility to paint the windo)-2.5 E 2.5(wp)-.25 G(arts that were e)
-2.5 E(xposed b)-.15 E(ut not)-.2 E(restored.)72 504 Q(If a windo)72 528
Q 2.5(wi)-.25 G 2.5(sr)-2.5 G(esized, pix)-2.5 E
(els sometimes need to be mo)-.15 E -.15(ve)-.15 G
(d, depending upon the application.).15 E(The client can)5 E
(request "Gra)72 540 Q(vity" so that certain blocks of the windo)-.2 E
2.5(wa)-.25 G(re mo)-2.5 E -.15(ve)-.15 G 2.5(da).15 G 2.5(sar)-2.5 G
(esult of a resize.)-2.5 E -.15(Fo)5 G 2.5(ri).15 G(nstance, if the)-2.5
E(windo)72 552 Q 2.5(wh)-.25 G(as controls or other items that al)-2.5 E
-.1(wa)-.1 G(ys hang on the edge of the windo).1 E 1.3 -.65(w, a)-.25 H
(nd that edge is mo).65 E -.15(ve)-.15 G 2.5(da).15 G(s)-2.5 E 2.5(ar)72
564 S(esult of the resize, then those pix)-2.5 E(els should be mo)-.15 E
-.15(ve)-.15 G 2.5(dt).15 G 2.5(oa)-2.5 G -.2(vo)-2.7 G(id ha).2 E
(ving the client repaint it.)-.2 E(If the client)5 E
(needs to repaint it an)72 576 Q(yw)-.15 E(ay)-.1 E 2.5(,s)-.65 G
(uch an operation tak)-2.5 E(es time, so it is desirable for the serv)
-.1 E(er to approximate the)-.15 E(appearance of the windo)72 588 Q 2.5
(wa)-.25 G 2.5(sb)-2.5 G(est it can while w)-2.5 E
(aiting for the client to do it perfectly)-.1 E 5(.G)-.65 G(ra)-5 E
(vity is used for)-.2 E(that, also.)72 600 Q(The windo)72 624 Q 2.5(wh)
-.25 G(as se)-2.5 E -.15(ve)-.25 G(ral \214elds used in dra).15 E
(wing operations:)-.15 E 21.5<8363>72 639.6 S(lipList - This re)-21.5 E
(gion, in conjunction with the client clip re)-.15 E
(gion in the gc, is used to clip output.)-.15 E(cli-)5 E
(pList has the windo)97 651.6 Q(w')-.25 E 2.5(sc)-.55 G
(hildren subtracted from it, in addition to pieces of sibling windo)-2.5
E(ws that o)-.25 E -.15(ve)-.15 G -.2(r-).15 G(lap this windo)97 663.6 Q
3.8 -.65(w. T)-.25 H 2.5(og)-.15 G
(et the list with the children included \(subwindo)-2.5 E
(w-mode is IncludeInferiors\), the)-.25 E
(routine NotClippedByChildren\(pW)97 675.6 Q
(in\) returns the unclipped re)-.4 E(gion.)-.15 E 21.5<8362>72 691.2 S
(orderClip is the re)-21.5 E(gion used by Cop)-.15 E(yW)-.1 E(indo)-.4 E
2.5(wa)-.25 G(nd includes the area of the windo)-2.5 E 1.3 -.65(w, i)
-.25 H(ts children, and).65 E(the border)97 703.2 Q 2.5(,b)-.4 G
(ut with the o)-2.7 E -.15(ve)-.15 G
(rlapping areas of sibling children remo).15 E -.15(ve)-.15 G(d.).15 E
(Most of the other \214elds are for DIX use only)72 718.8 Q(.)-.65 E
(Porting Layer De\214nition)72 768 Q 2.5(-3)106.84 G 144.06 2.5(6- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 37 37
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF 2.5(5.3.2.1. W)72 84 R(indo)-.18 E 2.5(wP)-.1 G
-.18(ro)-2.5 G(cedur).18 E(es in the Scr)-.18 E(eenRec)-.18 E/F1 10
/Times-Roman@0 SF -1.1(Yo)72 99.6 S 2.5(us)1.1 G
(hould implement all of the follo)-2.5 E
(wing procedures and store pointers to them in the screen record.)-.25 E
(The de)72 123.6 Q(vice-independent portion of the serv)-.25 E(er "o)
-.15 E(wns" the windo)-.25 E 2.5(wt)-.25 G 2.5(ree. Ho)-2.5 F(we)-.25 E
-.15(ve)-.25 G .8 -.4(r, c).15 H(le).4 E -.15(ve)-.25 G 2.5(rh).15 G
(ardw)-2.5 E(are might)-.1 E -.1(wa)72 135.6 S(nt to kno).1 E 2.5(wt)
-.25 G(he relationship of mapped windo)-2.5 E 2.5(ws. There)-.25 F
(are pointers to procedures in the ScreenRec data)2.5 E
(structure that are called to gi)72 147.6 Q .3 -.15(ve t)-.25 H
(he hardw).15 E(are a chance to update its internal state.)-.1 E
(These are helpers and)5 E(hints to DDX only; the)72 159.6 Q 2.5(yd)-.15
G 2.5(on)-2.5 G(ot change the windo)-2.5 E 2.5(wt)-.25 G
(ree, which is only changed by DIX.)-2.5 E(Bool pScreen->CreateW)97
183.6 Q(indo)-.4 E(w\(pW)-.25 E(in\))-.4 E -.4(Wi)122 195.6 S(ndo).4 E
(wPtr pW)-.25 E(in;)-.4 E
(This routine is a hook for when DIX creates a windo)72 219.6 Q 3.8 -.65
(w. I)-.25 H 2.5(ts).65 G(hould \214ll in the "W)-2.5 E(indo)-.4 E 2.5
(wP)-.25 G(rocedures in the)-2.5 E -.4(Wi)72 231.6 S(ndo).4 E
(wRec" belo)-.25 E 2.5(wa)-.25 G(nd also allocate the de)-2.5 E(vPri)
-.25 E -.25(va)-.25 G(te block for it.).25 E(See Xserv)72 255.6 Q
(er/mfb/mfbwindo)-.15 E -.65(w.)-.25 G 2.5(cf).65 G(or the sample serv)
-2.5 E(er implementation.)-.15 E(Bool pScreen->Destro)97 279.6 Q(yW)-.1
E(indo)-.4 E(w\(pW)-.25 E(in\);)-.4 E -.4(Wi)122 291.6 S(ndo).4 E
(wPtr pW)-.25 E(in;)-.4 E(This routine is a hook for when DIX destro)72
315.6 Q(ys a windo)-.1 E 3.8 -.65(w. I)-.25 H 2.5(ts).65 G
(hould deallocate the de)-2.5 E(vPri)-.25 E -.25(va)-.25 G
(te block for it and).25 E(an)72 327.6 Q 2.5(yo)-.15 G(ther blocks that\
 need to be freed, besides doing other cleanup actions.)-2.5 E
(See Xserv)72 351.6 Q(er/mfb/mfbwindo)-.15 E -.65(w.)-.25 G 2.5(cf).65 G
(or the sample serv)-2.5 E(er implementation.)-.15 E
(Bool pScreen->PositionW)97 375.6 Q(indo)-.4 E(w\(pW)-.25 E(in, x, y\);)
-.4 E -.4(Wi)122 387.6 S(ndo).4 E(wPtr pW)-.25 E(in;)-.4 E(int x, y;)122
399.6 Q(This routine is a hook for when DIX mo)72 423.6 Q -.15(ve)-.15 G
2.5(so).15 G 2.5(rr)-2.5 G(esizes a windo)-2.5 E 3.8 -.65(w. I)-.25 H
2.5(ts).65 G(hould do whate)-2.5 E -.15(ve)-.25 G 2.5(rp).15 G(ri)-2.5 E
-.25(va)-.25 G(te operations).25 E(need to be done when a windo)72 435.6
Q 2.5(wi)-.25 G 2.5(sm)-2.5 G -.15(ove)-2.5 G 2.5(do).15 G 2.5(rr)-2.5 G
2.5(esized. F)-2.5 F(or instance, if DDX k)-.15 E
(eeps a pixmap tile used for)-.1 E(dra)72 447.6 Q
(wing the background or border)-.15 E 2.5(,a)-.4 G(nd it k)-2.5 E
(eeps the tile rotated such that it is longw)-.1 E(ord aligned to longw)
-.1 E(ord)-.1 E(locations in the frame b)72 459.6 Q(uf)-.2 E(fer)-.25 E
2.5(,t)-.4 G(hen you should rotate your tiles here.)-2.5 E
(The actual graphics in)5 E -.2(vo)-.4 G(lv).2 E(ed in mo)-.15 E(v-)-.15
E(ing the pix)72 471.6 Q(els on the screen and dra)-.15 E
(wing the border are handled by Cop)-.15 E(yW)-.1 E(indo)-.4 E
(w\(\), belo)-.25 E -.65(w.)-.25 G(See Xserv)72 487.2 Q(er/mfb/mfbwindo)
-.15 E -.65(w.)-.25 G 2.5(cf).65 G(or the sample serv)-2.5 E
(er implementation.)-.15 E(Bool pScreen->RealizeW)97 511.2 Q(indo)-.4 E
(w\(pW)-.25 E(in\);)-.4 E -.4(Wi)122 523.2 S(ndo).4 E(wPtr pW)-.25 E
(in;)-.4 E 2.5(Bool pScreen->UnrealizeW)97 547.2 R(indo)-.4 E(w\(pW)-.25
E(in\);)-.4 E -.4(Wi)122 559.2 S(ndo).4 E(wPtr pW)-.25 E(in;)-.4 E
(These routines are hooks for when DIX maps \(mak)72 583.2 Q
(es visible\) and unmaps \(mak)-.1 E(es in)-.1 E(visible\) a windo)-.4 E
3.8 -.65(w. I)-.25 H(t).65 E(should do whate)72 595.2 Q -.15(ve)-.25 G
2.5(rp).15 G(ri)-2.5 E -.25(va)-.25 G(te operations need to be done whe\
n these happen, such as allocating or deallocat-).25 E
(ing structures that are only needed for visible windo)72 607.2 Q 2.5
(ws. RealizeW)-.25 F(indo)-.4 E 2.5(wd)-.25 G(oes NO)-2.5 E 2.5(Td)-.4 G
(ra)-2.5 E 2.5(wt)-.15 G(he windo)-2.5 E 2.5(wb)-.25 G(or)-2.5 E(-)-.2 E
(der)72 619.2 Q 2.5(,b)-.4 G(ackground or contents; UnrealizeW)-2.5 E
(indo)-.4 E 2.5(wd)-.25 G(oes NO)-2.5 E 2.5(Te)-.4 G(rase the windo)-2.5
E 2.5(wo)-.25 G 2.5(rg)-2.5 G(enerate e)-2.5 E(xposure e)-.15 E -.15(ve)
-.25 G(nts).15 E(for underlying windo)72 631.2 Q(ws; this is tak)-.25 E
(en care of by DIX.)-.1 E(DIX does, ho)5 E(we)-.25 E -.15(ve)-.25 G .8
-.4(r, c).15 H(all P).4 E(aintW)-.15 E(indo)-.4 E(wBackground\(\))-.25 E
(and P)72 643.2 Q(aintW)-.15 E(indo)-.4 E
(wBorder\(\) to perform some of these.)-.25 E(Bool pScreen->ChangeW)97
667.2 Q(indo)-.4 E(wAttrib)-.25 E(utes\(pW)-.2 E(in, vmask\))-.4 E -.4
(Wi)122 679.2 S(ndo).4 E(wPtr pW)-.25 E(in;)-.4 E(unsigned long vmask;)
122 691.2 Q(ChangeW)72 715.2 Q(indo)-.4 E(wAttrib)-.25 E
(utes is called whene)-.2 E -.15(ve)-.25 G 2.5(rD).15 G
(IX changes windo)-2.5 E 2.5(wa)-.25 G(ttrib)-2.5 E
(utes, such as the size, front-to-)-.2 E(back ordering, title, or an)72
727.2 Q(ything of lesser se)-.15 E -.15(ve)-.25 G(rity that af).15 E
(fects the windo)-.25 E 2.5(wi)-.25 G 2.5(tself. The)-2.5 F(sample serv)
2.5 E(er)-.15 E(Porting Layer De\214nition)72 768 Q 2.5(-3)106.84 G
144.06 2.5(7- A)-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 38 38
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(implements this routine.)72 84 Q(It computes ac\
celerators for quickly putting up background and border tiles.)5 E
(\(See)5 E(description of the set of routines stored in the W)72 96 Q
(indo)-.4 E(wRec.\))-.25 E(int pScreen->V)97 120 Q(alidateT)-1.11 E
(ree\(pP)-.35 E 2.5(arent, pChild,)-.15 F(kind\))2.5 E -.4(Wi)122 132 S
(ndo).4 E(wPtr pP)-.25 E(arent, pChild;)-.15 E(VTKind kind;)122 144 Q
-1.11(Va)72 168 S(lidateT)1.11 E(ree calculates the clipping re)-.35 E
(gion for the parent windo)-.15 E 2.5(wa)-.25 G(nd all of its children.)
-2.5 E(This routine must)5 E(be pro)72 180 Q(vided. The sample serv)-.15
E(er has a machine-independent v)-.15 E(ersion in Xserv)-.15 E(er/mi/mi)
-.15 E -.25(va)-.25 G 2.5(ltree.c. This).25 F(is a)2.5 E -.15(ve)72 192
S(ry dif).15 E(\214cult routine to replace.)-.25 E -.2(vo)97 216 S
(id pScreen->PostV).2 E(alidateT)-1.11 E(ree\(pP)-.35 E 2.5
(arent, pChild,)-.15 F(kind\))2.5 E -.4(Wi)122 228 S(ndo).4 E(wPtr pP)
-.25 E(arent, pChild;)-.15 E(VTKind kind;)122 240 Q
(If this routine is not NULL, DIX calls it shortly after calling V)72
264 Q(alidateT)-1.11 E(ree, passing it the same ar)-.35 E(guments.)-.18
E(This is useful for managing multi-layered frameb)72 276 Q(uf)-.2 E 2.5
(fers. The)-.25 F(sample serv)2.5 E(er sets this to NULL.)-.15 E -.2(vo)
97 300 S(id pScreen->W).2 E(indo)-.4 E(wExposures\(pW)-.25 E(in, pRe)-.4
E(gion, pBSRe)-.15 E(gion\))-.15 E -.4(Wi)122 312 S(ndo).4 E(wPtr pW)
-.25 E(in;)-.4 E(Re)122 324 Q(gionPtr pRe)-.15 E(gion;)-.15 E(Re)122 336
Q(gionPtr pBSRe)-.15 E(gion;)-.15 E(The W)72 360 Q(indo)-.4 E
(wExposures\(\) routine paints the border and generates e)-.25 E
(xposure e)-.15 E -.15(ve)-.25 G(nts for the windo).15 E 3.8 -.65(w. p)
-.25 H(Re).65 E(gion)-.15 E(is an unoccluded re)72 372 Q
(gion of the windo)-.15 E 1.3 -.65(w, a)-.25 H(nd pBSRe).65 E
(gion is an occluded re)-.15 E(gion that has backing store.)-.15 E
(Since)5 E -.15(ex)72 384 S(posure e).15 E -.15(ve)-.25 G
(nts include a rectangle describing what w).15 E(as e)-.1 E
(xposed, this routine may ha)-.15 E .3 -.15(ve t)-.2 H 2.5(os).15 G
(end back a)-2.5 E(series of e)72 396 Q(xposure e)-.15 E -.15(ve)-.25 G
(nts, one for each rectangle of the re).15 E 2.5(gion. The)-.15 F
(count \214eld in the e)2.5 E(xpose e)-.15 E -.15(ve)-.25 G
(nt is a hint).15 E(to the client as to the number of re)72 408 Q
(gions that are after this one.)-.15 E(This routine must be pro)5 E
(vided. The sample)-.15 E(serv)72 420 Q(er has a machine-independent v)
-.15 E(ersion in Xserv)-.15 E(er/mi/mie)-.15 E(xpose.c.)-.15 E -.2(vo)97
444 S(id pScreen->ClipNotify \(pW).2 E(in, dx, dy\))-.4 E -.4(Wi)122 456
S(ndo).4 E(wPtr pW)-.25 E(in;)-.4 E(int dx, dy;)122 468 Q(Whene)72 492 Q
-.15(ve)-.25 G 2.5(rt).15 G(he cliplist for a windo)-2.5 E 2.5(wi)-.25 G
2.5(sc)-2.5 G(hanged, this function is called to perform whate)-2.5 E
-.15(ve)-.25 G 2.5(rh).15 G(ardw)-2.5 E(are manip-)-.1 E
(ulations might be necessary)72 504 Q 5(.W)-.65 G
(hen called, the clip list and border clip re)-5 E(gions in the windo)
-.15 E 2.5(wa)-.25 G(re set to the)-2.5 E(ne)72 516 Q 2.5(wv)-.25 G 2.5
(alues. dx,dy)-2.75 F(are the distance that the windo)2.5 E 2.5(wh)-.25
G(as been mo)-2.5 E -.15(ve)-.15 G 2.5(d\().15 G(if at all\).)-2.5 E/F1
10/Times-Bold@0 SF 2.5(5.3.2.2. W)72 540 R(indo)-.18 E 2.5(wP)-.1 G
(ainting Pr)-2.6 E(ocedur)-.18 E(es)-.18 E F0
(In addition to the procedures listed abo)72 555.6 Q -.15(ve)-.15 G 2.5
(,t).15 G(here are four routines which manipulate the actual windo)-2.5
E(w)-.25 E(image directly)72 567.6 Q 5(.I)-.65 G 2.5(nt)-5 G
(he sample serv)-2.5 E(er)-.15 E 2.5(,m)-.4 G 2.5(ii)-2.5 G
(mplementations will w)-2.5 E
(ork for most purposes and mfb/cfb routines)-.1 E(speed up situations, \
such as solid backgrounds/borders or tiles that are 8, 16 or 32 pix)72
579.6 Q(els square.)-.15 E(These three routines are used for systems th\
at implement a backing-store scheme for it to kno)72 603.6 Q 2.5(ww)-.25
G(hen to)-2.5 E(stash a)72 615.6 Q -.1(wa)-.15 G 2.5(ya).1 G
(reas of pix)-2.5 E(els and to restore or reposition them.)-.15 E -.2
(vo)97 639.6 S(id pScreen->ClearT).2 E(oBackground\(pW)-.8 E(in, x, y)
-.4 E 2.5(,w)-.65 G 2.5(,h)-3.15 G 2.5(,g)-2.5 G(enerateExposures\);)
-2.5 E -.4(Wi)122 651.6 S(ndo).4 E(wPtr pW)-.25 E(in;)-.4 E(int x, y)122
663.6 Q 2.5(,w)-.65 G 2.5(,h)-3.15 G(;)-2.5 E(Bool generateExposures;)
122 675.6 Q(This routine is called on a windo)72 699.6 Q 2.5(wi)-.25 G
2.5(nr)-2.5 G(esponse to a ClearT)-2.5 E
(oBackground request from the client.)-.8 E(This)5 E(request has tw)72
711.6 Q 2.5(od)-.1 G(if)-2.5 E(ferent b)-.25 E
(ut related functions, depending upon generateExposures.)-.2 E
(Porting Layer De\214nition)72 768 Q 2.5(-3)106.84 G 144.06 2.5(8- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 39 39
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF
(If generateExposures is true, the client is declaring that the gi)72 84
Q -.15(ve)-.25 G 2.5(nr).15 G(ectangle on the windo)-2.5 E 2.5(wi)-.25 G
2.5(si)-2.5 G(ncorrectly)-2.5 E(painted and needs to be repainted.)72 96
Q(The sample serv)5 E(er implementation calculates the e)-.15 E
(xposure re)-.15 E(gion and)-.15 E
(hands it to the DIX procedure HandleExposures\(\), which calls the W)72
108 Q(indo)-.4 E(wExposures\(\) routine, belo)-.25 E 1.3 -.65(w, f)-.25
H(or).65 E(the windo)72 120 Q 2.5(wa)-.25 G(nd all of its child windo)
-2.5 E(ws.)-.25 E(If generateExposures is f)72 144 Q
(alse, the client is trying to simply erase part of the windo)-.1 E 2.5
(wt)-.25 G 2.5(ot)-2.5 G(he background \214ll)-2.5 E 2.5(style. ClearT)
72 156 R(oBackground should write the background color or tile to the r\
ectangle in question \(probably)-.8 E(using P)72 168 Q(aintW)-.15 E
(indo)-.4 E 2.5(wBackground\). If)-.25 F 2.5(wo)2.5 G 2.5(rhi)-2.5 G 2.5
(sz)-2.5 G(ero, it clears all the w)-2.5 E(ay to the right or lo)-.1 E
(wer edge of the)-.25 E(windo)72 180 Q -.65(w.)-.25 G(The sample serv)72
204 Q(er implementation is in Xserv)-.15 E(er/mi/miwindo)-.15 E -.65(w.)
-.25 G(c.).65 E -.2(vo)97 228 S(id pScreen->P).2 E(aintW)-.15 E(indo)-.4
E(wBackground\(pW)-.25 E(in, re)-.4 E(gion, kind\))-.15 E -.4(Wi)122 240
S(ndo).4 E(wPtr pW)-.25 E(in;)-.4 E(Re)122 252 Q(gionPtr re)-.15 E
(gion;)-.15 E(int kind;)122 264 Q(/* must be PW_B)16.38 E -.4(AC)-.35 G
(KGR).4 E(OUND */)-.4 E -.2(vo)97 288 S(id pScreen->P).2 E(aintW)-.15 E
(indo)-.4 E(wBorder\(pW)-.25 E(in, re)-.4 E(gion, kind\))-.15 E -.4(Wi)
122 300 S(ndo).4 E(wPtr pW)-.25 E(in;)-.4 E(Re)122 312 Q(gionPtr re)-.15
E(gion;)-.15 E(int kind;)122 324 Q(/* must be PW_BORDER */)16.38 E
(These tw)72 348 Q 2.5(or)-.1 G
(outines are for painting pieces of the windo)-2.5 E 2.5(wb)-.25 G
(ackground or border)-2.5 E 5(.T)-.55 G(he)-5 E 2.5(yb)-.15 G
(oth actually paint)-2.5 E(the area designated by re)72 360 Q 2.5
(gion. The)-.15 F(kind parameter is a de\214ned constant that is al)2.5
E -.1(wa)-.1 G(ys PW_B).1 E -.4(AC)-.35 G(K-).4 E(GR)72 372 Q
(OUND or PW_BORDER, as sho)-.4 E 2.5(wn. Therefore,)-.25 F
(you can use the same routine for both.)2.5 E(The de\214ned)5 E
(constant tells the routine whether to use the windo)72 384 Q(w')-.25 E
2.5(sb)-.55 G
(order \214ll style or its background \214ll style to paint)-2.5 E
(the gi)72 396 Q -.15(ve)-.25 G 2.5(nr).15 G -.15(eg)-2.5 G 2.5
(ion. Both).15 F
(\214ll styles consist of a union which holds a tile pointer and a pix)
2.5 E(el v)-.15 E(alue, along with)-.25 E 2.5(as)72 408 S(eparate v)-2.5
E(ariable which indicates which entry is v)-.25 E 2.5(alid. F)-.25 F
(or PW_BORDER, borderIsPix)-.15 E(el != 0 indicates)-.15 E
(that the border PixUnion contains a pix)72 420 Q(el v)-.15 E
(alue, else a tile.)-.25 E -.15(Fo)5 G 2.5(rP).15 G(W_B)-2.5 E -.4(AC)
-.35 G(KGR).4 E(OUND there are four v)-.4 E(alues,)-.25 E
(contained in backgroundState; None, P)72 432 Q(arentRelati)-.15 E -.15
(ve)-.25 G 2.5(,B).15 G(ackgroundPixmap and BackgroundPix)-2.5 E 2.5
(el. None)-.15 F(indicates that the re)72 444 Q
(gion should be left un\214lled, while P)-.15 E(arentRelati)-.15 E .3
-.15(ve i)-.25 H(ndicates that the background of the).15 E
(parent is inherited \(see the Protocol document for the e)72 456 Q
(xact semantics\).)-.15 E -.2(vo)97 480 S(id pScreen->Cop).2 E(yW)-.1 E
(indo)-.4 E(w\(pW)-.25 E(in, oldpt, oldRe)-.4 E(gion\);)-.15 E -.4(Wi)
122 492 S(ndo).4 E(wPtr pW)-.25 E(in;)-.4 E(DDXPointRec oldpt;)122 504 Q
(Re)122 516 Q(gionPtr oldRe)-.15 E(gion;)-.15 E(Cop)72 540 Q(yW)-.1 E
(indo)-.4 E 2.5(wi)-.25 G 2.5(sc)-2.5 G(alled when a windo)-2.5 E 2.5
(wi)-.25 G 2.5(sm)-2.5 G -.15(ove)-2.5 G(d, and graphically mo).15 E
-.15(ve)-.15 G 2.5(st).15 G 2.5(op)-2.5 G(ix)-2.5 E(els of a windo)-.15
E 2.5(wo)-.25 G 2.5(nt)-2.5 G(he)-2.5 E 2.5(screen. It)72 552 R
(should not change an)2.5 E 2.5(yo)-.15 G
(ther state within DDX \(see PositionW)-2.5 E(indo)-.4 E(w\(\), abo)-.25
E -.15(ve)-.15 G(\).).15 E(oldpt is the old location of the upper)72 576
Q(-left corner)-.2 E 5(.o)-.55 G(ldRe)-5 E(gion is the old re)-.15 E
(gion it is coming from.)-.15 E(The ne)5 E(w)-.25 E(location and ne)72
588 Q 2.5(wr)-.25 G -.15(eg)-2.5 G(ion is stored in the W).15 E(indo)-.4
E 2.5(wRec. oldRe)-.25 F(gion might modi\214ed in place by this routine)
-.15 E(\(the sample implementation does this\).)72 600 Q(Cop)72 624 Q
(yArea could be used, e)-.1 E
(xcept that this operation has more complications.)-.15 E
(First of all, you do not w)5 E(ant to)-.1 E(cop)72 636 Q 2.5(yar)-.1 G
(ectangle onto a rectangle.)-2.5 E(The original windo)5 E 2.5(wm)-.25 G
(ay be obscured by other windo)-2.5 E(ws, and the ne)-.25 E(w)-.25 E
(windo)72 648 Q 2.5(wl)-.25 G(ocation may be similarly obscured.)-2.5 E
(Second, some hardw)5 E(are supports multiple windo)-.1 E(ws with mul-)
-.25 E(tiple depths, and your routine needs to tak)72 660 Q 2.5(ec)-.1 G
(are of that.)-2.5 E(The pix)72 684 Q(els in oldRe)-.15 E
(gion \(with reference point oldpt\) are copied to the windo)-.15 E(w')
-.25 E 2.5(sn)-.55 G .5 -.25(ew r)-2.5 H -.15(eg).25 G(ion \(pW).15 E
(in->border)-.4 E(-)-.2 E 2.5(Clip\). pW)72 696 R
(in->borderClip is gotten directly from the windo)-.4 E 1.3 -.65(w, r)
-.25 H(ather than passing it as a parameter).65 E(.)-.55 E
(The sample serv)72 720 Q(er implementation is in Xserv)-.15 E
(er/mfb/mfbwindo)-.15 E -.65(w.)-.25 G(c.).65 E
(Porting Layer De\214nition)72 768 Q 2.5(-3)106.84 G 144.06 2.5(9- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 40 40
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF 2.5(5.3.2.3. Scr)72 84 R(een Operations f)-.18 E
(or Backing Stor)-.25 E(e)-.18 E/F1 10/Times-Roman@0 SF
(Each ScreenRec has six functions which pro)72 99.6 Q
(vide the backing store interf)-.15 E 2.5(ace. F)-.1 F
(or screens not supporting)-.15 E
(backing store, these pointers may be nul.)72 111.6 Q(Serv)5 E
(ers that implement some backing store scheme must \214ll in)-.15 E
(the procedure pointers for the procedures belo)72 123.6 Q 1.3 -.65
(w, a)-.25 H(nd must maintain the backStorage \214eld in each windo).65
E(w)-.25 E 2.5(struct. The)72 135.6 R
(sample implementation is in mi/mibstore.c.)2.5 E -.2(vo)97 159.6 S
(id pScreen->Sa).2 E -.15(ve)-.2 G(DoomedAreas\(pW).15 E(in, pRe)-.4 E
(gion, dx, dy\))-.15 E -.4(Wi)122 171.6 S(ndo).4 E(wPtr pW)-.25 E(in;)
-.4 E(Re)122 183.6 Q(gionPtr pRe)-.15 E(gion;)-.15 E(int dx, dy;)122
195.6 Q(This routine sa)72 219.6 Q -.15(ve)-.2 G 2.5(st).15 G(he ne)-2.5
E(wly obscured re)-.25 E(gion, pRe)-.15 E(gion, in backing store.)-.15 E
(dx, dy indicate ho)5 E 2.5(wf)-.25 G(ar the win-)-2.6 E(do)72 231.6 Q
2.5(wi)-.25 G 2.5(sb)-2.5 G(eing mo)-2.5 E -.15(ve)-.15 G
(d, useful as the obscured re).15 E(gion is relati)-.15 E .3 -.15(ve t)
-.25 H 2.5(ot).15 G(he windo)-2.5 E 2.5(wa)-.25 G 2.5(si)-2.5 G 2.5(tw)
-2.5 G(ill appear in the ne)-2.5 E(w)-.25 E
(location, rather then relati)72 243.6 Q .3 -.15(ve t)-.25 H 2.5(ot).15
G(he bits as the are on the screen when the function is in)-2.5 E -.2
(vo)-.4 G -.1(ke).2 G(d.).1 E(Re)97 267.6 Q
(gionPtr pScreen->RestoreAreas\(pW)-.15 E(in, pRe)-.4 E(gion\))-.15 E
-.4(Wi)122 279.6 S(ndo).4 E(wPtr pW)-.25 E(in;)-.4 E(Re)122 291.6 Q
(gionPtr pRe)-.15 E(gion;)-.15 E(This looks at the e)72 315.6 Q
(xposed re)-.15 E(gion of the windo)-.15 E 1.3 -.65(w, p)-.25 H(Re).65 E
(gion, and tries to restore to the screen the parts that)-.15 E(ha)72
327.6 Q .3 -.15(ve b)-.2 H(een sa).15 E -.15(ve)-.2 G 2.5(d. It).15 F
(remo)2.5 E -.15(ve)-.15 G 2.5(st).15 G
(he restored parts from the backing storage \(because the)-2.5 E 2.5(ya)
-.15 G(re no)-2.5 E 2.5(wo)-.25 G 2.5(nt)-2.5 G(he)-2.5 E
(screen\) and subtracts the areas from the e)72 339.6 Q(xposed re)-.15 E
2.5(gion. The)-.15 F(returned re)2.5 E(gion is the area of the windo)
-.15 E(w)-.25 E(which should ha)72 351.6 Q .3 -.15(ve ex)-.2 H(pose e)
.15 E -.15(ve)-.25 G(nts generated for and can be either a ne).15 E 2.5
(wr)-.25 G -.15(eg)-2.5 G(ion, pW).15 E(in->e)-.4 E(xposed, or NULL.)
-.15 E(The re)72 363.6 Q(gion left in pRe)-.15 E
(gion is set to the area of the windo)-.15 E 2.5(ww)-.25 G
(hich should be painted with the windo)-2.5 E 2.5(wb)-.25 G(ack-)-2.5 E
(ground.)72 375.6 Q(Re)97 399.6 Q(gionPtr pScreen->T)-.15 E
(ranslateBackingStore\(pW)-.35 E(in, dx, dy)-.4 E 2.5(,o)-.65 G
(ldClip, oldx, oldy\))-2.5 E -.4(Wi)122 411.6 S(ndo).4 E(wPtr pW)-.25 E
(in;)-.4 E(int dx, dy;)122 423.6 Q(Re)122 435.6 Q(gionPtr oldClip;)-.15
E(int oldx, oldy;)122 447.6 Q(This is called when the windo)72 471.6 Q
2.5(wi)-.25 G 2.5(sm)-2.5 G -.15(ove)-2.5 G 2.5(do).15 G 2.5(rr)-2.5 G
(esized so that the backing store can be translated if necessary)-2.5 E
(.)-.65 E(oldClip is the old cliplist for the windo)72 483.6 Q 1.3 -.65
(w, w)-.25 H(hich is used to sa).65 E .3 -.15(ve d)-.2 H
(oomed areas if the windo).15 E 2.5(wi)-.25 G 2.5(sm)-2.5 G -.15(ove)
-2.5 G(d).15 E(underneath its parent as a result of bitgra)72 495.6 Q
(vity)-.2 E 5(.T)-.65 G(he returned re)-5 E
(gion represents occluded areas of the windo)-.15 E(w)-.25 E
(for which the backing store contents are in)72 507.6 Q -.25(va)-.4 G
(lid.).25 E -.2(vo)97 531.6 S(id pScreen->ExposeCop).2 E
(y\(pSrc, pDst, pGC, pr)-.1 E(gnExposed, srcx, src)-.18 E 1.3 -.65(y, d)
-.15 H(stx, dsty).65 E 2.5(,p)-.65 G(lane\))-2.5 E -.4(Wi)122 543.6 S
(ndo).4 E(wPtr pSrc;)-.25 E(Dra)122 555.6 Q -.1(wa)-.15 G(blePtr pDst;)
.1 E(GCPtr pGC;)122 567.6 Q(Re)122 579.6 Q(gionPtr pr)-.15 E(gnExposed;)
-.18 E(int srcx;)122 591.6 Q(int src)122 603.6 Q(y;)-.15 E(int dstx;)122
615.6 Q(int dsty;)122 627.6 Q(unsigned long plane;)122 639.6 Q
(Copies a re)72 663.6 Q(gion from the backing store of pSrc to pDst.)
-.15 E(Re)97 687.6 Q(gionPtr pScreen->ClearBackingStore\(pW)-.15 E(indo)
-.4 E 1.3 -.65(w, x)-.25 H 2.5(,y).65 G 2.5(,w)-3.15 G 2.5(,h)-3.15 G
2.5(,g)-2.5 G(enerateExposures\))-2.5 E -.4(Wi)122 699.6 S(ndo).4 E
(wPtr pW)-.25 E(indo)-.4 E(w;)-.25 E(int x;)122 711.6 Q(int y;)122 723.6
Q(Porting Layer De\214nition)72 768 Q 2.5(-4)106.84 G 144.06 2.5(0- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 41 41
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(int w;)122 84 Q(int h;)122 96 Q
(Bool generateExposures;)122 108 Q(Clear the gi)72 132 Q -.15(ve)-.25 G
2.5(na).15 G(rea of the backing pixmap with the background of the windo)
-2.5 E 3.8 -.65(w. I)-.25 H 2.5(fg).65 G(enerateExposures is)-2.5 E(TR)
72 144 Q(UE, generate e)-.4 E(xposure e)-.15 E -.15(ve)-.25 G
(nts for the area. Note that if the area has an).15 E 2.5(yp)-.15 G
(art outside the sa)-2.5 E -.15(ve)-.2 G 2.5(dp).15 G(ortions of)-2.5 E
(the windo)72 156 Q 1.3 -.65(w, w)-.25 H 2.5(ed).65 G 2.5(on)-2.5 G
(ot allo)-2.5 E 2.5(wt)-.25 G(he count in the e)-2.5 E(xpose e)-.15 E
-.15(ve)-.25 G(nts to be 0, since there will be more e).15 E(xpose e)
-.15 E -.15(ve)-.25 G(nts).15 E(to come.)72 168 Q -.2(vo)97 192 S
(id pScreen->Dra).2 E(wGuarantee\(pW)-.15 E(indo)-.4 E 1.3 -.65(w, p)
-.25 H(GC, guarantee\)).65 E -.4(Wi)122 204 S(ndo).4 E(wPtr pW)-.25 E
(indo)-.4 E(w;)-.25 E(GCPtr pGC;)122 216 Q(int guarantee;)122 228 Q
(This informs the backing store layer that you are about to v)72 252 Q
(alidate a gc with a windo)-.25 E 1.3 -.65(w, a)-.25 H
(nd that subsequent).65 E(output to the windo)72 264 Q 2.5(wi)-.25 G 2.5
(s\()-2.5 G
(or is not\) guaranteed to be already clipped to the visible re)-2.5 E
(gions of the windo)-.15 E -.65(w.)-.25 G/F1 10/Times-Bold@0 SF 2.5
(5.3.2.4. Scr)72 300 R(een Operations f)-.18 E(or Multi-Lay)-.25 E(er)
-.1 E(ed Frameb)-.18 E(uffers)-.2 E F0(The follo)72 315.6 Q
(wing screen functions are useful if you ha)-.25 E .3 -.15(ve a f)-.2 H
(rameb).15 E(uf)-.2 E(fer with multiple sets of independent bit)-.25 E
(planes, e.g. o)72 327.6 Q -.15(ve)-.15 G
(rlays or underlays in addition to the "main" planes.).15 E(If you ha)5
E .3 -.15(ve a s)-.2 H(imple single-layer frame-).15 E -.2(bu)72 339.6 S
-.25(ff).2 G(er).25 E 2.5(,y)-.4 G(ou should probably use the mi v)-2.5
E(ersions of these routines in mi/miwindo)-.15 E -.65(w.)-.25 G 2.5
(c. This).65 F(can be easily)2.5 E
(accomplished by calling miScreenInit.)72 351.6 Q -.2(vo)82 375.6 S
(id pScreen->MarkW).2 E(indo)-.4 E(w\(pW)-.25 E(in\))-.4 E -.4(Wi)97
387.6 S(ndo).4 E(wPtr pW)-.25 E(in;)-.4 E
(This formerly dix function MarkW)72 411.6 Q(indo)-.4 E 2.5(wh)-.25 G
(as mo)-2.5 E -.15(ve)-.15 G 2.5(dt).15 G 2.5(od)-2.5 G
(dx and is accessed via this screen function.)-2.5 E(This)5 E
(function should store something, usually a pointer to a de)72 423.6 Q
(vice-dependent structure, in pW)-.25 E(in->v)-.4 E(aldata so that)-.25
E -1.11(Va)72 435.6 S(lidateT)1.11 E
(ree has the information it needs to v)-.35 E(alidate the windo)-.25 E
-.65(w.)-.25 G(Bool pScreen->MarkOv)82 459.6 Q(erlappedW)-.15 E(indo)-.4
E(ws\(parent, \214rstChild, ppLayerW)-.25 E(in\))-.4 E -.4(Wi)97 471.6 S
(ndo).4 E(wPtr parent;)-.25 E -.4(Wi)97 483.6 S(ndo).4 E
(wPtr \214rstChild;)-.25 E -.4(Wi)97 495.6 S(ndo).4 E(wPtr * ppLayerW)
-.25 E(in;)-.4 E(This formerly dix function MarkW)72 519.6 Q(indo)-.4 E
2.5(wh)-.25 G(as mo)-2.5 E -.15(ve)-.15 G 2.5(dt).15 G 2.5(od)-2.5 G
(dx and is accessed via this screen function.)-2.5 E(In the)5 E
(process, it has gro)72 531.6 Q(wn another parameter: ppLayerW)-.25 E
(in, which is \214lled in with a pointer to the windo)-.4 E 2.5(wa)-.25
G(t)-2.5 E(which sa)72 543.6 Q .3 -.15(ve u)-.2 H(nder marking and V).15
E(alidateT)-1.11 E(ree should be)-.35 E 2.5(gin. In)-.15 F
(the single-layered frameb)2.5 E(uf)-.2 E(fer case, pLayer)-.25 E(-)-.2
E -.4(Wi)72 555.6 S 2.5(n=).4 G 2.5(=p)-2.5 G -.4(Wi)-2.5 G(n.).4 E
(Bool pScreen->ChangeSa)82 579.6 Q -.15(ve)-.2 G(Under\(pLayerW).15 E
(in, \214rstChild\))-.4 E -.4(Wi)97 591.6 S(ndo).4 E(wPtr pLayerW)-.25 E
(in;)-.4 E -.4(Wi)97 603.6 S(ndo).4 E(wPtr \214rstChild;)-.25 E
(The dix functions ChangeSa)72 627.6 Q -.15(ve)-.2 G(Under and CheckSa)
.15 E -.15(ve)-.2 G(Under ha).15 E .3 -.15(ve m)-.2 H -.15(ove).15 G 2.5
(dt).15 G 2.5(od)-2.5 G(dx and are accessed via this)-2.5 E
(screen function.)72 639.6 Q(pLayerW)5 E(in should be the windo)-.4 E
2.5(wr)-.25 G(eturned in the ppLayerW)-2.5 E(in parameter of MarkOv)-.4
E(er)-.15 E(-)-.2 E(lappedW)72 651.6 Q(indo)-.4 E 2.5(ws. The)-.25 F
(function may turn on backing store for windo)2.5 E(ws that might be co)
-.25 E -.15(ve)-.15 G(red, and may par).15 E(-)-.2 E(tially turn of)72
663.6 Q 2.5(fb)-.25 G(acking store for windo)-2.5 E 2.5(ws. It)-.25 F
(returns TR)2.5 E(UE if PostChangeSa)-.4 E -.15(ve)-.2 G
(Under needs to be called to).15 E(\214nish turning of)72 675.6 Q 2.5
(fb)-.25 G(acking store.)-2.5 E -.2(vo)82 699.6 S
(id pScreen->PostChangeSa).2 E -.15(ve)-.2 G(Under\(pLayerW).15 E
(in, \214rstChild\))-.4 E -.4(Wi)97 711.6 S(ndo).4 E(wPtr pLayerW)-.25 E
(in;)-.4 E -.4(Wi)97 723.6 S(ndo).4 E(wPtr \214rstChild;)-.25 E
(Porting Layer De\214nition)72 768 Q 2.5(-4)106.84 G 144.06 2.5(1- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 42 42
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(The dix function DoChangeSa)72 84 Q -.15(ve)-.2
G(Under has mo).15 E -.15(ve)-.15 G 2.5(dt).15 G 2.5(od)-2.5 G
(dx and is accessed via this screen function.)-2.5 E(This)5 E
(function completes the job of turning of)72 96 Q 2.5(fb)-.25 G
(acking store that w)-2.5 E(as started by ChangeSa)-.1 E -.15(ve)-.2 G
(Under).15 E(.)-.55 E -.2(vo)82 120 S(id pScreen->Mo).2 E -.15(ve)-.15 G
-.4(Wi).15 G(ndo).4 E(w\(pW)-.25 E(in, x, y)-.4 E 2.5(,p)-.65 G
(Sib, kind\))-2.5 E -.4(Wi)97 132 S(ndo).4 E(wPtr pW)-.25 E(in;)-.4 E
(int x;)97 144 Q(int y;)97 156 Q -.4(Wi)97 168 S(ndo).4 E(wPtr pSib;)
-.25 E(VTKind kind;)97 180 Q(The formerly dix function Mo)72 204 Q -.15
(ve)-.15 G -.4(Wi).15 G(ndo).4 E 2.5(wh)-.25 G(as mo)-2.5 E -.15(ve)-.15
G 2.5(dt).15 G 2.5(od)-2.5 G
(dx and is accessed via this screen function.)-2.5 E(The)5 E(ne)72 216 Q
2.5(wp)-.25 G(osition of the windo)-2.5 E 2.5(wi)-.25 G 2.5(sg)-2.5 G
-2.15 -.25(iv e)-2.5 H 2.5(nb).25 G 2.5(yx)-2.5 G(,y)-2.5 E 5(.k)-.65 G
(ind is VTMo)-5 E .3 -.15(ve i)-.15 H 2.5(ft).15 G(he windo)-2.5 E 2.5
(wi)-.25 G 2.5(so)-2.5 G(nly mo)-2.5 E(ving, or VT)-.15 E(Other if)-.18
E(the border is also changing.)72 228 Q -.2(vo)82 252 S
(id pScreen->ResizeW).2 E(indo)-.4 E(w\(pW)-.25 E(in, x, y)-.4 E 2.5(,w)
-.65 G 2.5(,h)-3.15 G 2.5(,p)-2.5 G(Sib\))-2.5 E -.4(Wi)97 264 S(ndo).4
E(wPtr pW)-.25 E(in;)-.4 E(int x;)97 276 Q(int y;)97 288 Q
(unsigned int w;)97 300 Q(unsigned int h;)97 312 Q -.4(Wi)97 324 S(ndo)
.4 E(wPtr pSib;)-.25 E(The formerly dix function SlideAndSizeW)72 348 Q
(indo)-.4 E 2.5(wh)-.25 G(as mo)-2.5 E -.15(ve)-.15 G 2.5(dt).15 G 2.5
(od)-2.5 G(dx and is accessed via this screen function.)-2.5 E(The ne)72
360 Q 2.5(wp)-.25 G(osition is gi)-2.5 E -.15(ve)-.25 G 2.5(nb).15 G 2.5
(yx)-2.5 G(,y)-2.5 E 5(.T)-.65 G(he ne)-5 E 2.5(ws)-.25 G(ize is gi)-2.5
E -.15(ve)-.25 G 2.5(nb).15 G 2.5(yw)-2.5 G(,h.)-3.15 E -.4(Wi)82 384 S
(ndo).4 E(wPtr pScreen->GetLayerW)-.25 E(indo)-.4 E(w\(pW)-.25 E(in\))
-.4 E -.4(Wi)97 396 S(ndo).4 E(wPtr pW)-.25 E(in)-.4 E(This is a ne)72
420 Q 2.5(wf)-.25 G
(unction which returns a child of the layer parent of pW)-2.5 E(in.)-.4
E -.2(vo)82 444 S(id pScreen->HandleExposures\(pW).2 E(in\))-.4 E -.4
(Wi)97 456 S(ndo).4 E(wPtr pW)-.25 E(in;)-.4 E
(The formerly dix function HandleExposures has mo)72 480 Q -.15(ve)-.15
G 2.5(dt).15 G 2.5(od)-2.5 G
(dx and is accessed via this screen function.)-2.5 E
(This function is called after V)72 492 Q(alidateT)-1.11 E
(ree and uses the information contained in v)-.35 E(aldata to send e)
-.25 E(xposures to)-.15 E(windo)72 504 Q(ws.)-.25 E -.2(vo)82 528 S
(id pScreen->ReparentW).2 E(indo)-.4 E(w\(pW)-.25 E(in, pPriorP)-.4 E
(arent\))-.15 E -.4(Wi)97 540 S(ndo).4 E(wPtr pW)-.25 E(in;)-.4 E -.4
(Wi)97 552 S(ndo).4 E(wPtr pPriorP)-.25 E(arent;)-.15 E
(This function will be called when a windo)72 576 Q 2.5(wi)-.25 G 2.5
(sr)-2.5 G 2.5(eparented. At)-2.5 F(the time of the call, pW)2.5 E
(in will already be)-.4 E(spliced into its ne)72 588 Q 2.5(wp)-.25 G
(osition in the windo)-2.5 E 2.5(wt)-.25 G(ree, and pPriorP)-2.5 E
(arent is its pre)-.15 E(vious parent.)-.25 E(This function can)5 E
(be NULL.)72 600 Q -.2(vo)82 624 S(id pScreen->SetShape\(pW).2 E(in\))
-.4 E -.4(Wi)97 636 S(ndo).4 E(wPtr pW)-.25 E(in;)-.4 E
(The formerly dix function SetShape has mo)72 660 Q -.15(ve)-.15 G 2.5
(dt).15 G 2.5(od)-2.5 G(dx and is accessed via this screen function.)
-2.5 E(The win-)5 E(do)72 672 Q(w')-.25 E 2.5(sn)-.55 G .5 -.25(ew s)
-2.5 H(hape will ha).25 E .3 -.15(ve a)-.2 H
(lready been stored in the windo).15 E 2.5(ww)-.25 G
(hen this function is called.)-2.5 E -.2(vo)82 696 S
(id pScreen->ChangeBorderW).2 E(idth\(pW)-.4 E(in, width\))-.4 E -.4(Wi)
97 708 S(ndo).4 E(wPtr pW)-.25 E(in;)-.4 E(unsigned int width;)97 720 Q
(Porting Layer De\214nition)72 768 Q 2.5(-4)106.84 G 144.06 2.5(2- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 43 43
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(The formerly dix function ChangeBorderW)72 84 Q
(idth has mo)-.4 E -.15(ve)-.15 G 2.5(dt).15 G 2.5(od)-2.5 G
(dx and is accessed via this screen function.)-2.5 E(The ne)72 96 Q 2.5
(wb)-.25 G(order width is gi)-2.5 E -.15(ve)-.25 G 2.5(nb).15 G 2.5(yw)
-2.5 G(idth.)-2.5 E -.2(vo)82 120 S(id pScreen->MarkUnrealizedW).2 E
(indo)-.4 E(w\(pChild, pW)-.25 E(in, fromCon\214gure\))-.4 E -.4(Wi)97
132 S(ndo).4 E(wPtr pChild;)-.25 E -.4(Wi)97 144 S(ndo).4 E(wPtr pW)-.25
E(in;)-.4 E(Bool fromCon\214gure;)97 156 Q
(This function is called for windo)72 180 Q
(ws that are being unrealized as part of an UnrealizeT)-.25 E 2.5
(ree. pChild)-.35 F(is the)2.5 E(windo)72 192 Q 2.5(wb)-.25 G
(eing unrealized, pW)-2.5 E(in is an ancestor)-.4 E 2.5(,a)-.4 G
(nd the fromCon\214gure v)-2.5 E(alue is simply propog)-.25 E(ated from)
-.05 E(UnrealizeT)72 204 Q(ree.)-.35 E/F1 10/Times-Bold@0 SF 2.5
(5.4. Graphics)72 228 R(Contexts and V)2.5 E(alidation)-.92 E F0
(This graphics conte)72 243.6 Q(xt \(GC\) contains state v)-.15 E
(ariables such as fore)-.25 E(ground and background pix)-.15 E(el v)-.15
E(alue \(color\),)-.25 E(the current line style and width, the current \
tile or stipple for pattern generation, the current font for te)72 255.6
Q(xt)-.15 E(generation, and other similar attrib)72 267.6 Q(utes.)-.2 E
(In man)72 291.6 Q 2.5(yg)-.15 G(raphics systems, the equi)-2.5 E -.25
(va)-.25 G(lent of the graphics conte).25 E(xt and the dra)-.15 E -.1
(wa)-.15 G(ble are combined as one).1 E(entity)72 303.6 Q 5(.T)-.65 G
(he main distinction between the tw)-5 E 2.5(ok)-.1 G
(inds of status is that a dra)-2.5 E -.1(wa)-.15 G
(ble describes a writing surf).1 E(ace)-.1 E
(and the writings that may ha)72 315.6 Q .3 -.15(ve a)-.2 H
(lready been done on it, whereas a graphics conte).15 E
(xt describes the dra)-.15 E(wing)-.15 E 2.5(process. A)72 327.6 R(dra)
2.5 E -.1(wa)-.15 G(ble is lik).1 E 2.5(eac)-.1 G 2.5(halkboard. A)-2.5
F(GC is lik)2.5 E 2.5(eap)-.1 G(iece of chalk.)-2.5 E(Unlik)72 351.6 Q
2.5(em)-.1 G(an)-2.5 E 2.5(ys)-.15 G
(imilar systems, there is no "current pen location.")-2.5 E(Ev)5 E
(ery graphic operation is accompanied)-.15 E
(by the coordinates where it is to happen.)72 363.6 Q
(The GC also includes tw)72 387.6 Q 2.5(ov)-.1 G(ectors of procedure po\
inters, the \214rst operate on the GC itself and are called GC)-2.65 E
2.5(funcs. The)72 399.6 R(second, called GC ops, contains the functions\
 that carry out the fundamental graphic operations)2.5 E(such as dra)72
411.6 Q(wing lines, polygons, arcs, te)-.15 E(xt, and cop)-.15 E
(ying bitmaps.)-.1 E(The DDX graphic softw)5 E(are can, if it)-.1 E -.1
(wa)72 423.6 S(nts to be smart, change these tw).1 E 2.5(ov)-.1 G
(ectors of procedure pointers to tak)-2.65 E 2.5(ea)-.1 G(dv)-2.5 E
(antage of hardw)-.25 E(are/\214rmw)-.1 E(are)-.1 E(in the serv)72 435.6
Q(er machine, which can do a better job under certain circumstances.)
-.15 E 1.6 -.8(To r)5 H(educe the amount of).8 E
(memory consumed by each GC, it is wise to create a fe)72 447.6 Q 2.5
(w")-.25 G(boilerplate" GC ops v)-2.5 E(ectors which can be shared)-.15
E(by e)72 459.6 Q -.15(ve)-.25 G
(ry GC which matches the constraints for that set.).15 E
(Also, it is usually reasonable to ha)5 E .3 -.15(ve e)-.2 H -.15(ve)-.1
G(ry GC cre-).15 E
(ated by a particular module to share a common set of GC funcs.)72 471.6
Q(Samples of this sort of sharing can be seen)5 E
(in cfb/cfbgc.c and mfb/mfbgc.c.)72 483.6 Q(The DDX softw)72 507.6 Q
(are is noti\214ed an)-.1 E 2.5(yt)-.15 G
(ime the client \(or DIX\) uses a changed GC.)-2.5 E -.15(Fo)5 G 2.5(ri)
.15 G(nstance, if the hard-)-2.5 E -.1(wa)72 519.6 S
(re has special support for dra).1 E(wing \214x)-.15 E
(ed-width fonts, DDX can intercept changes to the current font in a)-.15
E(GC just before dra)72 531.6 Q(wing is done.)-.15 E
(It can plug into either a \214x)5 E(ed-width procedure that mak)-.15 E
(es the hardw)-.1 E(are)-.1 E(dra)72 543.6 Q 2.5(wc)-.15 G
(haracters, or a v)-2.5 E(ariable-width procedure that carefully lays o\
ut glyphs by hand in softw)-.25 E(are, depend-)-.1 E(ing upon the ne)72
555.6 Q 2.5(wf)-.25 G(ont that is selected.)-2.5 E 2.5(Ad)72 579.6 S
(e\214nition of these structures can be found in the \214le Xserv)-2.5 E
(er/include/gcstruct.h.)-.15 E
(Also included in each GC is an array of de)72 603.6 Q(vPri)-.25 E -.25
(va)-.25 G(tes which portions of the DDX can use for an).25 E 2.5(yr)
-.15 G(eason.)-2.5 E
(Entries in this array are allocated with AllocateGCPri)72 615.6 Q -.25
(va)-.25 G(teInde).25 E(x\(\) \(see Wrappers and Pri)-.15 E -.25(va)-.25
G(tes belo).25 E(w\).)-.25 E(The DIX routines a)72 639.6 Q -.25(va)-.2 G
(ilable for manipulating GCs are CreateGC, ChangeGC, Cop).25 E
(yGC, SetClipRects, Set-)-.1 E(Dashes, and FreeGC.)72 651.6 Q
(GCPtr CreateGC\(pDra)97 675.6 Q -.1(wa)-.15 G(ble, mask, pv).1 E
(al, pStatus\))-.25 E(Dra)107 687.6 Q -.1(wa)-.15 G(blePtr pDra).1 E -.1
(wa)-.15 G(ble;).1 E(BITS32 mask;)107 699.6 Q(XID *pv)107 711.6 Q(al;)
-.25 E(int *pStatus;)107 723.6 Q(Porting Layer De\214nition)72 768 Q 2.5
(-4)106.84 G 144.06 2.5(3- A)-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 44 44
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(int ChangeGC\(pGC, mask, pv)97 84 Q(al\))-.25 E
(GCPtr pGC;)107 96 Q(BITS32 mask;)107 108 Q(XID *pv)107 120 Q(al;)-.25 E
(int Cop)97 144 Q(yGC\(pgcSrc, pgcDst, mask\))-.1 E(GCPtr pgcSrc;)107
156 Q(GCPtr pgcDst;)107 168 Q(BITS32 mask;)107 180 Q
(int SetClipRects\(pGC, xOrigin, yOrigin, nrects, prects, ordering\))97
204 Q(GCPtr pGC;)107 216 Q(int xOrigin, yOrigin;)107 228 Q(int nrects;)
107 240 Q(xRectangle *prects;)107 252 Q(int ordering;)107 264 Q
(SetDashes\(pGC, of)97 288 Q(fset, ndash, pdash\))-.25 E(GCPtr pGC;)107
300 Q(unsigned of)107 312 Q(fset;)-.25 E(unsigned ndash;)107 324 Q
(unsigned char *pdash;)107 336 Q(int FreeGC\(pGC, gid\))97 360 Q
(GCPtr pGC;)107 372 Q(GConte)107 384 Q(xt gid;)-.15 E(As a con)72 420 Q
-.15(ve)-.4 G(nience, each Screen structure contains an array of GCs th\
at are preallocated, one at each depth).15 E(the screen supports.)72 432
Q(These are particularly useful in the mi code.)5 E -1 -.8(Tw o)5 H
(DIX routines must be used to get)3.3 E(these GCs:)72 444 Q
(GCPtr GetScratchGC\(depth, pScreen\))97 468 Q(int depth;)107 480 Q
(ScreenPtr pScreen;)107 492 Q(FreeScratchGC\(pGC\))97 516 Q(GCPtr pGC;)
107 528 Q(Al)72 552 Q -.1(wa)-.1 G(ys use these tw).1 E 2.5(or)-.1 G
(outines, don')-2.5 E 2.5(tt)-.18 G(ry to e)-2.5 E
(xtract the scratch GC yourself -- someone else might be using)-.15 E
(it, so a ne)72 564 Q 2.5(wo)-.25 G(ne must be created on the \215y)-2.5
E(.)-.65 E(If you need a GC for a v)72 588 Q
(ery long time, say until the serv)-.15 E
(er is restarted, you should not tak)-.15 E 2.5(eo)-.1 G(ne from the)
-2.5 E(pool used by GetScratchGC, b)72 600 Q(ut should get your o)-.2 E
(wn using CreateGC or CreateScratchGC.)-.25 E(This lea)5 E -.15(ve)-.2 G
2.5(st).15 G(he)-2.5 E(ones in the pool free for routines that only nee\
d it for a little while and don')72 612 Q 2.5(tw)-.18 G
(ant to pay a hea)-2.6 E(vy cost to get)-.2 E(it.)72 624 Q
(GCPtr CreateScratchGC\(pScreen, depth\))97 648 Q(ScreenPtr pScreen;)107
660 Q(int depth;)107 672 Q
(NULL is returned if the GC cannot be created.)72 696 Q
(The GC returned can be freed with FreeScratchGC.)5 E
(Porting Layer De\214nition)72 768 Q 2.5(-4)106.84 G 144.06 2.5(4- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 45 45
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF 2.5(5.4.1. Details)72 84 R(of operation)2.5 E/F1
10/Times-Roman@0 SF(At screen initialization, a screen must supply a GC\
 creation procedure.)72 99.6 Q(At GC creation, the screen must \214ll)5
E(in GC funcs and GC ops v)72 111.6 Q(ectors \(Xserv)-.15 E 2.5
(er/include/gcstruct.h\). F)-.15 F(or an)-.15 E 2.5(yp)-.15 G
(articular GC, the func v)-2.5 E(ector must)-.15 E
(remain constant, while the op v)72 123.6 Q(ector may v)-.15 E(ary)-.25
E 5(.T)-.65 G(his in)-5 E -.25(va)-.4 G
(riant is to ensure that Wrappers w).25 E(ork correctly)-.1 E(.)-.65 E(\
When a client request is processed that results in a change to the GC, \
the de)72 147.6 Q(vice-independent state of the)-.25 E(GC is updated.)72
159.6 Q(This includes a record of the state that changed.)5 E
(Then the ChangeGC GC func is called.)5 E(This is useful for graphics s\
ubsystems that are able to process state changes in parallel with the s\
erv)72 171.6 Q(er CPU.)-.15 E(DDX may opt not to tak)72 183.6 Q 2.5(ea)
-.1 G .3 -.15(ny a)-2.5 H(ction at GC-modify time.).15 E
(This is more ef)5 E(\214cient if multiple GC-modify)-.25 E
(requests occur between dra)72 195.6 Q(ws using a gi)-.15 E -.15(ve)-.25
G 2.5(nG).15 G(C.)-2.5 E -1.11(Va)72 219.6 S
(lidation occurs at the \214rst dra)1.11 E 2.5(wo)-.15 G
(peration that speci\214es the GC after that GC w)-2.5 E(as modi\214ed.)
-.1 E(DIX calls)5 E(then the V)72 231.6 Q(alidateGC GC func.)-1.11 E
(DDX should then update its internal state.)5 E
(DDX internal state may be)5 E(stored as one or more of the follo)72
243.6 Q 2.5(wing: 1\))-.25 F(de)2.5 E(vice pri)-.25 E -.25(va)-.25 G
(te block on the GC; 2\) hardw).25 E(are state; 3\) changes to)-.1 E
(the GC ops.)72 255.6 Q(The GC contains a serial number)72 279.6 Q 2.5
(,w)-.4 G(hich is loaded with a number fetched from the windo)-2.5 E 2.5
(wt)-.25 G(hat w)-2.5 E(as dra)-.1 E(wn)-.15 E
(into the last time the GC w)72 291.6 Q(as used.)-.1 E
(The serial number in the dra)5 E -.1(wa)-.15 G
(ble is changed when the dra).1 E -.1(wa)-.15 G(ble').1 E 2.5(sc)-.55 G
(li-)-2.5 E(pList or absCorner changes.)72 303.6 Q
(Thus, by comparing the GC serial number with the dra)5 E -.1(wa)-.15 G
(ble serial number).1 E(,)-.4 E(DIX can force a v)72 315.6 Q
(alidate if the dra)-.25 E -.1(wa)-.15 G
(ble has been changed since the last time it w).1 E
(as used with this GC.)-.1 E(In addition, the dra)72 339.6 Q -.1(wa)-.15
G(ble serial number is al).1 E -.1(wa)-.1 G(ys guaranteed to ha).1 E .3
-.15(ve t)-.2 H(he most signi\214cant bit set to 0.).15 E(Thus,)5 E(the\
 DDX layer can set the most signi\214cant bit of the serial number to 1\
 in a GC to force a v)72 351.6 Q(alidate the ne)-.25 E(xt)-.15 E
(time the GC is used.)72 363.6 Q(DIX also uses this technique to indica\
te that a change has been made to the GC by)5 E -.1(wa)72 375.6 S 2.5
(yo).1 G 2.5(faS)-2.5 G(etGC, a SetDashes or a SetClip request.)-2.5 E
F0 2.5(5.4.2. GC)72 411.6 R(Handling Routines)2.5 E F1
(The ScreenRec data structure has a pointer for CreateGC\(\).)72 427.2 Q
(Bool pScreen->CreateGC\(pGC\))97 451.2 Q(GCPtr pGC;)122 463.2 Q(This r\
outine must \214ll in the \214elds of a dynamically allocated GC that i\
s passed in.)72 475.2 Q(It does NO)5 E 2.5(Ta)-.4 G(llocate the)-2.5 E
(GC record itself or \214ll in the def)72 487.2 Q(aults; DIX does that.)
-.1 E(This must \214ll in both the GC funcs and ops; none of the dra)72
511.2 Q(wing functions will be called before the GC has)-.15 E(been v)72
523.2 Q(alidated, b)-.25 E
(ut the others \(dealing with allocating of clip re)-.2 E
(gions, changing and destro)-.15 E(ying the GC, etc.\))-.1 E(might be.)
72 535.2 Q(The GC funcs v)72 559.2 Q
(ector contains pointers to 7 routines and a de)-.15 E(vPri)-.25 E -.25
(va)-.25 G(te \214eld:).25 E(pGC->funcs->ChangeGC\(pGC, changes\))97
583.2 Q(GCPtr pGC;)122 595.2 Q(unsigned long changes;)122 607.2 Q(This \
GC func is called immediately after a \214eld in the GC is changed.)72
631.2 Q(changes is a bit mask indicating the)5 E
(changed \214elds of the GC in this request.)72 643.2 Q
(The ChangeGC routine is useful if you ha)72 667.2 Q .3 -.15(ve a s)-.2
H(ystem where state-changes to the GC can be sw).15 E(allo)-.1 E(wed)
-.25 E(immediately by your graphics system, and a v)72 679.2 Q
(alidate is not necessary)-.25 E(.)-.65 E(pGC->funcs->V)97 715.2 Q
(alidateGC\(pGC, changes, pDra)-1.11 E(w\))-.15 E(GCPtr pGC;)122 727.2 Q
(Porting Layer De\214nition)72 768 Q 2.5(-4)106.84 G 144.06 2.5(5- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 46 46
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(unsigned long changes;)122 84 Q(Dra)122 96 Q -.1
(wa)-.15 G(blePtr pDra).1 E(w;)-.15 E -1.11(Va)72 120 S(lidateGC is cal\
led by DIX just before the GC will be used when one of man)1.11 E 2.5
(yp)-.15 G(ossible changes to the GC)-2.5 E
(or the graphics system has happened.)72 132 Q(It can modify a de)5 E
(vPri)-.25 E -.25(va)-.25 G
(tes \214eld of the GC or its contents, change the).25 E(op v)72 144 Q
(ector)-.15 E 2.5(,o)-.4 G 2.5(rc)-2.5 G(hange hardw)-2.5 E
(are according to the v)-.1 E(alues in the GC.)-.25 E
(It may not change the de)5 E(vice-independent)-.25 E
(portion of the GC itself.)72 156 Q(In almost all cases, your V)72 180 Q
(alidateGC\(\) procedure should tak)-1.11 E 2.5(et)-.1 G(he re)-2.5 E
(gions that dra)-.15 E(wing needs to be clipped)-.15 E
(to and combine them into a composite clip re)72 192 Q
(gion, which you k)-.15 E(eep a pointer to in the pri)-.1 E -.25(va)-.25
G(te part of the GC.).25 E(In this w)72 204 Q(ay)-.1 E 2.5(,y)-.65 G
(our dra)-2.5 E(wing primiti)-.15 E .3 -.15(ve r)-.25 H
(outines \(and whate).15 E -.15(ve)-.25 G 2.5(ri).15 G 2.5(sb)-2.5 G
(elo)-2.5 E 2.5(wt)-.25 G(hem\) can easily determine what to clip)-2.5 E
(and where.)72 216 Q -1.1(Yo)5 G 2.5(us)1.1 G(hould combine the re)-2.5
E(gions clientClip \(the re)-.15 E
(gion that the client desires to clip output to\))-.15 E(and the re)72
228 Q(gion returned by NotClippedByChildren\(\), in DIX.)-.15 E(An e)5 E
(xample is in Xserv)-.15 E(er/mfb/mfbgc.c.)-.15 E(Some kinds of e)72 252
Q(xtension softw)-.15 E(are may cause this routine to be called more th\
an originally intended; you)-.1 E(should not rely on algorithms that wi\
ll break under such circumstances.)72 264 Q(See the Strate)72 288 Q
(gies document for more information on creati)-.15 E -.15(ve)-.25 G
(ly using this routine.).15 E(pGC->funcs->Cop)97 324 Q
(yGC\(pGCSrc, mask, pGCDst\))-.1 E(GCPtr pGCSrc;)122 336 Q
(unsigned long mask;)122 348 Q(GCPtr pGCDst;)122 360 Q
(This routine is called by DIX when a GC is being copied to another GC.)
72 384 Q(This is for situations where)5 E
(dynamically allocated chunks of memory are hanging of)72 396 Q 2.5(faG)
-.25 G 2.5(Cd)-2.5 G -.25(ev)-2.5 G(Pri).25 E -.25(va)-.25 G
(tes \214eld which need to be trans-).25 E
(ferred to the destination GC.)72 408 Q(pGC->funcs->Destro)97 432 Q
(yGC\(pGC\))-.1 E(GCPtr pGC;)122 444 Q
(This routine is called before the GC is destro)72 468 Q
(yed for the entity interested in this GC to clean up after itself.)-.1
E(This routine is responsible for freeing an)72 480 Q 2.5(ya)-.15 G
(uxiliary storage allocated.)-2.5 E/F1 10/Times-Bold@0 SF 2.5(5.4.3. GC)
72 516 R(Clip Region Routines)2.5 E F0
(The GC clientClip \214eld requires three procedures to manage it.)72
531.6 Q(These procedures are in the GC funcs v)5 E(ec-)-.15 E(tor)72
543.6 Q 5(.T)-.55 G(he underlying principle is that dix kno)-5 E
(ws nothing about the internals of the clipping information,)-.25 E(\(e)
72 555.6 Q
(xcept when it has come from the client\), and so calls ddX whene)-.15 E
-.15(ve)-.25 G 2.5(ri).15 G 2.5(tn)-2.5 G(eeds to cop)-2.5 E 1.3 -.65
(y, s)-.1 H(et, or destro).65 E 2.5(ys)-.1 G(uch)-2.5 E 2.5
(information. It)72 567.6 R(could ha)2.5 E .3 -.15(ve b)-.2 H
(een possible for dix not to allo).15 E 2.5(wd)-.25 G
(dX to touch the \214eld in the GC, and require)-2.5 E(it to k)72 579.6
Q(eep its o)-.1 E(wn cop)-.25 E 2.5(yi)-.1 G 2.5(nd)-2.5 G -.25(ev)-2.5
G(Pri).25 E 1.3 -.65(v, b)-.25 H(ut since clip masks can be v).45 E
(ery lar)-.15 E(ge, this seems lik)-.18 E 2.5(eab)-.1 G(ad idea.)-2.5 E
(Thus,)5 E(the serv)72 591.6 Q(er allo)-.15 E(ws ddX to do whate)-.25 E
-.15(ve)-.25 G 2.5(ri).15 G 2.5(tw)-2.5 G
(ants to the clientClip \214eld of the GC, b)-2.6 E
(ut requires it to do all)-.2 E(manipulation itself.)72 603.6 Q -.2(vo)
97 627.6 S(id pGC->funcs->ChangeClip\(pGC, type, pV).2 E(alue, nrects\))
-1.11 E(GCPtr pGC;)122 639.6 Q(int type;)122 651.6 Q(char *pV)122 663.6
Q(alue;)-1.11 E(int nrects;)122 675.6 Q(This routine is called whene)72
699.6 Q -.15(ve)-.25 G 2.5(rt).15 G
(he client changes the client clip re)-2.5 E 2.5(gion. The)-.15 F
(pGC points to the GC)2.5 E(in)72 711.6 Q -.2(vo)-.4 G(lv).2 E
(ed, the type tells what form the re)-.15 E(gion has been sent in.)-.15
E(If type is CT_NONE, then there is no client)5 E 2.5(clip. If)72 723.6
R(type is CT_UNSOR)2.5 E(TED, CT_YB)-.6 E(ANDED or CT_YXB)-.35 E
(ANDED, then pV)-.35 E(alue pointer to a list of)-1.11 E
(Porting Layer De\214nition)72 768 Q 2.5(-4)106.84 G 144.06 2.5(6- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 47 47
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(rectangles, nrects long.)72 84 Q
(If type is CT_REGION, then pV)5 E(alue pointer to a Re)-1.11 E
(gionRec from the mi re)-.15 E(gion)-.15 E 2.5(code. If)72 96 R
(type is CT_PIXMAP pV)2.5 E(alue is a pointer to a pixmap.)-1.11 E
(\(The de\214nes for CT_NONE, etc. are in)5 E(Xserv)72 108 Q 2.5
(er/include/gc.h.\) This)-.15 F
(routine is responsible for incrementing an)2.5 E 2.5(yn)-.15 G
(ecessary reference counts \(e.g. for)-2.5 E 2.5(ap)72 120 S
(ixmap clip mask\) for the ne)-2.5 E 2.5(wc)-.25 G
(lipmask and freeing an)-2.5 E(ything that used to be in the GC')-.15 E
2.5(sc)-.55 G(lipMask \214eld.)-2.5 E
(The lists of rectangles passed in can be freed with Xfree\(\), the re)
72 132 Q(gions can be destro)-.15 E(yed with the Re)-.1 E(gionDe-)-.15 E
(stro)72 144 Q 2.5<798c>-.1 G
(eld in the screen, and pixmaps can be destro)-2.5 E
(yed by calling the screen')-.1 E 2.5(sD)-.55 G(estro)-2.5 E
(yPixmap function.)-.1 E(DIX and MI code e)72 156 Q(xpect what the)-.15
E 2.5(yp)-.15 G
(ass in to this to be freed or otherwise inaccessible, and will ne)-2.5
E -.15(ve)-.25 G 2.5(rl).15 G(ook)-2.5 E(inside what')72 168 Q 2.5(sb)
-.55 G(een put in the GC.)-2.5 E(This is a good place to be w)5 E
(ary of storage leaks.)-.1 E(In the sample serv)72 183.6 Q(er)-.15 E 2.5
(,t)-.4 G(his routine transforms either the bitmap or the rectangle lis\
t into a re)-2.5 E(gion, so that)-.15 E(future routines will ha)72 195.6
Q .3 -.15(ve a m)-.2 H(ore predictable starting point to w).15 E
(ork from.)-.1 E(\(The v)5 E(alidate routine must tak)-.25 E(e)-.1 E
(this client clip re)72 207.6 Q(gion and mer)-.15 E(ge it with other re)
-.18 E(gions to arri)-.15 E .3 -.15(ve a)-.25 H 2.5(tac).15 G
(omposite clip re)-2.5 E(gion before an)-.15 E 2.5(yd)-.15 G(ra)-2.5 E
(w-)-.15 E(ing is done.\))72 219.6 Q -.2(vo)97 243.6 S
(id pGC->funcs->Destro).2 E(yClip\(pGC\))-.1 E(GCPtr pGC;)122 255.6 Q
(This routine is called whene)72 279.6 Q -.15(ve)-.25 G 2.5(rt).15 G
(he client clip re)-2.5 E(gion must be destro)-.15 E 2.5(yed. The)-.1 F
(pGC points to the GC)2.5 E(in)72 291.6 Q -.2(vo)-.4 G(lv).2 E 2.5
(ed. This)-.15 F(call should set the clipT)2.5 E
(ype \214eld of the GC to CT_NONE.)-.8 E(In the sample serv)5 E(er)-.15
E 2.5(,t)-.4 G(he pointer)-2.5 E(to the client clip re)72 303.6 Q
(gion is set to NULL by this routine after destro)-.15 E(ying the re)-.1
E(gion, so that other softw)-.15 E(are)-.1 E
(\(including ChangeClip\(\) abo)72 315.6 Q -.15(ve)-.15 G 2.5(\)w).15 G
(ill recognize that there is no client clip re)-2.5 E(gion.)-.15 E -.2
(vo)97 339.6 S(id pGC->funcs->Cop).2 E(yClip\(pgcDst, pgcSrc\))-.1 E
(GCPtr pgcDst, pgcSrc;)122 351.6 Q(This routine mak)72 375.6 Q(es a cop)
-.1 E 2.5(yo)-.1 G 2.5(ft)-2.5 G(he clipMask and clipT)-2.5 E
(ype from pgcSrc into pgcDst.)-.8 E(It is responsible for)5 E(destro)72
387.6 Q(ying an)-.1 E 2.5(yp)-.15 G(re)-2.5 E(vious clipMask in pgcDst.)
-.25 E(The clip mask in the source can be the same as the clip mask)5 E
(in the dst \(clients do the strangest things\), so care must be tak)72
399.6 Q(en when destro)-.1 E(ying things.)-.1 E(This call is)5 E
(required because dix does not kno)72 411.6 Q 2.5(wh)-.25 G .5 -.25
(ow t)-2.5 H 2.5(oc).25 G(op)-2.5 E 2.5(yt)-.1 G
(he clip mask from pgcSrc.)-2.5 E/F1 10/Times-Bold@0 SF 2.5
(5.5. Drawing)72 447.6 R(Primiti)2.5 E -.1(ve)-.1 G(s).1 E F0(The X pro\
tocol \(rules for the byte stream that goes between client and serv)72
463.2 Q(er\) does all graphics using primi-)-.15 E(ti)72 475.2 Q .3 -.15
(ve o)-.25 H(perations, which are called Dra).15 E(wing Primiti)-.15 E
-.15(ve)-.25 G 2.5(s. These).15 F(include line dra)2.5 E
(wing, area \214lling, arcs, and te)-.15 E(xt)-.15 E(dra)72 487.2 Q 2.5
(wing. Y)-.15 F(our implementation must supply 16 routines to perform t\
hese on your hardw)-1.1 E 2.5(are. \(The)-.1 F(number)2.5 E
(16 is arbitrary)72 499.2 Q(.\))-.65 E(More speci\214cally)72 523.2 Q
2.5(,1)-.65 G 2.5(6p)-2.5 G(rocedure pointers are in each GC op v)-2.5 E
(ector)-.15 E 5(.A)-.55 G 2.5(ta)-5 G .3 -.15(ny g)-2.5 H -2.15 -.25
(iv e).15 H 2.5(nt).25 G(ime, ALL of them MUST)-2.5 E(point to a v)72
535.2 Q(alid procedure that attempts to do the operation assigned, alth\
ough the procedure pointers may)-.25 E(change and may point to dif)72
547.2 Q(ferent procedures to carry out the same operation.)-.25 E 2.5
(As)5 G(imple serv)-2.5 E(er will lea)-.15 E -.15(ve)-.2 G(them all poi\
nting to the same 16 routines, while a more optimized implementation wi\
ll switch each from)72 559.2 Q(one procedure to another)72 571.2 Q 2.5
(,d)-.4 G(epending upon what is most optimal for the current GC and dra)
-2.5 E -.1(wa)-.15 G(ble.).1 E(The sample serv)72 595.2 Q(er contains a\
 considerable chunk of code called the mi \(machine independent\) routi\
nes,)-.15 E(which serv)72 607.2 Q 2.5(ea)-.15 G 2.5(sd)-2.5 G(ra)-2.5 E
(wing primiti)-.15 E .3 -.15(ve r)-.25 H 2.5(outines. Man).15 F 2.5(ys)
-.15 G(erv)-2.5 E(er implementations will be able to use these as-is,)
-.15 E(because the)72 619.2 Q 2.5(yw)-.15 G(ork for arbitrary depths.)
-2.6 E(The)5 E 2.5(ym)-.15 G(ak)-2.5 E 2.5(en)-.1 G 2.5(oa)-2.5 G
(ssumptions about the formats of pixmaps and)-2.5 E(frame b)72 631.2 Q
(uf)-.2 E(fers, since the)-.25 E 2.5(yc)-.15 G
(all a set of routines kno)-2.5 E(wn as the "Pixblit Routines" \(see ne)
-.25 E(xt section\).)-.15 E(The)5 E 2.5(yd)-.15 G(o)-2.5 E
(assume that the w)72 643.2 Q(ay to dra)-.1 E 2.5(wi)-.15 G 2.5(st)-2.5
G(hrough these lo)-2.5 E(w-le)-.25 E -.15(ve)-.25 G 2.5(lr).15 G
(outines that apply pix)-2.5 E(el v)-.15 E(alues ro)-.25 E
(ws at a time.)-.25 E(If)5 E(your hardw)72 655.2 Q(are or \214rmw)-.1 E
(are gi)-.1 E -.15(ve)-.25 G 2.5(sm).15 G
(ore performance when things are done dif)-2.5 E(ferently)-.25 E 2.5(,y)
-.65 G(ou will w)-2.5 E(ant to tak)-.1 E(e)-.1 E(this f)72 667.2 Q
(act into account and re)-.1 E(write some or all of the dra)-.25 E
(wing primiti)-.15 E -.15(ve)-.25 G 2.5(st).15 G 2.5<6f8c>-2.5 G 2.5(ty)
-2.5 G(our needs.)-2.5 E F1 2.5(5.5.1. GC)72 703.2 R(Components)2.5 E F0
(This section describes the \214elds in the GC that af)72 718.8 Q
(fect each dra)-.25 E(wing primiti)-.15 E -.15(ve)-.25 G 5(.T).15 G
(he only primiti)-5 E .3 -.15(ve t)-.25 H(hat is not).15 E(af)72 730.8 Q
(fected is GetImage, which does not use a GC because its destination is\
 a protocol-style bit image.)-.25 E(Since)5 E
(Porting Layer De\214nition)72 768 Q 2.5(-4)106.84 G 144.06 2.5(7- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 48 48
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(each dra)72 84 Q(wing primiti)-.15 E .3 -.15
(ve m)-.25 H(irrors e).15 E(xactly the X protocol request of the same n\
ame, you should refer to the X)-.15 E
(protocol speci\214cation document for more details.)72 96 Q
(ALL of these routines MUST CLIP to the appropriate re)72 120 Q
(gions in the dra)-.15 E -.1(wa)-.15 G 2.5(ble. Since).1 F
(there are man)2.5 E(y)-.15 E(re)72 132 Q
(gions to clip to simultaneously)-.15 E 2.5(,y)-.65 G(our V)-2.5 E
(alidateGC routine should combine these into a uni\214ed clip re)-1.11 E
(gion)-.15 E(to which your dra)72 144 Q(wing routines can quickly refer)
-.15 E 5(.T)-.55 G(his is e)-5 E
(xactly what the cfb and mfb routines supplied)-.15 E
(with the sample serv)72 156 Q(er do.)-.15 E
(The mi implementation passes responsibility for clipping while dra)5 E
(wing do)-.15 E(wn)-.25 E(to the Pixblit routines.)72 168 Q
(Also, all of them must adhere to the current plane mask.)72 192 Q
(The plane mask has one bit for e)5 E -.15(ve)-.25 G(ry bit plane in).15
E(the dra)72 204 Q -.1(wa)-.15 G
(ble; only planes with 1 bits in the mask are af).1 E(fected by an)-.25
E 2.5(yd)-.15 G(ra)-2.5 E(wing operation.)-.15 E(All functions e)72 228
Q(xcept for ImageT)-.15 E -.15(ex)-.7 G 2.5(tc).15 G(alls must obe)-2.5
E 2.5(yt)-.15 G(he alu function.)-2.5 E(This is usually Cop)5 E 1.3 -.65
(y, b)-.1 H(ut could be an).45 E(y)-.15 E(of the allo)72 240 Q -.1(wa)
-.25 G(ble 16 raster).1 E(-ops.)-.2 E(All of the functions, e)72 264 Q
(xcept for Cop)-.15 E(yArea, might use the current fore)-.1 E
(ground and background pix)-.15 E(el v)-.15 E(alues.)-.25 E(Each pix)72
276 Q(el v)-.15 E(alue is 32 bits.)-.25 E(These correspond to fore)5 E
(ground and background colors, b)-.15 E(ut you ha)-.2 E .3 -.15(ve t)-.2
H 2.5(or).15 G(un)-2.5 E
(them through the colormap to \214nd out what color the pix)72 288 Q
(el v)-.15 E(alues represent.)-.25 E(Do not w)5 E(orry about the color)
-.1 E(,)-.4 E(just apply the pix)72 300 Q(el v)-.15 E(alue.)-.25 E
(The routines that dra)72 324 Q 2.5(wl)-.15 G(ines \(PolyLine, PolySe)
-2.5 E(gment, PolyRect, and PolyArc\) use the line width, line style,)
-.15 E(cap style, and join style.)72 336 Q(Line width is in pix)5 E 2.5
(els. The)-.15 F
(line style speci\214es whether it is solid or dashed, and)2.5 E
(what kind of dash.)72 348 Q
(The cap style speci\214es whether Rounded, Butt, etc.)5 E
(The join style speci\214es whether)5 E
(joins between joined lines are Miter)72 360 Q 2.5(,R)-.4 G(ound or Be)
-2.5 E -.15(ve)-.25 G 2.5(led. When).15 F
(lines cross as part of the same polyline, the)2.5 E(y)-.15 E
(are assumed to be dra)72 372 Q(wn once.)-.15 E
(\(See the X protocol speci\214cation for more details.\))5 E
(Zero-width lines are NO)72 396 Q 2.5(Tm)-.4 G
(eant to be really zero width; this is the client')-2.5 E 2.5(sw)-.55 G
(ay of telling you that you can)-2.6 E(optimize line dra)72 408 Q
(wing with little re)-.15 E -.05(ga)-.15 G
(rd to the end caps and joins.).05 E(The)5 E 2.5(ya)-.15 G
(re called "thin" lines and are)-2.5 E(meant to be one pix)72 420 Q
(el wide.)-.15 E(These are frequently done in hardw)5 E
(are or in a streamlined assembly language)-.1 E(routine.)72 432 Q
(Lines with widths greater than zero, though, must all be dra)72 456 Q
(wn with the same algorithm, because client)-.15 E(softw)72 468 Q
(are assumes that e)-.1 E -.15(ve)-.25 G(ry jag on e).15 E -.15(ve)-.25
G(ry line at an angle will come at the same place.).15 E -1 -.8(Tw o)5 H
(lines that)3.3 E(should ha)72 480 Q .3 -.15(ve o)-.2 H(ne pix).15 E(el\
 in the space between them \(because of their distance apart and their \
widths\) should)-.15 E(ha)72 492 Q .3 -.15(ve s)-.2 H(uch a one-pix).15
E(el line of space between them if dra)-.15 E(wn, re)-.15 E -.05(ga)-.15
G(rdless of angle.).05 E(The solid area \214ll routines \(FillPolygon, \
PolyFillRect, PolyFillArc\) all use the \214ll rule, which speci\214es \
sub-)72 516 Q(tle interpretations of what points are inside and what ar\
e outside of a gi)72 528 Q -.15(ve)-.25 G 2.5(np).15 G 2.5(olygon. The)
-2.5 F(PolyFillArc rou-)2.5 E(tine also uses the arc mode, which speci\
\214es whether to \214ll pie se)72 540 Q
(gments or single-edge slices of an ellipse.)-.15 E(The line dra)72 564
Q(wing, area \214ll, and PolyT)-.15 E -.15(ex)-.7 G 2.5(tr).15 G
(outines must all apply the correct "\214ll style.")-2.5 E
(This can be either a)5 E(solid fore)72 576 Q(ground color)-.15 E 2.5
(,at)-.4 G(ransparent stipple, an opaque stipple, or a tile.)-2.5 E
(Stipples are bitmaps where the 1)5 E(bits represent that the fore)72
588 Q(ground color is written, and 0 bits represent that either the pix)
-.15 E(el is left alone)-.15 E
(\(transparent\) or that the background color is written \(opaque\).)72
600 Q 2.5(At)5 G(ile is a pixmap of the full depth of the)-2.5 E
(GC that is applied in its full glory to all areas.)72 612 Q
(The stipple and tile patterns can be an)5 E 2.5(yr)-.15 G
(ectangular size,)-2.5 E(although some implementations will be f)72 624
Q(aster for certain sizes such as 8x8 or 32x32.)-.1 E
(The mi implementa-)5 E(tion passes this responsibility do)72 636 Q
(wn to the Pixblit routines.)-.25 E
(See the X protocol document for full details.)72 660 Q
(The description of the CreateGC request has a v)5 E(ery good,)-.15 E
(detailed description of these attrib)72 672 Q(utes.)-.2 E
(Porting Layer De\214nition)72 768 Q 2.5(-4)106.84 G 144.06 2.5(8- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 49 49
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF 2.5(5.5.2. The)72 84 R(Primiti)2.5 E -.1(ve)-.1 G
(s).1 E/F1 10/Times-Roman@0 SF(The Dra)72 99.6 Q(wing Primiti)-.15 E
-.15(ve)-.25 G 2.5(sa).15 G(re as follo)-2.5 E(ws:)-.25 E(Re)97 135.6 Q
(gionPtr pGC->ops->Cop)-.15 E(yArea\(src, dst, pGC, srcx, src)-.1 E 1.3
-.65(y, w, h)-.15 H 2.5(,d).65 G(stx, dsty\))-2.5 E(Dra)122 147.6 Q -.1
(wa)-.15 G(blePtr dst, src;).1 E(GCPtr pGC;)122 159.6 Q(int srcx, src)
122 171.6 Q 1.3 -.65(y, w, h)-.15 H 2.5(,d).65 G(stx, dsty;)-2.5 E(Cop)
72 195.6 Q(yArea copies a rectangle of pix)-.1 E(els from one dra)-.15 E
-.1(wa)-.15 G(ble to another of the same depth.).1 E 1.6 -.8(To e)5 H
-.25(ff).8 G(ect scrolling,).25 E(this must be able to cop)72 207.6 Q
2.5(yf)-.1 G(rom an)-2.5 E 2.5(yd)-.15 G(ra)-2.5 E -.1(wa)-.15 G
(ble to itself, o).1 E -.15(ve)-.15 G 2.5(rlapped. No).15 F
(squeezing or stretching is done)2.5 E
(because the source and destination are the same size.)72 219.6 Q(Ho)5 E
(we)-.25 E -.15(ve)-.25 G .8 -.4(r, e).15 H -.15(ve).15 G
(rything is still clipped to the clip).15 E(re)72 231.6 Q
(gions of the destination dra)-.15 E -.1(wa)-.15 G(ble.).1 E
(If pGC->graphicsExposures is T)72 255.6 Q(rue, an)-.35 E 2.5(yp)-.15 G
(ortions of the destination which were not v)-2.5 E(alid in the source)
-.25 E(\(either occluded by co)72 267.6 Q -.15(ve)-.15 G(ring windo).15
E(ws, or outside the bounds of the dra)-.25 E -.1(wa)-.15 G
(ble\) should be collected together).1 E(and returned as a re)72 279.6 Q
(gion \(if this resultant re)-.15 E(gion is empty)-.15 E 2.5(,N)-.65 G
(ULL can be returned instead\).)-2.5 E(Furthermore, the)5 E(in)72 291.6
Q -.25(va)-.4 G(lid bits of the source are not copied to the destinatio\
n and \(when the destination is a windo).25 E(w\) are \214lled)-.25 E
(with the background tile.)72 303.6 Q(The sample routine miHandleExposu\
res generates the appropriate return v)5 E(alue)-.25 E
(and \214lls the in)72 315.6 Q -.25(va)-.4 G(lid area using pScreen->P)
.25 E(aintW)-.15 E(indo)-.4 E(wBackground.)-.25 E -.15(Fo)72 339.6 S 2.5
(ri).15 G(nstance, imagine a windo)-2.5 E 2.5(wt)-.25 G
(hat is partially obscured by other windo)-2.5 E(ws in front of it.)-.25
E(As te)5 E(xt is)-.15 E(scrolled on your windo)72 351.6 Q 1.3 -.65
(w, t)-.25 H(he pix).65 E
(els that are scrolled out from under obscuring windo)-.15 E
(ws will not be a)-.25 E -.25(va)-.2 G(il-).25 E
(able on the screen to cop)72 363.6 Q 2.5(yt)-.1 G 2.5(ot)-2.5 G
(he right places, and so an e)-2.5 E(xposure e)-.15 E -.15(ve)-.25 G
(nt must be sent for the client to cor).15 E(-)-.2 E
(rectly repaint them.)72 375.6 Q(Of course, if you implement some sort \
of backing store, you could do this without)5 E(resorting to e)72 387.6
Q(xposure e)-.15 E -.15(ve)-.25 G(nts.).15 E(An e)72 411.6 Q
(xample implementation is mfbCop)-.15 E(yArea\(\) in Xserv)-.1 E
(er/mfb/mfbbitblt.c.)-.15 E(Re)97 435.6 Q(gionPtr pGC->ops->Cop)-.15 E
(yPlane\(src, dst, pGC, srcx, src)-.1 E 1.3 -.65(y, w, h)-.15 H 2.5(,d)
.65 G(stx, dsty)-2.5 E 2.5(,p)-.65 G(lane\))-2.5 E(Dra)122 447.6 Q -.1
(wa)-.15 G(blePtr dst, src;).1 E(GCPtr pGC;)122 459.6 Q(int srcx, src)
122 471.6 Q 1.3 -.65(y, w, h)-.15 H 2.5(,d).65 G(stx, dsty;)-2.5 E
(unsigned long plane;)122 483.6 Q(Cop)72 507.6 Q(yPlane must cop)-.1 E
2.5(yo)-.1 G(ne plane of a rectangle from the source dra)-2.5 E -.1(wa)
-.15 G(ble onto the destination dra).1 E -.1(wa)-.15 G(ble.).1 E
(Because this routine only copies one bit out of each pix)72 519.6 Q
(el, it can cop)-.15 E 2.5(yb)-.1 G(etween dra)-2.5 E -.1(wa)-.15 G
(bles of dif).1 E(ferent)-.25 E 2.5(depths. This)72 531.6 R
(is the only w)2.5 E(ay of cop)-.1 E(ying between dra)-.1 E -.1(wa)-.15
G(bles of dif).1 E(ferent depths, e)-.25 E(xcept for cop)-.15 E
(ying bitmaps)-.1 E(to pixmaps and applying fore)72 543.6 Q
(ground and background colors to it.)-.15 E(All other conditions of Cop)
5 E(yArea apply)-.1 E(to Cop)72 555.6 Q(yPlane too.)-.1 E(An e)72 579.6
Q(xample implementation is mfbCop)-.15 E(yPlane\(\) in Xserv)-.1 E
(er/mfb/mfbbitblt.c.)-.15 E -.2(vo)97 603.6 S
(id pGC->ops->PolyPoint\(dst, pGC, mode, n, pPoint\)).2 E(Dra)122 615.6
Q -.1(wa)-.15 G(blePtr dst;).1 E(GCPtr pGC;)122 627.6 Q(int mode;)122
639.6 Q(int n;)122 651.6 Q(DDXPointPtr pPoint;)122 663.6 Q
(PolyPoint dra)72 687.6 Q(ws a set of one-pix)-.15 E(el dots \(fore)-.15
E(ground color\) at the locations gi)-.15 E -.15(ve)-.25 G 2.5(ni).15 G
2.5(nt)-2.5 G(he array)-2.5 E 5(.m)-.65 G(ode is one)-5 E
(of the de\214ned constants Origin \(absolute coordinates\) or Pre)72
699.6 Q(vious \(each coordinate is relati)-.25 E .3 -.15(ve t)-.25 H 2.5
(ot).15 G(he last\).)-2.5 E
(Note that this does not use the background color or an)72 711.6 Q 2.5
(yt)-.15 G(iles or stipples.)-2.5 E(Porting Layer De\214nition)72 768 Q
2.5(-4)106.84 G 144.06 2.5(9- A)-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 50 50
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF
(Example implementations are mfbPolyPoint\(\) in Xserv)72 84 Q
(er/mfb/mfbpolypnt.c and miPolyPoint in)-.15 E(Xserv)72 96 Q
(er/mi/mipolypnt.c.)-.15 E -.2(vo)97 120 S
(id pGC->ops->Polylines\(dst, pGC, mode, n, pPoint\)).2 E(Dra)122 132 Q
-.1(wa)-.15 G(blePtr dst;).1 E(GCPtr pGC;)122 144 Q(int mode;)122 156 Q
(int n;)122 168 Q(DDXPointPtr pPoint;)122 180 Q
(Similar to PolyPoint, Polylines dra)72 204 Q
(ws lines between the locations gi)-.15 E -.15(ve)-.25 G 2.5(ni).15 G
2.5(nt)-2.5 G(he array)-2.5 E 5(.Z)-.65 G(ero-width lines are)-5 E(NO)72
216 Q 2.5(Tm)-.4 G(eant to be really zero width; this is the client')
-2.5 E 2.5(sw)-.55 G(ay of telling you that you can maximally optimize)
-2.6 E(line dra)72 228 Q(wing with little re)-.15 E -.05(ga)-.15 G
(rd to the end caps and joins.).05 E
(mode is one of the de\214ned constants Pre)5 E(vious or)-.25 E
(Origin, depending upon whether the points are each relati)72 240 Q .3
-.15(ve t)-.25 H 2.5(ot).15 G(he last or are absolute.)-2.5 E
(Example implementations are miW)72 264 Q(ideLine\(\) and miW)-.4 E
(ideDash\(\) in mi/miwideline.c and miZeroLine\(\) in)-.4 E
(mi/mizerline.c.)72 276 Q -.2(vo)97 300 S(id pGC->ops->PolySe).2 E
(gment\(dst, pGC, n, pPoint\))-.15 E(Dra)122 312 Q -.1(wa)-.15 G
(blePtr dst;).1 E(GCPtr pGC;)122 324 Q(int n;)122 336 Q(xSe)122 348 Q
(gment *pSe)-.15 E(gments;)-.15 E(PolySe)72 372 Q(gments dra)-.15 E(ws \
unconnected lines between pairs of points in the array; the array must \
be of e)-.15 E -.15(ve)-.25 G 2.5(ns).15 G(ize;)-2.5 E
(no interconnecting lines are dra)72 384 Q(wn.)-.15 E(An e)72 408 Q
(xample implementation is miPolySe)-.15 E(gment\(\) in mipolyse)-.15 E
(g.c.)-.15 E -.2(vo)97 432 S
(id pGC->ops->PolyRectangle\(dst, pGC, n, pRect\)).2 E(Dra)122 444 Q -.1
(wa)-.15 G(blePtr dst;).1 E(GCPtr pGC;)122 456 Q(int n;)122 468 Q
(xRectangle *pRect;)122 480 Q(PolyRectangle dra)72 504 Q
(ws outlines of rectangles for each rectangle in the array)-.15 E(.)-.65
E(An e)72 528 Q(xample implementation is miPolyRectangle\(\) in Xserv)
-.15 E(er/mi/mipolyrect.c.)-.15 E -.2(vo)97 552 S
(id pGC->ops->PolyArc\(dst, pGC, n, pArc\)).2 E(Dra)122 564 Q -.1(wa)
-.15 G(blePtr dst;).1 E(GCPtr pGC;)122 576 Q(int n;)122 588 Q
(xArc*pArc;)122 600 Q(PolyArc dra)72 624 Q
(ws connected conic arcs according to the descriptions in the array)-.15
E 5(.S)-.65 G(ee the protocol speci\214ca-)-5 E(tion for more details.)
72 636 Q(Example implementations are miZeroPolyArc in Xserv)72 660 Q
(er/mi/mizerarc. and miPolyArc\(\) in)-.15 E(Xserv)72 672 Q
(er/mi/miarc.c.)-.15 E -.2(vo)97 696 S
(id pGC->ops->FillPolygon\(dst, pGC, shape, mode, count, pPoint\)).2 E
(Dra)122 708 Q -.1(wa)-.15 G(blePtr dst;).1 E(GCPtr pGC;)122 720 Q
(Porting Layer De\214nition)72 768 Q 2.5(-5)106.84 G 144.06 2.5(0- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 51 51
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(int shape;)122 84 Q(int mode;)122 96 Q
(int count;)122 108 Q(DDXPointPtr pPoint;)122 120 Q(FillPolygon \214lls\
 a polygon speci\214ed by the points in the array with the appropriate \
\214ll style.)72 144 Q(If necessary)5 E(,)-.65 E(an e)72 156 Q
(xtra border line is assumed between the starting and ending lines.)-.15
E(The shape can be used as a hint to)5 E
(optimize \214lling; it indicates whether it is con)72 168 Q .3 -.15
(vex \()-.4 H(all interior angles less than 180\), noncon).15 E .3 -.15
(vex \()-.4 H(some inte-).15 E(rior angles greater than 180 b)72 180 Q
(ut border does not cross itself\), or comple)-.2 E 2.5(x\()-.15 G
(border crosses itself\).)-2.5 E -1.1(Yo)5 G 2.5(uc)1.1 G(an)-2.5 E
(choose appropriate algorithms or hardw)72 192 Q(are based upon mode.)
-.1 E(mode is one of the de\214ned constants Pre)5 E(vi-)-.25 E
(ous or Origin, depending upon whether the points are each relati)72 204
Q .3 -.15(ve t)-.25 H 2.5(ot).15 G(he last or are absolute.)-2.5 E(An e)
72 228 Q(xample implementation is miFillPolygon\(\) in Xserv)-.15 E
(er/mi/mipoly)-.15 E(.c.)-.65 E -.2(vo)97 252 S
(id pGC->ops->PolyFillRect\(dst, pGC, n, pRect\)).2 E(Dra)122 264 Q -.1
(wa)-.15 G(blePtr dst;).1 E(GCPtr pGC;)122 276 Q(int n;)122 288 Q
(xRectangle *pRect;)122 300 Q(PolyFillRect \214lls multiple rectangles.)
72 324 Q(Example implementations are mfbPolyFillRect\(\) in Xserv)72 348
Q(er/mfb/mfb\214llrct.c and miPolyFillRect\(\) in)-.15 E(Xserv)72 360 Q
(er/mi/mi\214llrct.c.)-.15 E -.2(vo)97 384 S
(id pGC->ops->PolyFillArc\(dst, pGC, n, pArc\)).2 E(Dra)122 396 Q -.1
(wa)-.15 G(blePtr dst;).1 E(GCPtr pGC;)122 408 Q(int n;)122 420 Q
(xArc *pArc;)122 432 Q(PolyFillArc \214lls a shape for each arc in the \
list that is bounded by the arc and one or tw)72 456 Q 2.5(ol)-.1 G
(ine se)-2.5 E(gments with)-.15 E(the current \214ll style.)72 468 Q
(An e)72 492 Q(xample implementation is miPolyFillArc\(\) in Xserv)-.15
E(er/mi/mi\214llarc.c.)-.15 E -.2(vo)97 516 S
(id pGC->ops->PutImage\(dst, pGC, depth, x, y).2 E 2.5(,w)-.65 G 2.5(,h)
-3.15 G 2.5(,l)-2.5 G(eftP)-2.5 E(ad, format, pBinImage\))-.15 E(Dra)122
528 Q -.1(wa)-.15 G(blePtr dst;).1 E(GCPtr pGC;)122 540 Q(int x, y)122
552 Q 2.5(,w)-.65 G 2.5(,h)-3.15 G(;)-2.5 E(int format;)122 564 Q
(char *pBinImage;)122 576 Q(PutImage copies a pixmap image into the dra)
72 600 Q -.1(wa)-.15 G 2.5(ble. The).1 F
(pixmap image must be in X protocol format)2.5 E
(\(either Bitmap, XYPixmap, or ZPixmap\), and format tells the format.)
72 612 Q(\(See the X protocol speci\214cation for)5 E
(details on these formats\).)72 624 Q -1.1(Yo)5 G 2.5(um)1.1 G(ust be a\
ble to accept all three formats, because the client gets to decide)-2.5
E(which format to send.)72 636 Q(Either the dra)5 E -.1(wa)-.15 G
(ble and the pixmap image ha).1 E .3 -.15(ve t)-.2 H
(he same depth, or the source).15 E(pixmap image must be a Bitmap.)72
648 Q(If a Bitmap, the fore)5 E
(ground and background colors will be applied to the)-.15 E
(destination.)72 660 Q(An e)72 684 Q
(xample implementation is miPutImage\(\) in Xserv)-.15 E
(er/mfb/mibitblt.c.)-.15 E -.2(vo)97 708 S
(id pScreen->GetImage\(src, x, y).2 E 2.5(,w)-.65 G 2.5(,h)-3.15 G 2.5
(,f)-2.5 G(ormat, planeMask, pBinImage\))-2.5 E(Dra)124.5 720 Q -.1(wa)
-.15 G(blePtr src;).1 E(Porting Layer De\214nition)72 768 Q 2.5(-5)
106.84 G 144.06 2.5(1- A)-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 52 52
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(int x, y)124.5 84 Q 2.5(,w)-.65 G 2.5(,h)-3.15 G
(;)-2.5 E(unsigned int format;)124.5 96 Q(unsigned long planeMask;)124.5
108 Q(char *pBinImage;)124.5 120 Q
(GetImage copies the bits from the source dra)72 144 Q -.1(wa)-.15 G
(ble into the destination pointer).1 E 5(.T)-.55 G
(he bits are written into the)-5 E -.2(bu)72 156 S -.25(ff).2 G
(er according to the serv).25 E(er)-.15 E
(-de\214ned pixmap padding rules.)-.2 E
(pBinImage is guaranteed to be big enough to)5 E
(hold all the bits that must be written.)72 168 Q
(This routine does not correspond e)72 192 Q
(xactly to the X protocol GetImage request, since DIX has to break the)
-.15 E(reply up into b)72 204 Q(uf)-.2 E
(fers of a size requested by the transport layer)-.25 E 5(.I)-.55 G 2.5
(ff)-5 G(ormat is ZPixmap, the bits are written in)-2.5 E(the ZF)72 216
Q(ormat for the depth of the dra)-.15 E -.1(wa)-.15 G(ble; if there is \
a 0 bit in the planeMask for a particular plane, all pix-).1 E
(els must ha)72 228 Q .3 -.15(ve t)-.2 H
(he bit in that plane equal to 0.).15 E
(If format is XYPixmap, planemask is guaranteed to ha)5 E .3 -.15(ve a)
-.2 H(single bit set; the bits should be written in Bitmap format, whic\
h is the format for a single plane of an XYP-)72 240 Q(ixmap.)72 252 Q
(An e)72 276 Q(xample implementation is miGetImage\(\) in Xserv)-.15 E
(er/mi/mibitblt.c.)-.15 E -.2(vo)97 300 S(id pGC->ops->ImageT).2 E -.15
(ex)-.7 G(t8\(pDra).15 E 1.3 -.65(w, p)-.15 H(GC, x, y).65 E 2.5(,c)-.65
G(ount, chars\))-2.5 E(Dra)122 312 Q -.1(wa)-.15 G(blePtr pDra).1 E(w;)
-.15 E(GCPtr pGC;)122 324 Q(int x, y;)122 336 Q(int count;)122 348 Q
(char *chars;)122 360 Q(ImageT)72 384 Q -.15(ex)-.7 G(t8 dra).15 E
(ws te)-.15 E 2.5(xt. The)-.15 F(te)2.5 E(xt is dra)-.15 E
(wn in the fore)-.15 E
(ground color; the background color \214lls the remainder)-.15 E
(of the character rectangles.)72 396 Q
(The coordinates specify the baseline and start of the te)5 E(xt.)-.15 E
(An e)72 420 Q(xample implementation is miImageT)-.15 E -.15(ex)-.7 G
(t8\(\) in Xserv).15 E(er/mi/mipolyte)-.15 E(xt.c.)-.15 E
(int pGC->ops->PolyT)97 444 Q -.15(ex)-.7 G(t8\(pDra).15 E 1.3 -.65
(w, p)-.15 H(GC, x, y).65 E 2.5(,c)-.65 G(ount, chars\))-2.5 E(Dra)122
456 Q -.1(wa)-.15 G(blePtr pDra).1 E(w;)-.15 E(GCPtr pGC;)122 468 Q
(int x, y;)122 480 Q(int count;)122 492 Q(char *chars;)122 504 Q(PolyT)
72 528 Q -.15(ex)-.7 G(t8 w).15 E(orks lik)-.1 E 2.5(eI)-.1 G(mageT)-2.5
E -.15(ex)-.7 G(t8, e).15 E(xcept it dra)-.15 E
(ws with the current \214ll style for special ef)-.15 E(fects such as)
-.25 E(shaded te)72 540 Q 2.5(xt. See)-.15 F
(the X protocol speci\214cation for more details.)2.5 E(An e)72 564 Q
(xample implementation is miPolyT)-.15 E -.15(ex)-.7 G(t8\(\) in Xserv)
.15 E(er/mi/mipolyte)-.15 E(xt.c.)-.15 E(int pGC->ops->PolyT)97 588 Q
-.15(ex)-.7 G(t16\(pDra).15 E 1.3 -.65(w, p)-.15 H(GC, x, y).65 E 2.5
(,c)-.65 G(ount, chars\))-2.5 E(Dra)122 600 Q -.1(wa)-.15 G(blePtr pDra)
.1 E(w;)-.15 E(GCPtr pGC;)122 612 Q(int x, y;)122 624 Q(int count;)122
636 Q(unsigned short *chars;)122 648 Q -.2(vo)97 672 S
(id pGC->ops->ImageT).2 E -.15(ex)-.7 G(t16\(pDra).15 E 1.3 -.65(w, p)
-.15 H(GC, x, y).65 E 2.5(,c)-.65 G(ount, chars\))-2.5 E(Dra)122 684 Q
-.1(wa)-.15 G(blePtr pDra).1 E(w;)-.15 E(GCPtr pGC;)122 696 Q(int x, y;)
122 708 Q(int count;)122 720 Q(Porting Layer De\214nition)72 768 Q 2.5
(-5)106.84 G 144.06 2.5(2- A)-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 53 53
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(unsigned short *chars;)122 84 Q(These tw)72 108
Q 2.5(or)-.1 G(outines are the same as the "8" v)-2.5 E(ersions, e)-.15
E(xcept that the)-.15 E 2.5(ya)-.15 G
(re for 16-bit character codes \(useful)-2.5 E
(for oriental writing systems\).)72 120 Q(The primary dif)72 144 Q
(ference is in the w)-.25 E(ay the character information is look)-.1 E
(ed up.)-.1 E(The 8-bit and the 16-bit v)5 E(er)-.15 E(-)-.2 E(sions ob)
72 156 Q(viously ha)-.15 E .3 -.15(ve d)-.2 H(if).15 E
(ferent kinds of character v)-.25 E
(alues to look up; the main goal of the lookup is to pro-)-.25 E
(vide a pointer to the CharInfo structs for the characters to dra)72 168
Q 2.5(wa)-.15 G(nd to pass these pointers to the Glyph rou-)-2.5 E 2.5
(tines. Gi)72 180 R -.15(ve)-.25 G 2.5(naC).15 G(harInfo struct, lo)-2.5
E(wer)-.25 E(-le)-.2 E -.15(ve)-.25 G 2.5(ls).15 G(oftw)-2.5 E
(are can dra)-.1 E 2.5(wt)-.15 G
(he glyph desired with little concern for other)-2.5 E
(characteristics of the font.)72 192 Q(16-bit character fonts ha)72 216
Q .3 -.15(ve a r)-.2 H -.25(ow).15 G(-and-column scheme, where the 2byt\
es of the character code constitute the).25 E(ro)72 228 Q 2.5(wa)-.25 G
(nd column in a square matrix of CharInfo structs.)-2.5 E
(Each font has ro)5 E 2.5(wa)-.25 G(nd column minimum and maxi-)-2.5 E
(mum v)72 240 Q(alues; the CharInfo structures form a tw)-.25 E
(o-dimensional matrix.)-.1 E(Example implementations are miPolyT)72 264
Q -.15(ex)-.7 G(t16\(\) and miImageT).15 E -.15(ex)-.7 G
(t16\(\) in Xserv).15 E(er/mi/mipolyte)-.15 E(xt.c.)-.15 E(See the X pr\
otocol speci\214cation for more details on these graphic operations.)72
288 Q(There is a hook in the GC ops, called LineHelper)72 303.6 Q 2.5
(,t)-.4 G(hat used to be used in the sample implementation by the)-2.5 E
(code for wide lines.)72 315.6 Q(It no longer serv)5 E(ers an)-.15 E 2.5
(yp)-.15 G(urpose in the sample serv)-2.5 E(ers, b)-.15 E(ut still e)-.2
E(xists, #ifdef)-.15 E('ed by).55 E
(NEED_LINEHELPER, in case someone needs it.)72 327.6 Q/F1 10
/Times-Bold@0 SF 2.5(5.6. Pixblit)72 351.6 R(Pr)2.5 E(ocedur)-.18 E(es)
-.18 E F0(The Dra)72 367.2 Q(wing Primiti)-.15 E .3 -.15(ve f)-.25 H
(unctions must be de\214ned for your serv).15 E(er)-.15 E 5(.O)-.55 G
(ne possible w)-5 E(ay to do this is to use the)-.1 E
(mi routines from the sample serv)72 379.2 Q(er)-.15 E 5(.I)-.55 G 2.5
(fy)-5 G(ou choose to use the mi routines \(e)-2.5 E -.15(ve)-.25 G 2.5
(np).15 G(art of them!\) you must)-2.5 E
(implement these Pixblit routines.)72 391.2 Q
(These routines read and write pix)5 E(el v)-.15 E
(alues and deal directly with the)-.25 E(image data.)72 403.2 Q
(The Pixblit routines for the sample serv)72 427.2 Q
(er are part of the "mfb" routines \(for Monochrome Frame Buf)-.15 E
(fer\),)-.25 E(and "cfb" routines \(for Color Frame Buf)72 439.2 Q 2.5
(fer\). As)-.25 F
(with the mi routines, the mfb and cfb routines are portable)2.5 E -.2
(bu)72 451.2 S 2.5(ta).2 G(re not as portable as the mi routines.)-2.5 E
(The mfb routines only w)72 475.2 Q(ork for monochrome frame b)-.1 E(uf)
-.2 E(fers, the simplest type of display)-.25 E 5(.F)-.65 G
(urthermore, the)-5 E(y)-.15 E(only w)72 487.2 Q
(ork for screens that or)-.1 E -.05(ga)-.18 G(nize their bits in ro).05
E(ws of pix)-.25 E(els on the screen.)-.15 E(\(See the Strate)5 E
(gies document)-.15 E(for more details on porting mfb)72 499.2 Q 2.5
(.\) The)-.4 F(cfb routines w)2.5 E(ork for pack)-.1 E(ed-pix)-.1 E
(el displays from 2 to 32 bits in)-.15 E(depth, although the)72 511.2 Q
2.5(yh)-.15 G -2.25 -.2(av e)-2.5 H 2.5(ab)2.7 G
(it of code which has been tuned to run on 8-bit \(1 pix)-2.5 E
(el per byte\) displays.)-.15 E(In other w)72 535.2 Q(ords, if you ha)
-.1 E .3 -.15(ve a ")-.2 H(normal" frame b).15 E(uf)-.2 E
(fer type display)-.25 E 2.5(,y)-.65 G
(ou can probably use either the mfb or cfb)-2.5 E
(code, and the mi code.)72 547.2 Q(If you ha)5 E .3 -.15(ve a s)-.2 H
(tranger hardw).15 E(are, you will ha)-.1 E .3 -.15(ve t)-.2 H 2.5(os)
.15 G(upply your o)-2.5 E(wn Pixblit routines,)-.25 E -.2(bu)72 559.2 S
2.5(ty).2 G(ou can use the mi routines on top of them.)-2.5 E(If you ha)
5 E .3 -.15(ve b)-.2 H(etter w).15 E(ays of doing some of the Dra)-.1 E
(wing)-.15 E(Primiti)72 571.2 Q .3 -.15(ve f)-.25 H
(unctions, then you may w).15 E(ant to supply some of your o)-.1 E
(wn Dra)-.25 E(wing Primiti)-.15 E .3 -.15(ve r)-.25 H 2.5
(outines. \(Ev).15 F(en)-.15 E(people who write their o)72 583.2 Q
(wn Dra)-.25 E(wing Primiti)-.15 E -.15(ve)-.25 G 2.5(ss).15 G -2.25 -.2
(av e)-2.5 H(at least some of the mi code for certain special cases)2.7
E(that their hardw)72 595.2 Q(are or library or f)-.1 E(anc)-.1 E 2.5
(ya)-.15 G(lgorithm does not handle.\))-2.5 E(The client, DIX, and the \
machine-independent routines do not carry the \214nal responsibility of\
 clipping.)72 619.2 Q(The)72 631.2 Q 2.5(ya)-.15 G
(ll depend upon the Pixblit routines to do their clipping for them.)-2.5
E(The rule is, if you touch the frame)5 E -.2(bu)72 643.2 S -.25(ff).2 G
(er).25 E 2.5(,y)-.4 G(ou clip.)-2.5 E(\(The higher le)72 667.2 Q -.15
(ve)-.25 G 2.5(lr).15 G(outines may decide to clip at a high le)-2.5 E
-.15(ve)-.25 G(l, b).15 E(ut this is only for increased performance and)
-.2 E(cannot substitute for bottom-le)72 679.2 Q -.15(ve)-.25 G 2.5(lc)
.15 G 2.5(lipping. F)-2.5 F
(or instance, the mi routines, DIX, or the client may decide to)-.15 E
(check all character strings to be dra)72 691.2 Q(wn and chop of)-.15 E
2.5(fa)-.25 G(ll characters that w)-2.5 E(ould not be displayed.)-.1 E
(If so, it)5 E(must retain the character on the edge that is partly dis\
played so that the Pixblit routines can clip of)72 703.2 Q 2.5(fp)-.25 G
(re-)-2.5 E(cisely at the right place.\))72 715.2 Q
(Porting Layer De\214nition)72 768 Q 2.5(-5)106.84 G 144.06 2.5(3- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 54 54
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 1.6 -.8(To m)72 84 T(ak).8 E 2.5(et)-.1 G
(his easier)-2.5 E 2.5(,a)-.4 G
(ll of the reasons to clip can be combined into one re)-2.5 E
(gion in your V)-.15 E(alidateGC proce-)-1.11 E 2.5(dure. Y)72 96 R
(ou tak)-1.1 E 2.5(et)-.1 G(his composite clip re)-2.5 E
(gion with you into the Pixblit routines.)-.15 E(\(The sample serv)5 E
(er does this.\))-.15 E
(Also, FillSpans\(\) has to apply tile and stipple patterns.)72 120 Q
(The patterns are all aligned to the windo)5 E 2.5(wo)-.25 G(rigin so)
-2.5 E(that when tw)72 132 Q 2.5(op)-.1 G
(eople write patches that are contiguous, the)-2.5 E 2.5(yw)-.15 G
(ill mer)-2.5 E(ge nicely)-.18 E 5(.\()-.65 G(Really)-5 E 2.5(,t)-.65 G
(he)-2.5 E 2.5(ya)-.15 G(re aligned to)-2.5 E(the patOr)72 144 Q 2.5(gp)
-.18 G(oint in the GC.)-2.5 E(This def)5 E(aults to \(0, 0\) b)-.1 E
(ut can be set by the client to an)-.2 E(ything.\))-.15 E(Ho)72 168 Q
(we)-.25 E -.15(ve)-.25 G .8 -.4(r, t).15 H
(he mi routines can translate \(relocate\) the points from windo).4 E
(w-relati)-.25 E .3 -.15(ve t)-.25 H 2.5(os).15 G(creen-relati)-2.5 E .3
-.15(ve i)-.25 H(f).15 E 2.5(desired. If)72 180 R(you set the miT)2.5 E
(ranslate \214eld in the GC \(set it in the CreateGC or V)-.35 E
(alidateGC routine\), then the)-1.11 E
(mi output routines will translate all coordinates.)72 192 Q(If it is f)
5 E(alse, then the coordinates will be passed windo)-.1 E(w-)-.25 E
(relati)72 204 Q -.15(ve)-.25 G 5(.S).15 G(creens with no hardw)-5 E
(are translation will probably set miT)-.1 E(ranslate to TR)-.35 E
(UE, so that geometry)-.4 E
(\(e.g. polygons, rectangles\) can be translated, rather than ha)72 216
Q(ving the resulting list of scanlines translated; this)-.2 E
(is good because the list v)72 228 Q(ertices in a dra)-.15 E
(wing request will generally be much smaller than the list of scan-)-.15
E(lines it produces.)72 240 Q(Similarly)5 E 2.5(,h)-.65 G(ardw)-2.5 E
(are that does translation can set miT)-.1 E(ranslate to F)-.35 E
(ALSE, and a)-.74 E -.2(vo)-.2 G(id the).2 E -.15(ex)72 252 S
(tra addition per v).15 E(erte)-.15 E(x, which can be \(b)-.15 E
(ut is not al)-.2 E -.1(wa)-.1 G
(ys\) important for getting the highest possible perfor).1 E(-)-.2 E 2.5
(mance. \(Contrast)72 264 R(the beha)2.5 E
(vior of GetSpans, which is not e)-.2 E
(xpected to be called as often, and so has dif)-.15 E(fer)-.25 E(-)-.2 E
(ent constraints.\))72 276 Q(The miT)5 E
(ranslate \214eld is settable in each GC, if , for e)-.35 E
(xample, you are mixing se)-.15 E -.15(ve)-.25 G(ral kinds).15 E
(of destinations \(of)72 288 Q
(fscreen pixmaps, main memory pixmaps, backing store, and windo)-.25 E
(ws\), all of which ha)-.25 E -.15(ve)-.2 G(dif)72 300 Q
(ferent requirements, on one screen.)-.25 E(As with other dra)72 324 Q(\
wing routines, there are \214elds in the GC to direct higher code to th\
e correct routine to)-.15 E -.15(exe)72 336 S(cute for each function.)
.15 E(In this w)5 E(ay)-.1 E 2.5(,y)-.65 G
(ou can optimize for special cases, for e)-2.5 E(xample, dra)-.15 E
(wing solids v)-.15 E(er)-.15 E(-)-.2 E(sus dra)72 348 Q(wing stipples.)
-.15 E(The Pixblit routines are brok)72 372 Q(en up into three sets.)-.1
E(The Span routines simply \214ll in ro)5 E(ws of pix)-.25 E 2.5
(els. The)-.15 F(Glyph routines \214ll in character glyphs.)72 384 Q
(The PushPix)5 E
(els routine is a three-input bitblt for more sophisticated)-.15 E
(image creation.)72 396 Q(It turns out that the Glyph and PushPix)72 420
Q(els routines actually ha)-.15 E .3 -.15(ve a m)-.2 H
(achine-independent implementation).15 E
(that depends upon the Span routines.)72 432 Q
(If you are really pressed for time, you can use these v)5 E(ersions,)
-.15 E(although the)72 444 Q 2.5(ya)-.15 G(re quite slo)-2.5 E -.65(w.)
-.25 G/F1 10/Times-Bold@0 SF 2.5(5.6.1. Span)72 480 R(Routines)2.5 E F0
-.15(Fo)72 495.6 S 2.5(rt).15 G
(hese routines, all graphic operations ha)-2.5 E .3 -.15(ve b)-.2 H
(een reduced to "spans.").15 E 2.5(As)5 G(pan is a horizontal ro)-2.5 E
2.5(wo)-.25 G 2.5(fp)-2.5 G(ix-)-2.5 E 2.5(els. If)72 507.6 R
(you can design these routines which write into and read from ro)2.5 E
(ws of pix)-.25 E(els at a time, you can use)-.15 E(the mi routines.)72
519.6 Q(Each routine tak)72 543.6 Q(es a destination dra)-.1 E -.1(wa)
-.15 G(ble to dra).1 E 2.5(wi)-.15 G(nto, a GC to use while dra)-2.5 E
(wing, the number of spans to)-.15 E(do, and tw)72 555.6 Q 2.5(op)-.1 G
(ointers to arrays that indicate the list of starting points and the li\
st of widths of spans.)-2.5 E -.2(vo)97 579.6 S
(id pGC->ops->FillSpans\(dst, pGC, nSpans, pPoints, pW).2 E
(idths, sorted\))-.4 E(Dra)122 591.6 Q -.1(wa)-.15 G(blePtr dst;).1 E
(GCPtr pGC;)122 603.6 Q(int nSpans;)122 615.6 Q(DDXPointPtr pPoints;)122
627.6 Q(int *pW)122 639.6 Q(idths;)-.4 E(int sorted;)122 651.6 Q
(FillSpans should \214ll horizontal ro)72 675.6 Q(ws of pix)-.25 E
(els with the appropriate patterns, stipples, etc., based on the v)-.15
E(al-)-.25 E(ues in the GC.)72 687.6 Q
(The starting points are in the array at pPoints; the widths are in pW)5
E 2.5(idths. If)-.4 F(sorted is true,)2.5 E
(the scan lines are in increasing y order)72 699.6 Q 2.5(,i)-.4 G 2.5
(nw)-2.5 G(hich case you may be able to mak)-2.5 E 2.5(ea)-.1 G
(ssumptions and optimiza-)-2.5 E(tions.)72 711.6 Q
(Porting Layer De\214nition)72 768 Q 2.5(-5)106.84 G 144.06 2.5(4- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 55 55
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(GC components: alu, clipOr)72 84 Q
(g, clientClip, and \214llStyle.)-.18 E
(GC mode-dependent components: fgPix)72 99.6 Q
(el \(for \214llStyle Solid\); tile, patOr)-.15 E 2.5(g\()-.18 G
(for \214llStyle T)-2.5 E(ile\); stipple,)-.35 E(patOr)72 111.6 Q
(g, fgPix)-.18 E(el \(for \214llStyle Stipple\); and stipple, patOr)-.15
E(g, fgPix)-.18 E(el and bgPix)-.15 E
(el \(for \214llStyle OpaqueStipple\).)-.15 E -.2(vo)97 147.6 S
(id pGC->ops->SetSpans\(pDra).2 E -.1(wa)-.15 G(ble, pGC, pSrc, ppt, pW)
.1 E(idths, nSpans, sorted\))-.4 E(Dra)122 159.6 Q -.1(wa)-.15 G
(blePtr pDra).1 E -.1(wa)-.15 G(ble;).1 E(GCPtr pGC;)122 171.6 Q
(char *pSrc;)122 183.6 Q(DDXPointPtr pPoints;)122 195.6 Q(int *pW)122
207.6 Q(idths;)-.4 E(int nSpans;)122 219.6 Q(int sorted;)122 231.6 Q
-.15(Fo)72 255.6 S 2.5(re).15 G(ach span, this routine should cop)-2.5 E
2.5(yp)-.1 G -.4(Wi)-2.5 G(dths bits from pSrc to pDra).4 E -.1(wa)-.15
G(ble at pPoints using the raster).1 E(-op)-.2 E(from the GC.)72 267.6 Q
(If sorted is true, the scan lines are in increasing y order)5 E 5(.T)
-.55 G(he pix)-5 E(els in pSrc are padded)-.15 E
(according to the screen')72 279.6 Q 2.5(sp)-.55 G(adding rules.)-2.5 E
(These can be used to support interesting e)5 E(xtension libraries, for)
-.15 E -.15(ex)72 291.6 S(ample, shaded primiti).15 E -.15(ve)-.25 G 5
(s. It).15 F(does not use the tile and stipple.)2.5 E
(GC components: alu, clipOr)72 307.2 Q(g, and clientClip)-.18 E(The abo)
72 334.8 Q .3 -.15(ve f)-.15 H(unctions are e).15 E
(xpected to handle all modi\214ers in the current GC.)-.15 E
(Therefore, it is e)5 E(xpedient to)-.15 E(ha)72 346.8 Q .3 -.15(ve d)
-.2 H(if).15 E(ferent routines to quickly handle common special cases a\
nd reload the procedure pointers at v)-.25 E(ali-)-.25 E
(date time, as with the other output functions.)72 358.8 Q -.2(vo)97
382.8 S(id pScreen->GetSpans\(pDra).2 E -.1(wa)-.15 G
(ble, wMax, pPoints, pW).1 E(idths, nSpans\))-.4 E(Dra)122 394.8 Q -.1
(wa)-.15 G(blePtr pDra).1 E -.1(wa)-.15 G(ble;).1 E(int wMax;)122 406.8
Q(DDXPointPtr pPoints;)122 418.8 Q(int *pW)122 430.8 Q(idths;)-.4 E
(int nSpans;)122 442.8 Q(char *pDst;)122 454.8 Q -.15(Fo)72 478.8 S 2.5
(re).15 G(ach span, GetSpans gets bits from the dra)-2.5 E -.1(wa)-.15 G
(ble starting at pPoints and continuing for pW).1 E(idths bits.)-.4 E
(Each scanline returned will be serv)72 490.8 Q(er)-.15 E
(-scanline padded.)-.2 E
(The routine can return NULL if memory cannot be)5 E
(allocated to hold the result.)72 502.8 Q(GetSpans ne)72 526.8 Q -.15
(ve)-.25 G 2.5(rt).15 G(ranslates -- for a windo)-2.5 E 1.3 -.65(w, t)
-.25 H(he coordinates are already screen-relati).65 E -.15(ve)-.25 G 5
(.C).15 G(onsider the case of)-5 E(hardw)72 538.8 Q(are that doesn')-.1
E 2.5(td)-.18 G 2.5(ot)-2.5 G(ranslation: the mi code that calls ddX wi\
ll translate each shape \(rectangle, poly-)-2.5 E
(gon,. etc.\) before scan-con)72 550.8 Q -.15(ve)-.4 G
(rting it, which requires man).15 E 2.5(yf)-.15 G -.25(ew)-2.5 G
(er additions that ha).25 E(ving GetSpans translate)-.2 E
(each span does.)72 562.8 Q(Con)5 E -.15(ve)-.4 G(rsely).15 E 2.5(,c)
-.65 G(onsider hardw)-2.5 E
(are that does translate: it can set its translation point to \(0, 0\))
-.1 E(and get each span, and the only penalty is the small number of ad\
ditions required to translate each shape)72 574.8 Q(being scan-con)72
586.8 Q -.15(ve)-.4 G(rted by the calling code.).15 E(Contrast the beha)
5 E(vior of FillSpans and SetSpans \(discussed)-.2 E(abo)72 598.8 Q .3
-.15(ve u)-.15 H(nder miT).15 E(ranslate\), which are e)-.35 E
(xpected to be used more often.)-.15 E(Thus, the penalty to hardw)72
622.8 Q(are that does hardw)-.1 E(are translation is ne)-.1 E
(gligible, and code that w)-.15 E(ants to call)-.1 E
(GetSpans\(\) is greatly simpli\214ed, both for e)72 634.8 Q
(xtensions and the machine-independent core implementation.)-.15 E/F1 10
/Times-Bold@0 SF 2.5(5.6.1.1. Glyph)72 670.8 R(Routines)2.5 E F0
(The Glyph routines dra)72 686.4 Q 2.5(wi)-.15 G(ndi)-2.5 E
(vidual character glyphs for te)-.25 E(xt dra)-.15 E(wing requests.)-.15
E -1.1(Yo)72 710.4 S 2.5(uh)1.1 G -2.25 -.2(av e)-2.5 H 2.5(ac)2.7 G
(hoice in implementing these routines.)-2.5 E -1.1(Yo)5 G 2.5(uc)1.1 G
(an use the mi v)-2.5 E(ersions; the)-.15 E 2.5(yd)-.15 G
(epend ultimately)-2.5 E(upon the span routines.)72 722.4 Q(Although te)
5 E(xt dra)-.15 E(wing will w)-.15 E(ork, it will be v)-.1 E(ery slo)
-.15 E -.65(w.)-.25 G(Porting Layer De\214nition)72 768 Q 2.5(-5)106.84
G 144.06 2.5(5- A)-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 56 56
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF -.2(vo)97 84 S(id pGC->ops->PolyGlyphBlt\(pDra)
.2 E -.1(wa)-.15 G(ble, pGC, x, y).1 E 2.5(,n)-.65 G
(glyph, ppci, pglyphBase\))-2.5 E(Dra)122 96 Q -.1(wa)-.15 G
(blePtr pDra).1 E -.1(wa)-.15 G(ble;).1 E(GCPtr pGC;)122 108 Q
(int x , y;)122 120 Q(unsigned int nglyph;)122 132 Q
(CharInfoRec **ppci;)122 144 Q(/* array of character info */)40.85 E
(pointer unused;)122 156 Q(/* unused since R5 */)63.06 E
(GC components: alu, clipOr)72 183.6 Q
(g, clientClip, font, and \214llStyle.)-.18 E
(GC mode-dependent components: fgPix)72 199.2 Q
(el \(for \214llStyle Solid\); tile, patOr)-.15 E 2.5(g\()-.18 G
(for \214llStyle T)-2.5 E(ile\); stipple,)-.35 E(patOr)72 211.2 Q
(g, fgPix)-.18 E(el \(for \214llStyle Stipple\); and stipple, patOr)-.15
E(g, fgPix)-.18 E(el and bgPix)-.15 E
(el \(for \214llStyle OpaqueStipple\).)-.15 E -.2(vo)97 235.2 S
(id pGC->ops->ImageGlyphBlt\(pDra).2 E -.1(wa)-.15 G(ble, pGC, x, y).1 E
2.5(,n)-.65 G(glyph, ppci, pglyphBase\))-2.5 E(Dra)122 247.2 Q -.1(wa)
-.15 G(blePtr pDra).1 E -.1(wa)-.15 G(ble;).1 E(GCPtr pGC;)122 259.2 Q
(int x , y;)122 271.2 Q(unsigned int nglyph;)122 283.2 Q
(CharInfoRec **ppci;)122 295.2 Q(/* array of character info */)15.85 E
(pointer unused;)122 307.2 Q(/* unused since R5 */)38.06 E
(GC components: clipOr)72 334.8 Q(g, clientClip, font, fgPix)-.18 E
(el, bgPix)-.15 E(el)-.15 E(These routines must cop)72 350.4 Q 2.5(yt)
-.1 G(he glyphs de\214ned by the bitmaps in pglyphBase and the font met\
rics in ppci to)-2.5 E(the Dra)72 362.4 Q -.1(wa)-.15 G(blePtr).1 E 2.5
(,p)-.4 G(Dra)-2.5 E -.1(wa)-.15 G 2.5(ble. The).1 F(poly routine follo)
2.5 E(ws all \214ll, stipple, and tile rules.)-.25 E(The image routine)5
E(simply blasts the glyph onto the glyph')72 374.4 Q 2.5(sr)-.55 G
(ectangle, in fore)-2.5 E(ground and background colors.)-.15 E
(More precisely)72 398.4 Q 2.5(,t)-.65 G(he Image routine \214lls the c\
haracter rectangle with the background color)-2.5 E 2.5(,a)-.4 G
(nd then the)-2.5 E(glyph is applied in the fore)72 410.4 Q
(ground color)-.15 E 5(.T)-.55 G(he glyph can e)-5 E
(xtend outside of the character rectangle.)-.15 E(ImageG-)5 E
(lyph\(\) is used for terminal emulators and informal te)72 422.4 Q
(xt purposes such as b)-.15 E(utton labels.)-.2 E(The e)72 446.4 Q(xact\
 speci\214cation for the Poly routine is that the glyph is painted with\
 the current \214ll style.)-.15 E(The char)5 E(-)-.2 E
(acter rectangle is irrele)72 458.4 Q -.25(va)-.25 G
(nt for this operation.).25 E(PolyT)5 E -.15(ex)-.7 G(t, at a higher le)
.15 E -.15(ve)-.25 G(l, includes f).15 E(acilities for font)-.1 E
(changes within strings and such; it is to be used for WYSIWYG w)72
470.4 Q(ord processing and similar systems.)-.1 E
(Both of these routines must clip themselv)72 494.4 Q(es to the o)-.15 E
-.15(ve)-.15 G(rall clipping re).15 E(gion.)-.15 E(Example implementati\
ons in mi are miPolyGlyphBlt\(\) and miImageGlyphBlt\(\) in Xserv)72
518.4 Q(er/mi/miglblt.c.)-.15 E/F1 10/Times-Bold@0 SF 2.5
(5.6.1.2. PushPixels)72 554.4 R -.18(ro)2.5 G(utine).18 E F0
(The PushPix)72 570 Q
(els routine writes the current \214ll style onto the dra)-.15 E -.1(wa)
-.15 G(ble in a certain shape de\214ned by a bitmap.).1 E(PushPix)72 582
Q(els is equi)-.15 E -.25(va)-.25 G(lent to using a second stipple.).25
E -1.1(Yo)5 G 2.5(uc)1.1 G
(an thing of it as pushing the \214llStyle through a)-2.5 E 2.5
(stencil. PushPix)72 594 R(els is not used by an)-.15 E 2.5(yo)-.15 G
2.5(ft)-2.5 G(he mi rendering code, b)-2.5 E(ut is used by the mi softw)
-.2 E(are cursor code.)-.1 E(Suppose the stencil is:)144 609.6 Q
(00111100)54.83 E(and the stipple is:)144 621.6 Q(10101010)73.72 E
(PushPix)144 633.6 Q(els result:)-.15 E(00101000)72.75 E -1.1(Yo)72
649.2 S 2.5(uh)1.1 G -2.25 -.2(av e)-2.5 H 2.5(ac)2.7 G
(hoice in implementing this routine.)-2.5 E -1.1(Yo)5 G 2.5(uc)1.1 G
(an use the mi v)-2.5 E(ersion which depends ultimately upon)-.15 E 2.5
(FillSpans\(\). Although)72 661.2 R(it will w)2.5 E(ork, it will be slo)
-.1 E -.65(w.)-.25 G -.2(vo)97 688.8 S(id pGC->ops->PushPix).2 E
(els\(pGC, pBitMap, pDra)-.15 E -.1(wa)-.15 G(ble, dx, dy).1 E 2.5(,x)
-.65 G(Or)-2.5 E(g, yOr)-.18 E(g\))-.18 E(GCPtr pGC;)122 700.8 Q
(PixmapPtr pBitMap;)122 712.8 Q(Dra)122 724.8 Q -.1(wa)-.15 G
(blePtr pDra).1 E -.1(wa)-.15 G(ble;).1 E(Porting Layer De\214nition)72
768 Q 2.5(-5)106.84 G 144.06 2.5(6- A)-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 57 57
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(int dx, dy)122 84 Q 2.5(,x)-.65 G(Or)-2.5 E
(g, yOr)-.18 E(g;)-.18 E(GC components: alu, clipOr)72 111.6 Q
(g, clientClip, and \214llStyle.)-.18 E
(GC mode-dependent components: fgPix)72 127.2 Q
(el \(for \214llStyle Solid\); tile, patOr)-.15 E 2.5(g\()-.18 G
(for \214llStyle T)-2.5 E(ile\); stipple,)-.35 E(patOr)72 139.2 Q
(g, fgPix)-.18 E(el \(for \214llStyle Stipple\); and stipple, patOr)-.15
E(g, fgPix)-.18 E(el and bgPix)-.15 E
(el \(for \214llStyle OpaqueStipple\).)-.15 E(PushPix)72 163.2 Q
(els applys the fore)-.15 E(ground color)-.15 E 2.5(,t)-.4 G
(ile, or stipple from the pGC through a stencil onto pDra)-2.5 E -.1(wa)
-.15 G(ble.).1 E(pBitMap points to a stencil \(of which we use an area \
dx wide by dy high\), which is oriented o)72 175.2 Q -.15(ve)-.15 G 2.5
(rt).15 G(he dra)-2.5 E(w-)-.15 E(able at xOr)72 187.2 Q(g, yOr)-.18 E
2.5(g. Where)-.18 F(there is a 1 bit in the bitmap, the destination is \
set according to the current \214ll)2.5 E 2.5(style. Where)72 199.2 R
(there is a 0 bit in the bitmap, the destination is left the w)2.5 E
(ay it is.)-.1 E(This routine must clip to the o)72 223.2 Q -.15(ve)-.15
G(rall clipping re).15 E(gion.)-.15 E
(An Example implementation is miPushPix)72 247.2 Q(els\(\) in Xserv)-.15
E(er/mi/mipushpxl.c.)-.15 E/F1 10/Times-Bold@0 SF 2.5(5.7. Shutdo)72
283.2 R(wn Pr)-.1 E(ocedur)-.18 E(es)-.18 E F0 -.2(vo)97 298.8 S
(id AbortDDX\(\)).2 E -.2(vo)97 310.8 S(id ddxGi).2 E -.15(ve)-.25 G
(Up\(\)).15 E(Some hardw)72 326.4 Q(are may require special w)-.1 E
(ork to be done before the serv)-.1 E(er e)-.15 E
(xits so that it is not left in an inter)-.15 E(-)-.2 E(mediate state.)
72 338.4 Q(As e)5 E(xplained in the OS layer)-.15 E 2.5(,F)-.4 G
(atalError\(\) will call AbortDDX\(\) just before terminating the)-2.65
E(serv)72 350.4 Q(er)-.15 E 5(.I)-.55 G 2.5(na)-5 G(ddition, ddxGi)-2.5
E -.15(ve)-.25 G(Up\(\) will be called just before terminating the serv)
.15 E(er on a "clean" death.)-.15 E(What)5 E(AbortDDX\(\) and ddxGi)72
362.4 Q -.15(ve)-.25 G
(UP do is left unspeci\214ed, only that stubs must e).15 E
(xist in the ddx layer)-.15 E 5(.I)-.55 G 2.5(ti)-5 G 2.5(su)-2.5 G 2.5
(pt)-2.5 G(o)-2.5 E(local implementors as to what the)72 374.4 Q 2.5(ys)
-.15 G(hould accomplish before termination.)-2.5 E F1 2.5
(5.7.1. Command)72 410.4 R(Line Pr)2.5 E(ocedur)-.18 E(es)-.18 E F0
(int ddxProcessAr)97 426 Q(gument\(ar)-.18 E(gc, ar)-.18 E(gv)-.18 E 2.5
(,i)-.65 G(\))-2.5 E(int ar)107 438 Q(gc;)-.18 E(char *ar)107 450 Q
(gv[];)-.18 E(int i;)107 462 Q -.2(vo)97 486 S(id).2 E(ddxUseMsg\(\))97
498 Q -1.1(Yo)72 525.6 S 2.5(us)1.1 G
(hould write these routines to deal with de)-2.5 E
(vice-dependent command line ar)-.25 E 2.5(guments. The)-.18 F
(routine ddx-)2.5 E(ProcessAr)72 537.6 Q
(gument\(\) is called with the command line, and the current inde)-.18 E
2.5(xi)-.15 G(nto ar)-2.5 E(gv; you should return zero)-.18 E(if the ar)
72 549.6 Q(gument is not a de)-.18 E(vice-dependent one, and otherwise \
return a count of the number of elements of)-.25 E(ar)72 561.6 Q
(gv that are part of this one ar)-.18 E 2.5(gument. F)-.18 F
(or a typical option \(e.g., "-realtime"\), you should return the v)-.15
E(alue)-.25 E 2.5(one. This)72 573.6 R
(routine gets called before checks are made ag)2.5 E(ainst de)-.05 E
(vice-independent ar)-.25 E(guments, so it is possi-)-.18 E
(ble to peek at all ar)72 585.6 Q(guments or to o)-.18 E -.15(ve)-.15 G
(rride de).15 E(vice-independent ar)-.25 E(gument processing.)-.18 E
-1.1(Yo)5 G 2.5(uc)1.1 G(an document the)-2.5 E(de)72 597.6 Q
(vice-dependent ar)-.25 E(guments in ddxUseMsg\(\), which will be calle\
d from UseMsg\(\) after printing out the)-.18 E(de)72 609.6 Q
(vice-independent ar)-.25 E(guments.)-.18 E(Porting Layer De\214nition)
72 768 Q 2.5(-5)106.84 G 144.06 2.5(7- A)-2.5 H(pril 8, 1994)-2.5 E 0 Cg
EP
%%Page: 58 58
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF 2.5(5.8. Wrappers)72 84 R(and de)2.5 E(vPri)-.15
E -.1(va)-.1 G(tes).1 E/F1 10/Times-Roman@0 SF -1 -.8(Tw o)72 99.6 T(ne)
3.3 E 2.5(we)-.25 G(xtensibility concepts ha)-2.65 E .3 -.15(ve b)-.2 H
(een de).15 E -.15(ve)-.25 G(loped for release 4, Wrappers and de).15 E
(vPri)-.25 E -.25(va)-.25 G 2.5(tes. These).25 F(replace the R3 GCInter\
est queues, which were not a general enough mechanism for man)72 111.6 Q
2.5(ye)-.15 G(xtensions and)-2.65 E(only pro)72 123.6 Q
(vided hooks into a single data structure.)-.15 E F0 2.5(5.8.1. de)72
147.6 R(vPri)-.15 E -.1(va)-.1 G(tes).1 E F1(de)72 163.2 Q(vPri)-.25 E
-.25(va)-.25 G(tes are arrays of v).25 E(alues attached to v)-.25 E
(arious data structures \(Screens, GCs, W)-.25 E(indo)-.4 E
(ws, and Pixmaps)-.25 E 2.5(currently\). These)72 175.2 R
(arrays are sized dynamically at serv)2.5 E
(er startup \(and reset\) time as v)-.15 E(arious modules allocate)-.25
E(portions of them.)72 187.2 Q(The)5 E 2.5(yc)-.15 G(an be used for an)
-2.5 E 2.5(yp)-.15 G(urpose; each array entry is actually a union, De)
-2.5 E(vUnion, of)-.25 E(common useful types \(pointer)72 199.2 Q 2.5
(,l)-.4 G(ong and unsigned long\).)-2.5 E(de)5 E(vPri)-.25 E -.25(va)
-.25 G(tes must be allocated on startup and).25 E(whene)72 211.2 Q -.15
(ve)-.25 G 2.5(rt).15 G(he serv)-2.5 E(er resets.)-.15 E 1.6 -.8(To m)5
H(ak).8 E 2.5(et)-.1 G(his easier)-2.5 E 2.5(,t)-.4 G(he global v)-2.5 E
(ariable "serv)-.25 E(erGeneration" is incremented each)-.15 E(time de)
72 223.2 Q(vPri)-.25 E -.25(va)-.25 G(tes should be allocated, b).25 E
(ut before the initialization process be)-.2 E(gins, typical usage w)
-.15 E(ould be:)-.1 E(static int pri)72 235.2 Q -.25(va)-.25 G
(teGeneration = 0;).25 E(if \(pri)97 259.2 Q -.25(va)-.25 G
(teGeneration != serv).25 E(erGeneration\))-.15 E({)97 271.2 Q
(allocate de)122 283.2 Q(vPri)-.25 E -.25(va)-.25 G(tes here.).25 E(pri)
122 307.2 Q -.25(va)-.25 G(teGeneration = serv).25 E(erGeneration;)-.15
E(})97 319.2 Q F0 2.5(5.8.1.1. Scr)72 343.2 R(een de)-.18 E(vPri)-.15 E
-.1(va)-.1 G(tes).1 E F1(An inde)72 358.8 Q 2.5(xi)-.15 G(nto e)-2.5 E
-.15(ve)-.25 G(ry screen de).15 E(vPri)-.25 E -.25(va)-.25 G
(tes array is allocated with).25 E(int AllocateScreenPri)97 370.8 Q -.25
(va)-.25 G(teInde).25 E(x\(\))-.15 E(This call can occur at an)72 382.8
Q 2.5(yt)-.15 G(ime, each e)-2.5 E(xisting de)-.15 E(vPri)-.25 E -.25
(va)-.25 G(tes array is resized to accommodate the ne).25 E 2.5(we)-.25
G(ntry)-2.5 E(.)-.65 E
(This routine returns -1 indicating an allocation f)72 394.8 Q 2.5
(ailure. Otherwise,)-.1 F(the return v)2.5 E(alue can be used to inde)
-.25 E 2.5(xt)-.15 G(he)-2.5 E(array of de)72 406.8 Q(vPri)-.25 E -.25
(va)-.25 G(tes on an).25 E 2.5(ys)-.15 G(creen:)-2.5 E(pri)97 418.8 Q
-.25(va)-.25 G(te = \(Pri).25 E -.25(va)-.25 G(tePointer\) pScreen->de)
.25 E(vPri)-.25 E -.25(va)-.25 G(tes[screenPri).25 E -.25(va)-.25 G
(teInde).25 E(x].ptr;)-.15 E
(The pointer in each screen is not initialized by AllocateScreenPri)72
430.8 Q -.25(va)-.25 G(teInde).25 E(x\(\).)-.15 E F0 2.5(5.8.1.2. W)72
454.8 R(indo)-.18 E 2.5(wd)-.1 G -.15(ev)-2.5 G(Pri).15 E -.1(va)-.1 G
(tes).1 E F1(An inde)72 470.4 Q 2.5(xi)-.15 G(nto e)-2.5 E -.15(ve)-.25
G(ry windo).15 E 2.5(wd)-.25 G -.25(ev)-2.5 G(Pri).25 E -.25(va)-.25 G
(tes array is allocated with).25 E(int AllocateW)97 482.4 Q(indo)-.4 E
(wPri)-.25 E -.25(va)-.25 G(teInde).25 E 2.5(x\()-.15 G(\))-2.5 E
(AllocateW)72 494.4 Q(indo)-.4 E(wPri)-.25 E -.25(va)-.25 G(teInde).25 E
(x\(\) ne)-.15 E -.15(ve)-.25 G 2.5(rr).15 G(eturns an error)-2.5 E 5
(.T)-.55 G(his call must be associated with a call which)-5 E(causes a \
chunk of memory to be automatically allocated and attached to the de)72
506.4 Q(vPri)-.25 E -.25(va)-.25 G(te entry on e).25 E -.15(ve)-.25 G
(ry).15 E(screen which the module will need to use the inde)72 518.4 Q
(x:)-.15 E(Bool AllocateW)97 530.4 Q(indo)-.4 E(wPri)-.25 E -.25(va)-.25
G(te \(pScreen, inde).25 E(x, amount\))-.15 E(ScreenPtr pScreen;)122
542.4 Q(int inde)122 554.4 Q(x;)-.15 E(unsigned amount;)122 566.4 Q
(If this space is not al)72 578.4 Q -.1(wa)-.1 G(ys needed for e).1 E
-.15(ve)-.25 G(ry object, use 0 as the amount.).15 E
(In this case, the pointer \214eld of the)5 E(entry in the de)72 590.4 Q
(vPri)-.25 E -.25(va)-.25 G(tes array is initialized to NULL.).25 E
(This call e)5 E(xists so that DIX may preallocate all of the)-.15 E(sp\
ace required for an object with one call; this reduces memory fragmenta\
tion considerably)72 602.4 Q 5(.A)-.65 G(llocateW)-5 E(in-)-.4 E(do)72
614.4 Q(wPri)-.25 E -.25(va)-.25 G(te returns F).25 E
(ALSE on allocation f)-.74 E 2.5(ailure. Both)-.1 F
(of these calls must occur before an)2.5 E 2.5(yw)-.15 G(indo)-2.5 E 2.5
(ws)-.25 G(truc-)-2.5 E(tures are allocated; the serv)72 626.4 Q
(er is careful to a)-.15 E -.2(vo)-.2 G(id windo).2 E 2.5(wc)-.25 G
(reation until all modules are initialized, b)-2.5 E(ut do)-.2 E
(not call this after initialization.)72 638.4 Q 2.5(At)5 G
(ypical allocation sequence for W)-2.5 E(indo)-.4 E(wPri)-.25 E -.25(va)
-.25 G(tes w).25 E(ould be:)-.1 E(pri)82 650.4 Q -.25(va)-.25 G
(teInitialize \(pScreen\)).25 E(ScreenPtr pScreen;)97 662.4 Q({)82 674.4
Q(if \(pri)97 686.4 Q -.25(va)-.25 G(teGeneration != serv).25 E
(erGeneration\))-.15 E({)97 698.4 Q(windo)107 710.4 Q(wPri)-.25 E -.25
(va)-.25 G(teInde).25 E 2.5(x=A)-.15 G(llocateW)-2.5 E(indo)-.4 E(wPri)
-.25 E -.25(va)-.25 G(teInde).25 E(x\(\);)-.15 E(pri)107 722.4 Q -.25
(va)-.25 G(teGeneration = serv).25 E(erGeneration;)-.15 E
(Porting Layer De\214nition)72 768 Q 2.5(-5)106.84 G 144.06 2.5(8- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 59 59
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(})97 84 Q(return \(AllocateW)97 108 Q(indo)-.4 E
(wPri)-.25 E -.25(va)-.25 G(te\(pScreen, windo).25 E(wPri)-.25 E -.25
(va)-.25 G(teInde).25 E(x,)-.15 E(sizeof\(windo)187 120 Q(wPri)-.25 E
-.25(va)-.25 G(teStructure\)\)\);).25 E(})82 132 Q/F1 10/Times-Bold@0 SF
2.5(5.8.1.3. GC)72 156 R(and Pixmap de)2.5 E(vPri)-.15 E -.1(va)-.1 G
(tes).1 E F0(The calls for GCs and Pixmaps mirror the W)72 171.6 Q(indo)
-.4 E 2.5(wc)-.25 G(alls e)-2.5 E(xactly; the)-.15 E 2.5(yh)-.15 G -2.25
-.2(av e)-2.5 H(the same requirements and limi-)2.7 E(tations:)72 183.6
Q(int AllocateGCPri)97 195.6 Q -.25(va)-.25 G(teInde).25 E 2.5(x\()-.15
G(\))-2.5 E(Bool AllocateGCPri)97 219.6 Q -.25(va)-.25 G
(te \(pScreen, inde).25 E(x, amount\))-.15 E(ScreenPtr pScreen;)122
231.6 Q(int inde)122 243.6 Q(x;)-.15 E(unsigned amount;)122 255.6 Q
(int AllocatePixmapPri)97 279.6 Q -.25(va)-.25 G(teInde).25 E 2.5(x\()
-.15 G(\))-2.5 E(Bool AllocatePixmapPri)97 303.6 Q -.25(va)-.25 G
(te \(pScreen, inde).25 E(x, amount\))-.15 E(ScreenPtr pScreen;)122
315.6 Q(int inde)122 327.6 Q(x;)-.15 E(unsigned amount;)122 339.6 Q F1
2.5(5.8.2. Wrappers)72 363.6 R F0
(Wrappers are not a body of code, nor an interf)72 379.2 Q(ace spec.)-.1
E(The)5 E 2.5(ya)-.15 G(re, instead, a technique for hooking a ne)-2.5 E
(w)-.25 E(module into an e)72 391.2 Q(xisting calling sequence.)-.15 E
(There are limitations on other portions of the serv)5 E(er implementa-)
-.15 E(tion which mak)72 403.2 Q 2.5(eu)-.1 G(sing wrappers possible; l\
imits on when speci\214c \214elds of data structures may be modi\214ed.)
-2.5 E(The)72 415.2 Q 2.5(ya)-.15 G(re intended as a replacement for GC\
Interest queues, which were not general enough to support e)-2.5 E
(xist-)-.15 E(ing modules; in particular softw)72 427.2 Q
(are cursors and backing store both needed more control o)-.1 E -.15(ve)
-.15 G 2.5(rt).15 G(he acti)-2.5 E(vity)-.25 E(.)-.65 E
(The general mechanism for using wrappers is:)72 439.2 Q(pri)72 451.2 Q
-.25(va)-.25 G(teWrapperFunction \(object, ...\)).25 E 9.17
(ObjectPtr object;)97 463.2 R({)72 475.2 Q(pre-wrapped-function-stuf)97
487.2 Q 2.5(f.)-.25 G(..)-2.5 E(object->functionV)97 511.2 Q
(ector = \(v)-1.11 E(oid *\) object->de)-.2 E(vPri)-.25 E -.25(va)-.25 G
(tes[pri).25 E -.25(va)-.25 G(teInde).25 E(x].ptr;)-.15 E
(\(*object->functionV)97 523.2 Q(ector\) \(object, ...\);)-1.11 E(/*)97
535.2 Q 2.5(*t)99.5 547.2 S(his ne)-2.5 E
(xt line is occasionally required by the rules go)-.15 E -.15(ve)-.15 G
(rning).15 E 2.5(*w)99.5 559.2 S(rapper functions.)-2.5 E(Al)5 E -.1(wa)
-.1 G(ys using it will not cause problems.).1 E 2.5(*N)99.5 571.2 S
(ot using it when necessary can cause se)-2.5 E -.15(ve)-.25 G
(re troubles.).15 E(*/)99.5 583.2 Q(object->de)97 595.2 Q(vPri)-.25 E
-.25(va)-.25 G(tes[pri).25 E -.25(va)-.25 G(teInde).25 E
(x].ptr = \(pointer\) object->functionV)-.15 E(ector;)-1.11 E
(object->functionV)97 607.2 Q(ector = pri)-1.11 E -.25(va)-.25 G
(teWrapperFunction;).25 E(post-wrapped-function-stuf)97 631.2 Q 2.5(f.)
-.25 G(..)-2.5 E(})72 643.2 Q(pri)72 667.2 Q -.25(va)-.25 G
(teInitialize \(object\)).25 E 9.17(ObjectPtr object;)97 679.2 R({)72
691.2 Q(object->de)97 703.2 Q(vPri)-.25 E -.25(va)-.25 G(tes[pri).25 E
-.25(va)-.25 G(teInde).25 E(x].ptr = \(pointer\) object->functionV)-.15
E(ector;)-1.11 E(object->functionV)97 715.2 Q(ector = pri)-1.11 E -.25
(va)-.25 G(teWrapperFunction;).25 E(})72 727.2 Q
(Porting Layer De\214nition)72 768 Q 2.5(-5)106.84 G 144.06 2.5(9- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 60 60
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Thus the pri)72 84 Q -.25(va)-.25 G
(teWrapperFunction pro).25 E(vides hooks for performing w)-.15 E
(ork both before and after the wrapped)-.1 E
(function has been called; the process of resetting the functionV)72 96
Q(ector is called "unwrapping" while the)-1.11 E(process of fetching th\
e wrapped function and replacing it with the wrapping function is calle\
d "wrapping".)72 108 Q(It should be clear that GCInterest queues could \
be emulated using wrappers.)72 120 Q(In general, an)5 E 2.5(yf)-.15 G
(unction v)-2.5 E(ec-)-.15 E
(tors contained in objects can be wrapped, b)72 132 Q(ut only v)-.2 E
(ectors in GCs and Screens ha)-.15 E .3 -.15(ve b)-.2 H(een tested.).15
E(Wrapping screen functions is quite easy; each v)72 147.6 Q
(ector is indi)-.15 E(vidually wrapped.)-.25 E
(Screen functions are not sup-)5 E
(posed to change after initialization, so re)72 159.6 Q
(wrapping is technically not necessary)-.25 E 2.5(,b)-.65 G
(ut causes no problems.)-2.7 E
(Wrapping GC functions is a bit more complicated.)72 175.2 Q(GC')5 E 2.5
(sh)-.55 G -2.25 -.2(av e)-2.5 H(tw)2.7 E 2.5(os)-.1 G
(ets of function v)-2.5 E(ectors, one hanging)-.15 E
(from gc->ops and the other from gc->funcs.)72 187.2 Q
(Wrappers should modify only those v)5 E(alues, not the internal)-.25 E
-.25(va)72 199.2 S(lues as the).25 E 2.5(ym)-.15 G(ay be shared by more\
 than one GC \(and, in the case of funcs, are probably shared by all)
-2.5 E 2.5(gcs\). T)72 211.2 R 2.5(ow)-.8 G
(rap the ops, wrap the funcs and, in each func wrapper)-2.5 E 2.5(,u)-.4
G(nwrap the ops and funcs, call do)-2.5 E(wn, and)-.25 E 2.5
(re-wrap. In)72 223.2 R(each op wrapper)2.5 E 2.5(,u)-.4 G
(nwrap both the funcs and ops, call do)-2.5 E(wn and re)-.25 E
(wrap afterw)-.25 E 2.5(ards. The)-.1 F(rule is:)2.5 E
(if you wrap funcs+ops, you must al)72 235.2 Q -.1(wa)-.1 G
(ys unwrap both before do).1 E(wn calling.)-.25 E
(If you wrap ops, you must)5 E(al)72 247.2 Q -.1(wa)-.1 G
(ys pull the ops v).1 E(alue out of the GC in the func wrapper and sa)
-.25 E .3 -.15(ve i)-.2 H 2.5(t. If).15 F(you wrap funcs, you needn')2.5
E 2.5(tp)-.18 G(ull)-2.5 E(the funcs v)72 259.2 Q
(alue out of the GC to re)-.25 E(wrap as the func v)-.25 E
(alues are required to be constant.)-.25 E(In this w)5 E(ay)-.1 E 2.5
(,t)-.65 G(he)-2.5 E(wrapped v)72 271.2 Q
(alidation routine can change the op v)-.25 E(ector and not ha)-.15 E .3
-.15(ve i)-.2 H 2.5(tl).15 G(ost when your wrapper routine)-2.5 E(re)72
283.2 Q(wraps the GC.)-.25 E(This occurs when the wrapped op re)5 E -.25
(va)-.25 G(lidates the GC with ne).25 E 2.5(we)-.25 G(ntries \(man)-2.5
E 2.5(ym)-.15 G 2.5(ir)-2.5 G(outines)-2.5 E
(do this for opaque stipples or double dashes\).)72 295.2 Q
(The corollary to this rule is:)5 E(Ne)5 E -.15(ve)-.25 G 2.5(rc).15 G
(hange the func v)-2.5 E(ector)-.15 E(after CreateGC.)72 307.2 Q/F1 10
/Times-Bold@0 SF 2.5(5.9. W)72 334.8 R(ork Queue)-.75 E F0 1.6 -.8(To q)
72 350.4 T(ueue w).8 E(ork for e)-.1 E -.15(xe)-.15 G
(cution when all clients are in a stable state \(i.e.).15 E
(just before calling select\(\) in W)5 E(ait-)-.8 E -.15(Fo)72 362.4 S
(rSomething\), call:).15 E(Bool QueueW)97 374.4 Q
(orkProc\(function,client,closure\))-.8 E 28.05(Bool \(*function\)\(\);)
122 386.4 R 11.38(ClientPtr client;)122 398.4 R 44.17(pointer closure;)
122 410.4 R(When the serv)72 426 Q
(er is about to suspend itself, the gi)-.15 E -.15(ve)-.25 G 2.5(nf).15
G(unction will be e)-2.5 E -.15(xe)-.15 G(cuted:).15 E
(\(*function\) \(client, closure\))97 438 Q
(Neither client nor closure are actually used inside the w)72 453.6 Q
(ork queue routines.)-.1 E F1 2.5(6. Extension)72 477.6 R(Interfaces)2.5
E F0(This section describes the functions which e)72 493.2 Q
(xist in DDX for e)-.15 E(xtension writers to use.)-.15 E F1 2.5
(6.1. Extension)72 517.2 R(initialization)2.5 E F0
(This function should be called from your e)72 532.8 Q
(xtensionInitProc which should be called by InitExtensions.)-.15 E
(ExtensionEntry *AddExtension\(name, NumEv)97 556.8 Q(ents,NumErrors,)
-.15 E(MainProc, Sw)122 568.8 Q(appedMainProc, CloseDo)-.1 E
(wnProc, MinorOpcodeProc\))-.25 E(char *name;)122 592.8 Q
(/*Null terminate string; case matters*/)5 E(int NumEv)122 604.8 Q
(ents;)-.15 E(int NumErrors;)122 616.8 Q
(int \(* MainProc\)\(ClientPtr\);/*Called if client matches serv)122
628.8 Q(er order*/)-.15 E(int \(* Sw)122 640.8 Q
(appedMainProc\)\(ClientPtr\);/*Called if client dif)-.1 E
(fers from serv)-.25 E(er*/)-.15 E -.2(vo)122 652.8 S(id \(* CloseDo).2
E(wnProc\)\(ExtensionEntry *\);)-.25 E
(unsigned short \(*MinorOpcodeProc\)\(ClientPtr\);)122 664.8 Q
(name is the name used by clients to refer to the e)72 688.8 Q 2.5
(xtension. NumEv)-.15 F(ents is the number of e)-.15 E -.15(ve)-.25 G
(nt types used).15 E(by the e)72 700.8 Q
(xtension, NumErrors is the number of error codes needed by the e)-.15 E
2.5(xtension. MainProc)-.15 F(is called)2.5 E(whene)72 712.8 Q -.15(ve)
-.25 G 2.5(rac).15 G(lient accesses the major opcode assigned to the e)
-2.5 E 2.5(xtension. Sw)-.15 F(appedMainProc is identical,)-.1 E -.15
(ex)72 724.8 S(cept the client using the e).15 E(xtension has re)-.15 E
-.15(ve)-.25 G(rsed byte-se).15 E 2.5(x. CloseDo)-.15 F
(wnProc is called at serv)-.25 E(er reset time to)-.15 E
(Porting Layer De\214nition)72 768 Q 2.5(-6)106.84 G 144.06 2.5(0- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 61 61
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(deallocate an)72 84 Q 2.5(yp)-.15 G(ri)-2.5 E
-.25(va)-.25 G(te storage used by the e).25 E 2.5
(xtension. MinorOpcodeProc)-.15 F(is used by DIX to place the appro-)2.5
E(priate v)72 96 Q(alue into errors.)-.25 E
(The DIX routine StandardMinorOpcode can be used here which tak)5 E
(es the minor)-.1 E(opcode from the normal place in the request \(i.e. \
just after the major opcode\).)72 108 Q/F1 10/Times-Bold@0 SF 2.5
(6.2. Resour)72 132 R(ce type allocation.)-.18 E F0
(These functions should also be called from your e)72 147.6 Q
(xtensionInitProc to allocate all of the v)-.15 E(arious resource)-.25 E
(classes and types required for the e)72 159.6 Q 2.5(xtension. Each)-.15
F(time the serv)2.5 E(er resets, these types must be reallocated as)-.15
E(the old allocations will ha)72 171.6 Q .3 -.15(ve b)-.2 H
(een discarded.).15 E(Resource types are inte)5 E(ger v)-.15 E
(alues starting at 1.)-.25 E(Get a resource)5 E(type by calling)72 183.6
Q(RESTYPE CreateNe)82 207.6 Q(wResourceT)-.25 E(ype\(deleteFunc\))-.8 E
(deleteFunc will be called to destro)72 231.6 Q 2.5(ya)-.1 G
(ll resources with this type.)-2.5 E(Resource classes are masks startin\
g at 1 << 31 which can be or'ed with an)72 255.6 Q 2.5(yr)-.15 G
(esource type to pro)-2.5 E(vide)-.15 E(attrib)72 267.6 Q
(utes for the type.)-.2 E 1.6 -.8(To a)5 H(llocate a ne).8 E 2.5(wc)-.25
G(lass bit, call)-2.5 E(RESTYPE CreateNe)82 291.6 Q(wResourceClass\(\))
-.25 E(There are tw)72 315.6 Q 2.5(ow)-.1 G
(ays of looking up resources, by type or by class.)-2.6 E
(Classes are non-e)5 E(xclusi)-.15 E .3 -.15(ve s)-.25 H(ubsets of the)
.15 E(space of all resources, so you can lookup the union of multiple c\
lasses.)72 327.6 Q(\(RC_ANY is the union of all)5 E(classes\).)72 339.6
Q(Note that the appropriate class bits must be or'ed into the v)72 355.2
Q(alue returned by CreateNe)-.25 E(wResourceT)-.25 E(ype when)-.8 E
(calling resource lookup functions.)72 367.2 Q
(If you need to create a `)72 382.8 Q(`pri)-.74 E -.25(va)-.25 G(te').25
E 2.5('r)-.74 G(esource ID for internal use, you can call F)-2.5 E(ak)
-.15 E(eClientID.)-.1 E(XID F)97 406.8 Q(ak)-.15 E(eClientID\(client\))
-.1 E(int client;)107 418.8 Q(This allocates from ID space reserv)72
442.8 Q(ed for the serv)-.15 E(er)-.15 E(.)-.55 E 1.6 -.8(To a)72 458.4
T(ssociate a resource v).8 E(alue with an ID, use AddResource.)-.25 E
(Bool AddResource\(id, type, v)97 482.4 Q(alue\))-.25 E(XID id;)107
494.4 Q(RESTYPE type;)107 506.4 Q(pointer v)107 518.4 Q(alue;)-.25 E
(The type should be the full type of the resource, including an)72 542.4
Q 2.5(yc)-.15 G(lass bits.)-2.5 E(If AddResource f)5 E(ails to allocate)
-.1 E(memory to store the resource, it will call the deleteFunc for the\
 type, and then return F)72 554.4 Q(alse.)-.15 E 1.6 -.8(To f)72 570 T
(ree a resource, use one of the follo).8 E(wing.)-.25 E -.2(vo)97 594 S
(id FreeResource\(id, skipDeleteFuncT).2 E(ype\))-.8 E(XID id;)107 606 Q
(RESTYPE skipDeleteFuncT)107 618 Q(ype;)-.8 E -.2(vo)97 642 S
(id FreeResourceByT).2 E(ype\(id, type, skipFree\))-.8 E(XID id;)107 654
Q(RESTYPE type;)107 666 Q 7.5(Bool skipFree;)107 678 R
(FreeResource frees all resources matching the gi)72 702 Q -.15(ve)-.25
G 2.5(ni).15 G(d, re)-2.5 E -.05(ga)-.15 G(rdless of).05 E
(type; the type')72 714 Q 2.5(sd)-.55 G
(eleteFunc will be called on each matching resource,)-2.5 E -.15(ex)72
726 S(cept that skipDeleteFuncT).15 E
(ype can be set to a single type for which)-.8 E
(Porting Layer De\214nition)72 768 Q 2.5(-6)106.84 G 144.06 2.5(1- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 62 62
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF
(the deleteFunc should not be called \(otherwise pass R)72 84 Q
(T_NONE\).)-.6 E(FreeResourceByT)72 96 Q
(ype frees a speci\214c resource matching a gi)-.8 E -.15(ve)-.25 G 2.5
(ni).15 G(d)-2.5 E
(and type; if skipFree is true, then the deleteFunc is not called.)72
108 Q 1.6 -.8(To l)72 123.6 T(ook up a resource, use one of the follo).8
E(wing.)-.25 E(pointer LookupIDByT)97 147.6 Q(ype\(id, rtype\))-.8 E
(XID id;)107 159.6 Q(RESTYPE rtype;)107 171.6 Q
(pointer LookupIDByClass\(id, classes\))97 195.6 Q(XID id;)107 207.6 Q
(RESTYPE classes;)107 219.6 Q(LookupIDByT)72 243.6 Q
(ype \214nds a resource with the gi)-.8 E -.15(ve)-.25 G 2.5(ni).15 G
2.5(da)-2.5 G(nd e)-2.5 E(xact type.)-.15 E
(LookupIDByClass \214nds a resource)5 E(with the gi)72 255.6 Q -.15(ve)
-.25 G 2.5(ni).15 G 2.5(dw)-2.5 G(hose type is included in an)-2.5 E 2.5
(yo)-.15 G(ne of the speci\214ed classes.)-2.5 E/F1 10/Times-Bold@0 SF
2.5(6.3. Macr)72 279.6 R(os and Other Helpers)-.18 E F0
(There are a number of macros in Xserv)72 295.2 Q
(er/include/dix.h which are useful to the e)-.15 E(xtension writer)-.15
E 5(.O)-.55 G(nes of)-5 E(particular interest are: REQ)72 307.2 Q(UEST)
-.1 E 2.5(,R)-.74 G(EQ)-2.5 E(UEST_SIZE_MA)-.1 E(TCH, REQ)-1.11 E
(UEST_A)-.1 E(T_LEAST_SIZE,)-1.11 E(REQ)72 319.2 Q
(UEST_FIXED_SIZE, LEGAL_NEW_RESOURCE, LOOKUP_DRA)-.1 E -1.2(WA)-.9 G
(BLE, VERIFY_GC, and)1.2 E -1.35(VA)72 331.2 S(LID)1.35 E -1.11(AT)-.4 G
(E_DRA)1.11 E -1.2(WA)-.9 G(BLE_AND_GC. Useful byte sw)1.2 E
(apping macros can be found in)-.1 E(Xserv)72 343.2 Q
(er/include/misc.h: lsw)-.15 E(apl, lsw)-.1 E
(aps, LengthRestB, LengthRestS, LengthRestL, Sw)-.1 E(apRestS, Sw)-.1 E
(apRestL,)-.1 E(sw)72 355.2 Q(apl, sw)-.1 E(aps, cpsw)-.1 E
(apl, and cpsw)-.1 E(aps.)-.1 E(Porting Layer De\214nition)72 768 Q 2.5
(-6)106.84 G 144.06 2.5(2- A)-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 63 63
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF 2.5(7. Callback)72 84 R(Manager)2.5 E/F1 10
/Times-Roman@0 SF 1.6 -.8(To s)72 99.6 T(atisfy a gro).8 E(wing number \
of requests for the introduction of ad hoc noti\214cation style hooks i\
n the serv)-.25 E(er)-.15 E(,)-.4 E 2.5(ag)72 111.6 S
(eneric callback manager w)-2.5 E(as introduced in R6.)-.1 E 2.5(Ac)5 G
(allback list object can be introduced for each ne)-2.5 E(w)-.25 E
(hook that is desired, and other modules in the serv)72 123.6 Q
(er can re)-.15 E(gister interest in the ne)-.15 E 2.5(wc)-.25 G
(allback list.)-2.5 E(The fol-)5 E(lo)72 135.6 Q
(wing functions support these operations.)-.25 E
(Before getting bogged do)72 151.2 Q(wn in the interf)-.25 E
(ace details, an typical usage e)-.1 E
(xample should establish the frame-)-.15 E -.1(wo)72 163.2 S 2.5
(rk. Let').1 F 2.5(sl)-.55 G
(ook at the ClientStateCallback in dix/dispatch.c.)-2.5 E
(The purpose of this particular callback is to)5 E
(notify intereseted parties when a client')72 175.2 Q 2.5(ss)-.55 G
(tate \(initial, running, gone\) changes.)-2.5 E
(The callback is "created" in)5 E(this case by simply declaring a v)72
187.2 Q(ariable:)-.25 E(CallbackListPtr ClientStateCallback;)97 211.2 Q
(Whene)72 235.2 Q -.15(ve)-.25 G 2.5(rt).15 G(he client')-2.5 E 2.5(ss)
-.55 G(tate changes, the follo)-2.5 E
(wing code appears, which noti\214es all intereseted parties of the)-.25
E(change:)72 247.2 Q(if \(ClientStateCallback\) CallCallbacks\(&ClientS\
tateCallback, \(pointer\)client\);)97 271.2 Q(Interested parties subscr\
ibe to the ClientStateCallback list by saying:)72 295.2 Q
(AddCallback\(&ClientStateCallback, func, data\);)97 319.2 Q
(When CallCallbacks is in)72 343.2 Q -.2(vo)-.4 G -.1(ke).2 G 2.5(do).1
G 2.5(nt)-2.5 G(he list, func will be called thusly:)-2.5 E
(\(*func\)\(&ClientStateCallback, data, client\))97 367.2 Q(No)72 391.2
Q 2.5(wf)-.25 G(or the details.)-2.5 E
(Bool CreateCallbackList\(pcbl, cbfuncs\))97 415.2 Q 2.5
(CallbackListPtr *pcbl;)107 427.2 R(CallbackFuncsPtr cbfuncs;)107 439.2
Q(CreateCallbackList creates a callback list.)72 463.2 Q 1.6 -.8(We e)5
H -.4(nv).8 G(ision that this function will be rarely used because the)
.4 E(callback list is created automatically \(if it doesn')72 475.2 Q
2.5(ta)-.18 G(lready e)-2.5 E
(xist\) when the \214rst call to AddCallback is made)-.15 E
(on the list.)72 487.2 Q(The only reason to e)5 E
(xplicitly create the callback list with this function is if you w)-.15
E(ant to o)-.1 E -.15(ve)-.15 G(rride).15 E(the implementation of some \
of the other operations on the list by passing your o)72 499.2 Q
(wn cbfuncs.)-.25 E -1.1(Yo)5 G 2.5(ua)1.1 G(lso lose)-2.5 E
(something by e)72 511.2 Q
(xplicit creation: you introduce an order dependenc)-.15 E 2.5(yd)-.15 G
(uring serv)-2.5 E(er startup because the list)-.15 E
(must be created before an)72 523.2 Q 2.5(ym)-.15 G
(odules subscribe to it.)-2.5 E(Returns TR)5 E(UE if successful.)-.4 E
(Bool AddCallback\(pcbl, callback, subscriber_data\))97 547.2 Q
(CallbackListPtr *pcbl;)107 559.2 Q(CallbackProcPtr callback;)107 571.2
Q 20(pointer subscriber_data;)107 583.2 R
(Adds the \(callback, subscriber_data\) pair to the gi)72 607.2 Q -.15
(ve)-.25 G 2.5(nc).15 G(allback list.)-2.5 E
(Creates the callback list if it doesn')5 E(t)-.18 E -.15(ex)72 619.2 S
2.5(ist. Returns).15 F(TR)2.5 E 2.5(UE if)-.4 F(successful.)2.5 E
(Bool DeleteCallback\(pcbl, callback, subscriber_data\))97 643.2 Q
(CallbackListPtr *pcbl;)107 655.2 Q(CallbackProcPtr callback;)107 667.2
Q 20(pointer subscriber_data;)107 679.2 R(Remo)72 703.2 Q -.15(ve)-.15 G
2.5(st).15 G(he \(callback, data\) pair to the gi)-2.5 E -.15(ve)-.25 G
2.5(nc).15 G(allback list if present.)-2.5 E(Returns TR)5 E
(UE if \(callback, data\) w)-.4 E(as)-.1 E(found.)72 715.2 Q
(Porting Layer De\214nition)72 768 Q 2.5(-6)106.84 G 144.06 2.5(3- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 64 64
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF -.2(vo)97 84 S
(id CallCallbacks\(pcbl, call_data\)).2 E 7.5(CallbackListPtr *pcbl;)107
96 R 19.17(pointer call_data;)107 108 R -.15(Fo)72 132 S 2.5(re).15 G
(ach callback currently re)-2.5 E(gistered on the gi)-.15 E -.15(ve)-.25
G 2.5(nc).15 G(allback list, call it as follo)-2.5 E(ws:)-.25 E
(\(*callback\)\(pcbl, subscriber_data, call_data\);)97 156 Q -.2(vo)97
192 S(id DeleteCallbackList\(pcbl\)).2 E 7.5(CallbackListPtr *pcbl;)107
204 R(Destro)72 228 Q(ys the gi)-.1 E -.15(ve)-.25 G 2.5(nc).15 G
(allback list.)-2.5 E(Porting Layer De\214nition)72 768 Q 2.5(-6)106.84
G 144.06 2.5(4- A)-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 65 65
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF 2.5(8. Summary)72 84 R(of Routines)2.5 E/F1 10
/Times-Roman@0 SF
(This is a summary of the routines discussed in this document.)72 99.6 Q
(The procedure names are in alphabetical)5 E(order)72 111.6 Q 5(.T)-.55
G(he Struct is the structure it is attached to; if blank, this procedur\
e is not attached to a struct and)-5 E(must be named as sho)72 123.6 Q
2.5(wn. The)-.25 F(sample serv)2.5 E(er pro)-.15 E
(vides implementations in the follo)-.15 E(wing cate)-.25 E 2.5
(gories. Notice)-.15 F(that man)72 135.6 Q 2.5(yo)-.15 G 2.5(ft)-2.5 G
(he graphics routines ha)-2.5 E .3 -.15(ve b)-.2 H
(oth mi and mfb implementations.).15 E 19.16(dix portable)72 153.6 R
(to all systems; do not attempt to re)2.5 E(write \(Xserv)-.25 E
(er/dix\))-.15 E 23.05(os routine)72 165.6 R(pro)2.5 E(vided in Xserv)
-.15 E(er/os or Xserv)-.15 E(er/include/os.h)-.15 E 16.94(ddx frame)72
177.6 R -.2(bu)2.5 G -.25(ff).2 G(er dependent \(e).25 E
(xamples in Xserv)-.15 E(er/mfb,Xserv)-.15 E(er/cfb\))-.15 E 21.38
(mi routine)72 189.6 R(pro)2.5 E(vided in Xserv)-.15 E(er/mi)-.15 E
21.94(hd hardw)72 201.6 R(are dependent \(e)-.1 E(xamples in man)-.15 E
2.5(yX)-.15 G(serv)-2.5 E(er/hw directories\))-.15 E 12.5(none not)72
213.6 R(implemented in sample implementation)2.5 E 167.815
(Procedure Port)103.8 237.6 R(Struct)143.65 E .4 LW 504 242.1 72 242.1
DL(ALLOCA)72 251.6 Q 154.055(TE_LOCAL os)-1.11 F 198.5(AbortDDX hd)72
263.6 R 189.33(AddCallback dix)72 275.6 R(AddEnabledDe)72 287.6 Q
165.985(vice os)-.25 F(AddInputDe)72 299.6 Q 175.7(vice dix)-.25 F
197.67(AddScreen dix)72 311.6 R 226.82(Bell hd)72 323.6 R(De)141.85 E
(vice)-.25 E 195.43(ChangeClip mi)72 335.6 R(GC func)141.57 E 350.9
(ChangeGC GC)72 347.6 R(func)2.5 E(ChangeW)72 359.6 Q(indo)-.4 E
(wAttrib)-.25 E 136.85(utes ddx Screen)-.2 F(ClearT)72 371.6 Q 160.14
(oBackground ddx)-.8 F -.4(Wi)139.35 G(ndo).4 E(w)-.25 E 174.605
(ClientAuthorized os)72 383.6 R 192.09(ClientSignal dix)72 395.6 R
195.43(ClientSleep dix)72 407.6 R(ClientW)72 419.6 Q(ak)-.8 E 185.23
(eup dix)-.1 F 197.65(ClipNotify ddx)72 431.6 R(Screen)139.35 E 193.5
(CloseScreen hd)72 443.6 R 177.38(ConstrainCursor hd)72 455.6 R(Screen)
141.85 E(Cop)72 467.6 Q 202.21(yArea mi)-.1 F(GC op)141.57 E(Cop)72
479.6 Q 187.2(yGCDest ddx)-.1 F(GC func)139.35 E(Cop)72 491.6 Q 175.54
(yGCSource none)-.1 F(GC func)137.13 E(Cop)72 503.6 Q 199.42(yPlane mi)
-.1 F(GC op)141.57 E(Cop)72 515.6 Q(yW)-.1 E(indo)-.4 E 188.13(wd)-.25 G
136.85(dx W)-188.13 F(indo)-.4 E(w)-.25 E 201(CreateGC ddx)72 527.6 R
(Screen)139.35 E 164.89(CreateCallbackList dix)72 539.6 R 184.33
(CreatePixmap ddx)72 551.6 R(Screen)139.35 E 146.58
(CreateScreenResources ddx)72 563.6 R(Screen)139.35 E(CreateW)72 575.6 Q
(ellKno)-.8 E(wSock)-.25 E 144.105(ets os)-.1 F(CreateW)72 587.6 Q(indo)
-.4 E 183.6(wd)-.25 G 136.85(dx Screen)-183.6 F 190.15(CursorLimits hd)
72 599.6 R(Screen)141.85 E(DEALLOCA)72 611.6 Q 140.725(TE_LOCAL os)-1.11
F 180.45(DeleteCallback dix)72 623.6 R 164.89(DeleteCallbackList dix)72
635.6 R(Destro)72 647.6 Q 192.2(yClip ddx)-.1 F(GC func)139.35 E(Destro)
72 659.6 Q 195.54(yGC ddx)-.1 F(GC func)139.35 E(Destro)72 671.6 Q
178.87(yPixmap ddx)-.1 F(Screen)139.35 E(Destro)72 683.6 Q(yW)-.1 E
(indo)-.4 E 178.14(wd)-.25 G 136.85(dx Screen)-178.14 F 185.16
(DisplayCursor hd)72 695.6 R(Screen)141.85 E 222.945(Error os)72 707.6 R
217.385(ErrorF os)72 719.6 R(Porting Layer De\214nition)72 768 Q 2.5(-6)
106.84 G 144.06 2.5(5- A)-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 66 66
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 167.998(Procedure Port)111.455 84 R(Struct)
135.993 E .4 LW 503.996 88.5 72 88.5 DL -.15(Fa)72 98 S 210.933
(talError os).15 F 203.808(FillPolygon mi)72 110 R(GC op)134.098 E
211.038(FillSpans ddx)72 122 R(GC op)131.878 E 189.093
(FlushAllOutput os)72 134 R 132.433(FlushIfCriticalOutputPending os)72
146 R 142.748(FreeScratchPixmapHeader dix)72 158 R 211.618(GetImage mi)
72 170 R(Screen)134.098 E(GetMotionEv)72 182 Q 180.368(ents hd)-.15 F
(De)134.378 E(vice)-.25 E 146.078(GetScratchPixmapHeader dix)72 194 R
210.498(GetSpans ddx)72 206 R(Screen)131.878 E 171.608
(GetStaticColormap ddx)72 218 R(Screen)131.878 E 188.828
(ImageGlyphBlt mi)72 230 R(GC op)134.098 E(ImageT)72 242 Q -.15(ex)-.7 G
198.578(t16 mi).15 F(GC op)134.098 E(ImageT)72 254 Q -.15(ex)-.7 G
203.578(t8 mi).15 F(GC op)134.098 E 216.328(InitInput hd)72 266 R(InitK)
72 278 Q -.15(ey)-.25 G(boardDe).15 E 145.058(viceStruct dix)-.25 F
209.658(InitOutput hd)72 290 R(InitPointerDe)72 302 Q 155.198
(viceStruct dix)-.25 F(InsertF)72 314 Q(ak)-.15 E 177.703(eRequest os)
-.1 F 183.828(InstallColormap ddx)72 326 R(Screen)131.878 E 216.618
(Intersect mi)72 338 R(Screen)134.098 E(In)72 350 Q -.15(ve)-.4 G
222.168(rse mi).15 F(Screen)134.098 E(Le)72 362 Q -.05(ga)-.15 G 193.758
(lModi\214er hd).05 F 205.508(LineHelper mi)72 374 R(GC op)134.098 E
154.938(ListInstalledColormaps ddx)72 386 R(Screen)131.878 E(LookupK)72
398 Q -.15(ey)-.25 G(boardDe).15 E 151.728(vice dix)-.25 F
(LookupPointerDe)72 410 Q 161.868(vice dix)-.25 F 163.838
(ModifyPixmapheader mi)72 422 R(Screen)134.098 E(Ne)72 434 Q(xtA)-.15 E
-.25(va)-.74 G 168.308(ilableClient dix).25 F 226.883(OsInit os)72 446 R
-.15(Pa)72 458 S(intW).15 E(indo)-.4 E 147.968(wBackground mi)-.25 F -.4
(Wi)134.098 G(ndo).4 E(w)-.25 E -.15(Pa)72 470 S(intW).15 E(indo)-.4 E
169.078(wBorder mi)-.25 F -.4(Wi)134.098 G(ndo).4 E(w)-.25 E 158.558
(PointerNonInterestBox hd)72 482 R(Screen)134.378 E(PointInRe)72 494 Q
192.858(gion mi)-.15 F(Screen)134.098 E 217.718(PolyArc mi)72 506 R
(GC op)134.098 E 203.818(PolyFillArc mi)72 518 R(GC op)134.098 E 200.478
(PolyFillRect mi)72 530 R(GC op)134.098 E 195.478(PolyGlyphBlt mi)72 542
R(GC op)134.098 E 213.818(Polylines mi)72 554 R(GC op)134.098 E 211.588
(PolyPoint mi)72 566 R(GC op)134.098 E 192.718(PolyRectangle mi)72 578 R
(GC op)134.098 E(PolySe)72 590 Q 197.858(gment mi)-.15 F(GC op)134.098 E
(PolyT)72 602 Q -.15(ex)-.7 G 205.228(t16 mi).15 F(GC op)134.098 E
(PolyT)72 614 Q -.15(ex)-.7 G 210.228(t8 mi).15 F(GC op)134.098 E
(PositionW)72 626 Q(indo)-.4 E 184.748(wd)-.25 G 129.378(dx Screen)
-184.748 F(ProcessInputEv)72 638 Q 172.598(ents hd)-.15 F(PushPix)72 650
Q 207.298(els mi)-.15 F(GC op)134.098 E 212.718(PutImage mi)72 662 R
(GC op)134.098 E 191.338(QueryBestSize hd)72 674 R(Screen)134.378 E
152.993(ReadRequestFromClient os)72 686 R 194.118(RealizeCursor hd)72
698 R(Screen)134.378 E(Porting Layer De\214nition)72 768 Q 2.5(-6)106.84
G 144.06 2.5(6- A)-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 67 67
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 157.673(Procedure Port)103.975 84 R(Struct)
143.473 E .4 LW 503.996 88.5 72 88.5 DL(RealizeF)72 98 Q 182.843
(ont ddx)-.15 F(Screen)129.033 E(RealizeW)72 110 Q(indo)-.4 E 169.743
(wd)-.25 G 126.533(dx Screen)-169.743 F 174.643(RecolorCursor hd)72 122
R(Screen)131.533 E 206.583(RectIn mi)72 134 R(Screen)131.253 E(Re)72 146
Q(gionCop)-.15 E 185.433(ym)-.1 G 131.253(iS)-185.433 G(creen)-131.253 E
(Re)72 158 Q 178.403(gionCreate mi)-.15 F(Screen)131.253 E(Re)72 170 Q
(gionDestro)-.15 E 175.443(ym)-.1 G 131.253(iS)-175.443 G(creen)-131.253
E(Re)72 182 Q 177.833(gionEmpty mi)-.15 F(Screen)131.253 E(Re)72 194 Q
174.503(gionExtents mi)-.15 F(Screen)131.253 E(Re)72 206 Q 162.833
(gionNotEmpty mi)-.15 F(Screen)131.253 E(Re)72 218 Q 182.283
(gionReset mi)-.15 F(Screen)131.253 E(Resolv)72 230 Q 176.173
(eColor ddx)-.15 F(Screen)129.033 E(Re)72 242 Q(gisterK)-.15 E -.15(ey)
-.25 G(boardDe).15 E 131.853(vice dix)-.25 F(Re)72 254 Q
(gisterPointerDe)-.15 E 141.993(vice dix)-.25 F(Remo)72 266 Q -.15(ve)
-.15 G(EnabledDe).15 E 140.208(vice os)-.25 F 149.088
(ResetCurrentRequest os)72 278 R 174.933(RestoreAreas none)72 290 R
(BackingStore)126.813 E(Sa)72 302 Q -.15(ve)-.2 G 151.953
(DoomedAreas none).15 F(BackingStore)126.813 E(Sa)72 314 Q -.15(ve)-.2 G
184.723(Screen ddx).15 F(Screen)129.033 E 130.738
(SetCriticalOutputPending os)72 326 R 160.733(SetCursorPosition hd)72
338 R(Screen)131.533 E 172.693(SetInputCheck dix)72 350 R 194.353
(SetSpans ddx)72 362 R(GC op)129.033 E 183.243(StoreColors ddx)72 374 R
(Screen)129.033 E 199.913(Subtract mi)72 386 R(Screen)131.253 E -.35(Ti)
72 398 S(meSinceLastInputEv).35 E 129.033(ent hd)-.15 F -.35(Tr)72 410 S
137.503(anslateBackingStore none).35 F(BackingStore)126.813 E -.35(Tr)72
422 S(anslateRe).35 E 167.643(gion mi)-.15 F(Screen)131.253 E 154.353
(UninstallColormap ddx)72 434 R(Screen)129.033 E 208.243(Union mi)72 446
R(Screen)131.253 E 167.433(UnrealizeCursor hd)72 458 R(Screen)131.533 E
(UnrealizeF)72 470 Q 173.963(ont ddx)-.15 F(Screen)129.033 E(UnrealizeW)
72 482 Q(indo)-.4 E 160.863(wd)-.25 G 126.533(dx Screen)-160.863 F -1.11
(Va)72 494 S 184.363(lidateGC ddx)1.11 F(GC func)129.033 E -1.11(Va)72
506 S(lidateT)1.11 E 182.503(ree mi)-.35 F(Screen)131.253 E -.8(Wa)72
518 S(itF).8 E 158.358(orSomething os)-.15 F -.4(Wi)72 530 S(ndo).4 E
157.793(wExposures mi)-.25 F -.4(Wi)131.253 G(ndo).4 E(w)-.25 E(WriteT)
72 542 Q 176.548(oClient os)-.8 F 207.418(Xalloc os)72 554 R 211.318
(Xfree os)72 566 R 199.648(Xrealloc os)72 578 R
(Porting Layer De\214nition)72 768 Q 2.5(-6)106.84 G 144.06 2.5(7- A)
-2.5 H(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 1 68
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Bold@0 SF -1.104(Ta)242.886 96 S(ble of Contents)1.104 E/F1
10/Times-Roman@0 SF(The X W)72 132 Q(indo)-.4 E 2.5(wS)-.25 G 8.49
(ystem .)-2.5 F -2.5 10(........................ 3)10 H -.5(OV)72 144 S
(ER).5 E(VIEW OF THE SER)-.8 E 10.22(VER .)-.8 F -2.5 10
(..................... 4)10 H(Notes On Resources and Lar)72 156 Q
(ge Structs)-.18 E -2.5 10(.................... 4)12.49 H(DIX LA)72 168
Q 11.95(YER .)-1.05 F -2.5 10(........................... 5)10 H(OS LA)
72 180 Q 4.44(YER .)-1.05 F -2.5 10(............................ 6)10 H
(Scheduling and Request Deli)72 192 Q -.15(ve)-.25 G 5.75(ry .).15 F
-2.5 10(..................... 6)10 H(Ne)72 204 Q 2.5(wC)-.25 G
(lient Connections)-2.5 E -2.5 10(......................... 8)6.42 H
(Reading Data from Clients)72 216 Q -7.5 10(........................ 1)
9.51 H(0)-10 E(Inserting Data for Clients)72 228 Q -7.5 10
(......................... 1)2.57 H(0)-10 E(Sending Ev)72 240 Q
(ents, Errors And Replies T)-.15 E 2.5(oC)-.8 G 1.29(lients .)-2.5 F
-7.5 10(................. 1)10 H(0)-10 E -.15(Fo)72 252 S(nt Support).15
E -7.5 10(............................ 1)14.64 H(1)-10 E
(Memory Management)72 264 Q -7.5 10(.......................... 1)2.85 H
(1)-10 E(Client Scheduling)72 276 Q -7.5 10
(........................... 1)7.55 H(2)-10 E(Other OS Functions)72 288
Q -7.5 10(.......................... 1)12 H(3)-10 E(Idiom Support)72 300
Q -7.5 10(............................ 1)8.94 H(3)-10 E(DDX LA)72 312 Q
8.06(YER .)-1.05 F -7.5 10(........................... 1)10 H(4)-10 E
10.06(INPUT .)72 324 R -7.5 10(............................. 1)10 H(4)
-10 E(Input De)72 336 Q(vice Data Structures)-.25 E -7.5 10
(....................... 1)13.39 H(4)-10 E(Processing Ev)72 348 Q 4.1
(ents .)-.15 F -7.5 10(.......................... 1)10 H(4)-10 E -.7(Te)
72 360 S(lling DIX When Input is Pending).7 E -7.5 10
(..................... 1)11.6 H(5)-10 E(Controlling Input De)72 372 Q
10.31(vices .)-.25 F -7.5 10(....................... 1)10 H(6)-10 E
(Input Initialization)72 384 Q -7.5 10(........................... 1)
4.78 H(7)-10 E -2.15 -.25(Ke y)72 396 T(board Mapping and K).25 E -.15
(ey)-.25 G 3.39(codes .).15 F -7.5 10(..................... 1)10 H(9)-10
E 8.4(Screens .)72 408 R -7.5 10(............................. 1)10 H(9)
-10 E(Screen Hardw)72 420 Q(are Requirements)-.1 E -7.5 10
(...................... 1)14.92 H(9)-10 E(Data Structures)72 432 Q -7.5
10(............................ 1)5.07 H(9)-10 E(Output Initialization)
72 444 Q -7.5 10(.......................... 2)10.61 H(0)-10 E(Re)72 456
Q(gion Routines in the ScreenRec)-.15 E -7.5 10
(...................... 2)4.94 H(1)-10 E(Cursor Routines for a Screen)72
468 Q -7.5 10(....................... 2)13.41 H(5)-10 E -.6(Vi)72 480 S
(suals, Depths and Pixmap F).6 E(ormats for Screens)-.15 E -7.5 10
(................. 2)8.88 H(7)-10 E(Colormaps for Screens)72 492 Q -7.5
10(......................... 2)12.85 H(9)-10 E(Colormap Routines)72 504
Q -7.5 10(.......................... 2)13.94 H(9)-10 E
(Initializing a Colormap)72 516 Q -7.5 10(......................... 3)
11.17 H(1)-10 E -.15(Fo)72 528 S(nts for Screens).15 E -7.5 10
(........................... 3)9.66 H(1)-10 E(Portable Compiled F)72 540
Q 7.98(ormat .)-.15 F -7.5 10(....................... 3)10 H(2)-10 E
-.15(Fo)72 552 S(nt Realization).15 E -7.5 10
(........................... 3)13.26 H(2)-10 E(Other Screen Routines)72
564 Q -7.5 10(......................... 3)13.96 H(3)-10 E(Dra)72 576 Q
-.1(wa)-.15 G 9.49(bles .).1 F -7.5 10(............................ 3)10
H(4)-10 E 5.05(Pixmaps .)72 588 R -7.5 10
(............................. 3)10 H(4)-10 E -.4(Wi)72 600 S(ndo).4 E
1.82(ws .)-.25 F -7.5 10(............................. 3)10 H(5)-10 E
-.4(Wi)72 612 S(ndo).4 E 2.5(wP)-.25 G(rocedures in the ScreenRec)-2.5 E
-7.5 10(..................... 3)3.52 H(7)-10 E -.4(Wi)72 624 S(ndo).4 E
2.5(wP)-.25 G(ainting Procedures)-2.65 E -7.5 10
(....................... 3)13.09 H(8)-10 E
(Screen Operations for Backing Store)72 636 Q -7.5 10
(..................... 4)7.31 H(0)-10 E
(Screen Operations for Multi-Layered Frameb)72 648 Q(uf)-.2 E 10.01
(fers .)-.25 F -7.5 10(............... 4)10 H(1)-10 E(Graphics Conte)72
660 Q(xts and V)-.15 E 4.94(alidation .)-1.11 F -7.5 10
(..................... 4)10 H(3)-10 E(Details of operation)72 672 Q -7.5
10(.......................... 4)12.57 H(5)-10 E(GC Handling Routines)72
684 Q -7.5 10(......................... 4)12.83 H(5)-10 E(GC Clip Re)72
696 Q(gion Routines)-.15 E -7.5 10(........................ 4)14.08 H(6)
-10 E(Dra)72 708 Q(wing Primiti)-.15 E -.15(ve)-.25 G 13.94(s.).15 G
-7.5 10(......................... 4)-3.94 H(7)-10 E(GC Components)72 720
Q -7.5 10(........................... 4)12.55 H(7)-10 E
(Porting Layer De\214nition)72 768 Q 146.56 2.5(-1- A)109.34 H
(pril 8, 1994)-2.5 E 0 Cg EP
%%Page: 2 69
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(The Primiti)72 84 Q -.15(ve)-.25 G -8.96 8.23
(s. . . . . . . . . . . . . . . . . . . . . . . . . . . .).15 H(49)6.77
E(Pixblit Procedures)72 96 Q -7.5 10(........................... 5)5.89
H(3)-10 E(Span Routines)72 108 Q -7.5 10(............................ 5)
8.94 H(4)-10 E(Glyph Routines)72 120 Q -7.5 10
(............................ 5)3.94 H(5)-10 E(PushPix)72 132 Q
(els routine)-.15 E -7.5 10(........................... 5)4.92 H(6)-10 E
(Shutdo)72 144 Q(wn Procedures)-.25 E -7.5 10
(.......................... 5)4.76 H(7)-10 E(Command Line Procedures)72
156 Q -7.5 10(........................ 5)7.57 H(7)-10 E(Wrappers and de)
72 168 Q(vPri)-.25 E -.25(va)-.25 G 10.28(tes .).25 F -7.5 10
(....................... 5)10 H(8)-10 E(de)72 180 Q(vPri)-.25 E -.25(va)
-.25 G 6.09(tes .).25 F -7.5 10(............................ 5)10 H(8)
-10 E(Screen de)72 192 Q(vPri)-.25 E -.25(va)-.25 G 1.38(tes .).25 F
-7.5 10(.......................... 5)10 H(8)-10 E -.4(Wi)72 204 S(ndo).4
E 2.5(wd)-.25 G -.25(ev)-2.5 G(Pri).25 E -.25(va)-.25 G 7.3(tes .).25 F
-7.5 10(......................... 5)10 H(8)-10 E(GC and Pixmap de)72 216
Q(vPri)-.25 E -.25(va)-.25 G 2.2(tes .).25 F -7.5 10
(....................... 5)10 H(9)-10 E .63(Wrappers .)72 228 R -7.5 10
(............................. 5)10 H(9)-10 E -.8(Wo)72 240 S(rk Queue)
.8 E -7.5 10(............................. 6)3.93 H(0)-10 E
(Extension Interf)72 252 Q 7.68(aces .)-.1 F -7.5 10
(......................... 6)10 H(0)-10 E(Callback Manager)72 264 Q -7.5
10(........................... 6)5.91 H(3)-10 E(Summary of Routines)72
276 Q -7.5 10(.......................... 6)4.22 H(5)-10 E
(Porting Layer De\214nition)72 768 Q 146.56 2.5(-2- A)109.34 H
(pril 8, 1994)-2.5 E 0 Cg EP
%%Trailer
end
%%EOF
