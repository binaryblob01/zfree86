%!PS-Adobe-3.0
%%Creator: groff version 1.19.2
%%CreationDate: Mon Dec 29 10:44:19 2008
%%DocumentNeededResources: font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%DocumentSuppliedResources: procset grops 1.19 2
%%Pages: 39
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginResource: procset grops 1.19 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
}bind def
/PEND{
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
%%IncludeResource: font Times-Roman
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Roman@0 ENC0/Times-Roman RE/Times-Italic@0 ENC0/Times-Italic RE
/Times-Bold@0 ENC0/Times-Bold RE
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
BP
%%EndPageSetup
/F0 14/Times-Bold@0 SF(Inter)196.097 123 Q(-Client Exchange Library)
-.518 E/F1 12/Times-Bold@0 SF -1.2(Ve)259.602 153 S(rsion 1.0)1.2 E 3
(XC)225.996 183 S(onsortium Standard)-3 E 3(XV)223.944 213 S
(ersion 11, Release 6.4)-4.2 E/F2 10/Times-Italic@0 SF(Ralph Mor)266.195
249 Q/F3 10/Times-Roman@0 SF 2.5(XC)259.525 267 S(onsortium)-2.5 E(Cop)
196.745 300.6 Q(yright \251 1993, 1994, 1996 X Consortium)-.1 E .171
(Permission is hereby granted, free of char)72 382.2 R .171(ge, to an)
-.18 F 2.671(yp)-.15 G .17(erson obtaining a cop)-2.671 F 2.67(yo)-.1 G
2.67(ft)-2.67 G .17(his softw)-2.67 F .17(are and associated)-.1 F .393
(documentation \214les \(the `)72 394.2 R(`Softw)-.74 E(are')-.1 E .393
('\), to deal in the Softw)-.74 F .393
(are without restriction, including without limita-)-.1 F 1.054
(tion the rights to use, cop)72 406.2 R 2.354 -.65(y, m)-.1 H(odify).65
E 3.554(,m)-.65 G(er)-3.554 E 1.054(ge, publish, distrib)-.18 F 1.053
(ute, sublicense, and/or sell copies of the Soft-)-.2 F -.1(wa)72 418.2
S .014(re, and to permit persons to whom the Softw).1 F .015
(are is furnished to do so, subject to the follo)-.1 F .015
(wing conditions:)-.25 F .187(The abo)72 433.8 R .487 -.15(ve c)-.15 H
(op).15 E .187(yright notice and this permission notice shall be includ\
ed in all copies or substantial portions)-.1 F(of the Softw)72 445.8 Q
(are.)-.1 E 1.19(THE SOFTW)72 461.4 R 1.19(ARE IS PR)-1.2 F -.5(OV)-.4 G
1.191(IDED `).5 F -.8(`A)-.74 G 3.691(SI).8 G(S')-3.691 E 1.191
(', WITHOUT W)-.74 F 1.191(ARRANTY OF ANY KIND, EXPRESS OR)-1.2 F .375
(IMPLIED, INCLUDING B)72 473.4 R .375(UT NO)-.1 F 2.875(TL)-.4 G .375
(IMITED T)-2.875 F 2.875(OT)-.18 G .375(HE W)-2.875 F .375
(ARRANTIES OF MERCHANT)-1.2 F(ABILITY)-.93 E 2.875(,F)-1.29 G(IT)-2.875
E(-)-.92 E .542(NESS FOR A P)72 485.4 R(AR)-.92 E .542
(TICULAR PURPOSE AND NONINFRINGEMENT)-.6 F 5.543(.I)-.74 G 3.043(NN)
-5.543 G 3.043(OE)-3.043 G .543(VENT SHALL THE X)-3.043 F(CONSOR)72
497.4 Q .846(TIUM BE LIABLE FOR ANY CLAIM, D)-.6 F(AMA)-.4 E .845
(GES OR O)-.4 F .845(THER LIABILITY)-.4 F 3.345(,W)-1.29 G .845
(HETHER IN)-3.345 F .609(AN A)72 509.4 R .609(CTION OF CONTRA)-.4 F(CT)
-.4 E 3.109(,T)-.74 G(OR)-3.289 E 3.109(TO)-.6 G 3.109(RO)-3.109 G(THER)
-3.509 E .609(WISE, ARISING FR)-.55 F .61(OM, OUT OF OR IN CONNEC-)-.4 F
(TION WITH THE SOFTW)72 521.4 Q(ARE OR THE USE OR O)-1.2 E
(THER DEALINGS IN THE SOFTW)-.4 E(ARE.)-1.2 E .418(Except as contained \
in this notice, the name of the X Consortium shall not be used in adv)72
537 R .418(ertising or other)-.15 F(-)-.2 E .192
(wise to promote the sale, use or other dealings in this Softw)72 549 R
.192(are without prior written authorization from the)-.1 F 2.5(XC)72
561 S(onsortium.)-2.5 E 2.5(XW)72 633 S(indo)-2.9 E 2.5(wS)-.25 G
(ystem is a trademark of X Consortium, Inc.)-2.5 E 0 Cg EP
%%Page: 2 2
%%BeginPageSetup
BP
%%EndPageSetup
0 Cg EP
%%Page: 1 3
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF 2.5(1. Ov)72 84 R(er)-.1 E(view of ICE)-.1 E/F1
10/Times-Roman@0 SF .314(There are numerous possible inter)72 99.6 R
.314(-client protocols, with man)-.2 F 2.814(ys)-.15 G .314
(imilarities and common needs - authentica-)-2.814 F 1.006(tion, v)72
111.6 R 1.006(ersion ne)-.15 F 1.006(gotiation, byte order ne)-.15 F
1.006(gotiation, and so on.)-.15 F 1.007(The Inter)6.007 F 1.007
(-Client Exchange \(ICE\) protocol is)-.2 F .325(intended to pro)72
123.6 R .325(vide a frame)-.15 F -.1(wo)-.25 G .325(rk for b).1 F .325
(uilding such protocols, allo)-.2 F .325(wing them to mak)-.25 F 2.825
(eu)-.1 G .325(se of common ne)-2.825 F(go-)-.15 E
(tiation mechanisms and to be multiple)72 135.6 Q -.15(xe)-.15 G 2.5(do)
.15 G -.15(ve)-2.65 G 2.5(ras).15 G(ingle transport connection.)-2.5 E
F0 2.5(2. The)72 159.6 R(ICE Library - C Language Interface to ICE)2.5 E
F1 2.595(Ac)72 175.2 S .095
(lient that wishes to utilize ICE must \214rst re)-2.595 F .096
(gister the protocols it understands with the ICE library)-.15 F 5.096
(.E)-.65 G(ach)-5.096 E .773(protocol is dynamically assigned a major o\
pcode ranging from 1-255 \(tw)72 187.2 R 3.272(oc)-.1 G .772
(lients can use dif)-3.272 F .772(ferent major)-.25 F 1.142
(opcodes for the same protocol\).)72 199.2 R 1.142(The ne)6.142 F 1.142
(xt step for the client is either to open a connection with another)-.15
F .34(client or to w)72 211.2 R .34
(ait for connections made by other clients.)-.1 F .34
(Authentication may be required.)5.34 F 2.84(Ac)5.34 G .34
(lient can both)-2.84 F .502
(initiate connections with other clients and be w)72 223.2 R .503
(aiting for clients to connect to itself \(a nested session man-)-.1 F
1.314(ager is an e)72 235.2 R 3.814(xample\). Once)-.15 F 1.314
(an ICE connection is established between the tw)3.814 F 3.813(oc)-.1 G
1.313(lients, one of the clients)-3.813 F .408(needs to initiate a)72
247.2 R F0(Pr)3.741 E(otocolSetup)-.18 E F1 .408(in order to "acti)3.741
F -.25(va)-.25 G .408(te" a gi).25 F -.15(ve)-.25 G 2.909(np).15 G 2.909
(rotocol. Once)-2.909 F .409(the other client accepts the)2.909 F F0(Pr)
72.833 259.2 Q(otocolSetup)-.18 E F1 .106(\(once ag)3.439 F .106
(ain, authentication may be required\), the tw)-.05 F 2.606(oc)-.1 G
.105(lients are ready to start passing mes-)-2.606 F .438
(sages speci\214c to that protocol to each other)72 271.2 R 5.438(.M)
-.55 G .438(ultiple protocols may be acti)-5.438 F .738 -.15(ve o)-.25 H
2.939(nas).15 G .439(ingle ICE connection.)-2.939 F .292(Clients are re\
sponsible for notifying the ICE library when a protocol is no longer ac\
ti)72 283.2 R .591 -.15(ve o)-.25 H 2.791(na).15 G 2.791(nI)-2.791 G
.291(CE connec-)-2.791 F(tion, although ICE does not de\214ne ho)72
295.2 Q 2.5(we)-.25 G(ach subprotocol triggers a protocol shutdo)-2.5 E
(wn.)-.25 E .855
(The ICE library utilizes callbacks to process incoming messages.)72
310.8 R .856(Using callbacks allo)5.856 F(ws)-.25 E F0(Pr)4.189 E
(otocolSetup)-.18 E F1 1.446
(messages and authentication to happen behind the scenes.)72 322.8 R
1.445(An additional bene\214t is that messages ne)6.446 F -.15(ve)-.25 G
(r).15 E(need to be b)72 334.8 Q(uf)-.2 E
(fered up by the library when the client blocks w)-.25 E
(aiting for a particular message.)-.1 E F0 2.5(3. Intended)72 358.8 R
-.5(Au)2.5 G(dience).5 E F1 .986(This document is intended primarily fo\
r implementors of protocol libraries layered on top of ICE.)72 374.4 R
-.8(Ty)5.986 G(pi-).8 E(cally)72 386.4 Q 4.11(,a)-.65 G 1.61
(pplications that wish to utilize ICE will mak)-4.11 F 4.109(ec)-.1 G
1.609(alls into indi)-4.109 F 1.609
(vidual protocol libraries rather than)-.25 F .806(directly mak)72 398.4
R 3.306(ec)-.1 G .807(alls into the ICE library)-3.306 F 5.807(.H)-.65 G
-.25(ow)-5.807 G -2.15 -.25(ev e).25 H 1.607 -.4(r, s).25 H .807
(ome applications will ha).4 F 1.107 -.15(ve t)-.2 H 3.307(om).15 G(ak)
-3.307 E 3.307(es)-.1 G .807(ome initial calls)-3.307 F .401
(into the ICE library in order to accept ICE connections \(for e)72
410.4 R .401(xample, a session manager accepting connec-)-.15 F .937
(tions from clients\).)72 422.4 R .937(But in general, protocol librari\
es should be designed to hide the inner details of ICE)5.937 F
(from applications.)72 434.4 Q F0 2.5(4. Header)72 458.4 R
(Files and Library Name)2.5 E F1 1.606(The header \214le <)72 474 R F0
(X11/ICE/ICElib).833 E(.h)-.4 E F1 4.106(>d).833 G 1.606
(e\214nes all of the ICElib data structures and function prototypes.)
-4.106 F F0(ICElib)72.833 486 Q(.h)-.4 E F1 .642
(includes the header \214le <)3.975 F F0(X11/ICE/ICE.h).833 E F1 .642
(>, which de\214nes all of the ICElib constants.).833 F(Protocol)5.643 E
(libraries that need to read and write messages should include the head\
er \214le <)72 498 Q F0(X11/ICE/ICEmsg).833 E(.h)-.15 E F1(>.).833 E
(Applications should link ag)72 513.6 Q(ainst ICElib using -lICE.)-.05 E
F0 2.5(5. Note)72 537.6 R(on Pr)2.5 E(e\214xes)-.18 E F1 .842(The follo)
72 553.2 R .842(wing name pre\214x)-.25 F .842(es are used in the libra\
ry to distinguish between a client that initiates a)-.15 F F0(Pr)4.174 E
(oto-)-.18 E(colSetup)72 565.2 Q F1(and a client that responds with a)
3.333 E F0(Pr)3.333 E(otocolReply)-.18 E F1(:).833 E<83>72 580.8 Q F0
(IceP)22.333 E(o)-.2 E F1 2.5<ad49>3.333 G(ce Protocol Originator)-2.5 E
<83>72 596.4 Q F0(IceP)22.333 E(a)-.1 E F1 2.5<ad49>3.333 G
(ce Protocol Acceptor)-2.5 E F0 2.5(6. Pr)72 620.4 R
(otocol Registration)-.18 E F1 .052(In order for tw)72 636 R 2.552(oc)
-.1 G .052(lients to e)-2.552 F .052(xchange messages for a gi)-.15 F
-.15(ve)-.25 G 2.552(np).15 G .052(rotocol, each side must re)-2.552 F
.053(gister the protocol with)-.15 F .005(the ICE library)72 648 R 5.005
(.T)-.65 G .005(he purpose of re)-5.005 F .005(gistration is for each s\
ide to obtain a major opcode for the protocol and to)-.15 F(pro)72 660 Q
.208
(vide callbacks for processing messages and handling authentication.)
-.15 F .209(There are tw)5.208 F 2.709(os)-.1 G .209(eparate re)-2.709 F
(gistration)-.15 E(functions:)72 672 Q 21.5<834f>72 687.6 S
(ne to handle the side that does a)-21.5 E F0(Pr)3.333 E(otocolSetup)
-.18 E F1 21.5<834f>72 703.2 S
(ne to handle the side that responds with a)-21.5 E F0(Pr)3.333 E
(otocolReply)-.18 E F1 .952(It is recommended that protocol re)72 718.8
R .951(gistration occur before the tw)-.15 F 3.451(oc)-.1 G .951
(lients establish an ICE connection.)-3.451 F(If)5.951 E .062
(protocol re)72 730.8 R .062(gistration occurs after an ICE connection \
is created, there can be a brief interv)-.15 F .063(al of time in which)
-.25 F 2.5<ad31ad>277.36 768 S 0 Cg EP
%%Page: 2 4
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E/F1 10/Times-Roman@0 SF(a)72 84 Q F0(Pr)4.233
E(otocolSetup)-.18 E F1 .899(is recei)4.233 F -.15(ve)-.25 G .899(d, b)
.15 F .899(ut the protocol is not re)-.2 F 3.399(gistered. If)-.15 F
.899(it is not possible to re)3.399 F .899(gister a protocol)-.15 F .106
(before the creation of an ICE connection, proper precautions should be\
 tak)72 96 R .106(en to a)-.1 F -.2(vo)-.2 G .106(id the abo).2 F .406
-.15(ve r)-.15 H .106(ace condi-).15 F(tion.)72 108 Q(The)72 135.6 Q F0
(IceRegisterF)3.333 E(orPr)-.25 E(otocolSetup)-.18 E F1
(function should be called for the client that initiates a)3.333 E F0
(Pr)3.333 E(otocolSetup)-.18 E F1(.).833 E .4 LW 50.4 152.1 50.4 162.1
DL 50.4 150.1 50.4 160.1 DL 55.4 150.6 50.4 150.6 DL 57.4 150.6 52.4
150.6 DL 62.4 150.6 57.4 150.6 DL(int IceRe)72 163.2 Q(gisterF)-.15 E
-1.667(orProtocolSetup \()-.15 F/F2 10/Times-Italic@0 SF(pr).833 E
(otocol_name)-.45 E F1(,)A F2(vendor)2.5 E F1(,).833 E F2 -.37(re)2.5 G
(lease).37 E F1(,).833 E F2(ver)2.5 E(sion_count)-.1 E F1(,).833 E F2
(ver)2.5 E(sion_r)-.1 E(ecs)-.37 E F1(,).833 E F2(auth_count)114.5 175.2
Q F1(,).833 E F2(auth_names)2.5 E F1(,).833 E F2(auth_pr)2.5 E(ocs)-.45
E F1(,).833 E F2(io_err)2.5 E(or_pr)-.45 E(oc)-.45 E F1(\)).833 E
(char *)84.5 187.2 Q F2(pr)A(otocol_name)-.45 E F1(;).833 E(char *)84.5
199.2 Q F2(vendor)A F1(;).833 E(char *)84.5 211.2 Q F2 -.37(re)C(lease)
.37 E F1(;).833 E(int)84.5 223.2 Q F2(ver)2.5 E(sion_count)-.1 E F1(;)
.833 E(IcePoV)84.5 235.2 Q(ersionRec *)-1.11 E F2(ver)A(sion_r)-.1 E
(ecs)-.37 E F1(;).833 E(int)84.5 247.2 Q F2(auth_count)2.5 E F1(;).833 E
(char **)84.5 259.2 Q F2(auth_names)A F1(;).833 E(IcePoAuthProc *)84.5
271.2 Q F2(auth_pr)A(ocs)-.45 E F1(;).833 E(IceIOErrorProc)84.5 283.2 Q
F2(io_err)2.5 E(or_pr)-.45 E(oc)-.45 E F1(;).833 E F2(pr)72 302.4 Q
(otocol_name)-.45 E F1 2.5(As)11.9 G
(tring specifying the name of the protocol to re)-2.5 E(gister)-.15 E(.)
-.55 E F2(vendor)72 318 Q F1 2.5(Av)44.23 G
(endor string with semantics speci\214ed by the protocol.)-2.65 E F2
-.37(re)72 333.6 S(lease).37 E F1 2.5(Ar)43.49 G
(elease string with semantics speci\214ed by the protocol.)-2.5 E F2
(ver)72 349.2 Q(sion_count)-.1 E F1(The number of dif)15.44 E(ferent v)
-.25 E(ersions of the protocol supported.)-.15 E F2(ver)72 364.8 Q
(sion_r)-.1 E(ecs)-.37 E F1(List of v)21.37 E
(ersions and associated callbacks.)-.15 E F2(auth_count)72 380.4 Q F1
(The number of authentication methods supported.)27 E F2(auth_names)72
396 Q F1(The list of authentication methods supported.)23.67 E F2
(auth_pr)72 411.6 Q(ocs)-.45 E F1(The list of authentication callbacks,\
 one for each authentication method.)27.45 E F2(io_err)72 427.2 Q(or_pr)
-.45 E(oc)-.45 E F1(IO error handler)15.68 E 2.5(,o)-.4 G 2.5(rN)-2.5 G
(ULL.)-2.5 E 50.4 423.3 50.4 433.3 DL 50.4 421.3 50.4 431.3 DL 55.4
434.8 50.4 434.8 DL 57.4 434.8 52.4 434.8 DL 62.4 434.8 57.4 434.8 DL F0
(IceRegisterF)72.833 454.8 Q(orPr)-.25 E(otocolSetup)-.18 E F1 1.186
(returns the major opcode reserv)4.519 F 1.186
(ed or -1 if an error occurred.)-.15 F 1.186(In order to)6.186 F 1.108
(actually acti)72 466.8 R -.25(va)-.25 G 1.109(te the protocol, the).25
F F0(IcePr)4.442 E(otocolSetup)-.18 E F1 1.109
(function needs to be called with this major opcode.)4.442 F
(Once the protocol is acti)72 478.8 Q -.25(va)-.25 G(ted, all messages \
for the protocol should be sent using this major opcode.).25 E 3.158(Ap)
72 494.4 S .658(rotocol library may support multiple v)-3.158 F .658
(ersions of the same protocol.)-.15 F .658(The v)5.658 F .657
(ersion_recs ar)-.15 F .657(gument speci-)-.18 F 1.321
(\214es a list of supported v)72 506.4 R 1.321(ersions of the protocol,\
 which are prioritized in decreasing order of preference.)-.15 F .536
(Each v)72 518.4 R .536(ersion record consists of a major and minor v)
-.15 F .536(ersion of the protocol as well as a callback to be used)-.15
F(for processing incoming messages.)72 530.4 Q 50.4 550.5 50.4 560.5 DL
50.4 548.5 50.4 558.5 DL 55.4 549 50.4 549 DL 57.4 549 52.4 549 DL 62.4
549 57.4 549 DL(typedef struct {)72 564 Q(int major_v)108 576 Q(ersion;)
-.15 E(int minor_v)108 588 Q(ersion;)-.15 E
(IcePoProcessMsgProc process_msg_proc;)108 600 Q 2.5(}I)72 612 S(cePoV)
-2.5 E(ersionRec;)-1.11 E 50.4 614.1 50.4 624.1 DL 50.4 612.1 50.4 622.1
DL 55.4 625.6 50.4 625.6 DL 57.4 625.6 52.4 625.6 DL 62.4 625.6 57.4
625.6 DL(The)72 645.6 Q F0(IceP)3.671 E(oPr)-.2 E(ocessMsgPr)-.18 E(oc)
-.18 E F1 .339(callback is responsible for processing the set of messag\
es that can be recei)3.671 F -.15(ve)-.25 G(d).15 E .135
(by the client that initiated the)72 657.6 R F0(Pr)3.467 E(otocolSetup)
-.18 E F1 5.134(.F).833 G .134
(or further information, see section 6.1, `)-5.284 F .134
(`Callbacks for Pro-)-.74 F(cessing Messages.)72 669.6 Q -.74('')-.7 G
.586(Authentication may be required before the protocol can become acti)
72 685.2 R -.15(ve)-.25 G 5.586(.T).15 G .586
(he protocol library must re)-5.586 F(gister)-.15 E 1.436
(the authentication methods that it supports with the ICE library)72
697.2 R 6.436(.T)-.65 G 1.435(he auth_names and auth_procs ar)-6.436 F
(gu-)-.18 E .063
(ments are a list of authentication names and callbacks that are)72
709.2 R .063(prioritized in decreasing order of preference.)5.063 F -.15
(Fo)72 721.2 S 2.5(ri).15 G(nformation on the)-2.5 E F0(IceP)3.333 E(oA)
-.2 E(uthPr)-.5 E(oc)-.18 E F1(callback, see section 6.2, `)3.333 E -.8
(`A)-.74 G(uthentication Methods.).8 E -.74('')-.7 G 2.5<ad32ad>277.36
768 S 0 Cg EP
%%Page: 3 5
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E/F1 10/Times-Roman@0 SF(The)72 84 Q F0
(IceIOErr)4.804 E(orPr)-.18 E(oc)-.18 E F1 1.471(callback is in)4.804 F
-.2(vo)-.4 G -.1(ke).2 G 3.97(di).1 G 3.97(ft)-3.97 G 1.47
(he ICE connection une)-3.97 F 1.47(xpectedly breaks.)-.15 F -1.1(Yo)
6.47 G 3.97(us)1.1 G 1.47(hould pass)-3.97 F .438
(NULL for io_error_proc if not interested in being noti\214ed.)72 96 R
-.15(Fo)5.439 G 2.939(rf).15 G .439
(urther information, see section 13, `)-2.939 F(`Error)-.74 E(Handling.)
72 108 Q -.74('')-.7 G(The)72 135.6 Q F0(IceRegisterF)5.464 E(orPr)-.25
E(otocolReply)-.18 E F1 2.131
(function should be called for the client that responds to a)5.464 F F0
(Pr)5.463 E(oto-)-.18 E(colSetup)72 147.6 Q F1(with a)3.333 E F0(Pr)
3.333 E(otocolReply)-.18 E F1(.).833 E .4 LW 50.4 164.1 50.4 174.1 DL
50.4 162.1 50.4 172.1 DL 55.4 162.6 50.4 162.6 DL 57.4 162.6 52.4 162.6
DL 62.4 162.6 57.4 162.6 DL(int IceRe)72 175.2 Q(gisterF)-.15 E -1.667
(orProtocolReply \()-.15 F/F2 10/Times-Italic@0 SF(pr).833 E
(otocol_name)-.45 E F1(,)A F2(vendor)2.5 E F1(,).833 E F2 -.37(re)2.5 G
(lease).37 E F1(,).833 E F2(ver)2.5 E(sion_count)-.1 E F1(,).833 E F2
(ver)2.5 E(sion_r)-.1 E(ecs)-.37 E F1(,).833 E F2(auth_count)122 187.2 Q
F1(,).833 E F2(auth_names)2.5 E F1(,).833 E F2(auth_pr)2.5 E(ocs)-.45 E
F1(,).833 E F2(host_based_auth_pr)2.5 E(oc)-.45 E F1(,).833 E F2(pr)2.5
E(otocol_setup_pr)-.45 E(oc)-.45 E F1(,).833 E F2(pr)124.5 199.2 Q
(otocol_activate_pr)-.45 E(oc)-.45 E F1(,).833 E F2(io_err)2.5 E(or_pr)
-.45 E(oc)-.45 E F1(\)).833 E(char *)84.5 211.2 Q F2(pr)A(otocol_name)
-.45 E F1(;).833 E(char *)84.5 223.2 Q F2(vendor)A F1(;).833 E(char *)
84.5 235.2 Q F2 -.37(re)C(lease).37 E F1(;).833 E(int)84.5 247.2 Q F2
(ver)2.5 E(sion_count)-.1 E F1(;).833 E(IceP)84.5 259.2 Q(aV)-.15 E
(ersionRec *)-1.11 E F2(ver)A(sion_r)-.1 E(ecs)-.37 E F1(;).833 E(int)
84.5 271.2 Q F2(auth_count)2.5 E F1(;).833 E(char **)84.5 283.2 Q F2
(auth_names)A F1(;).833 E(IceP)84.5 295.2 Q(aAuthProc *)-.15 E F2
(auth_pr)A(ocs)-.45 E F1(;).833 E(IceHostBasedAuthProc)84.5 307.2 Q F2
(host_based_auth_pr)2.5 E(oc)-.45 E F1(;).833 E(IceProtocolSetupProc)
84.5 319.2 Q F2(pr)2.5 E(otocol_setup_pr)-.45 E(oc)-.45 E F1(;).833 E
(IceProtocolActi)84.5 331.2 Q -.25(va)-.25 G(teProc).25 E F2(pr)2.5 E
(otocol_activate_pr)-.45 E(oc)-.45 E F1(;).833 E(IceIOErrorProc)84.5
343.2 Q F2(io_err)2.5 E(or_pr)-.45 E(oc)-.45 E F1(;).833 E F2(pr)72
362.4 Q(otocol_name)-.45 E F1 2.5(As)11.9 G
(tring specifying the name of the protocol to re)-2.5 E(gister)-.15 E(.)
-.55 E F2(vendor)72 378 Q F1 2.5(Av)44.23 G
(endor string with semantics speci\214ed by the protocol.)-2.65 E F2
-.37(re)72 393.6 S(lease).37 E F1 2.5(Ar)43.49 G
(elease string with semantics speci\214ed by the protocol.)-2.5 E F2
(ver)72 409.2 Q(sion_count)-.1 E F1(The number of dif)15.44 E(ferent v)
-.25 E(ersions of the protocol supported.)-.15 E F2(ver)72 424.8 Q
(sion_r)-.1 E(ecs)-.37 E F1(List of v)21.37 E
(ersions and associated callbacks.)-.15 E F2(auth_count)72 440.4 Q F1
(The number of authentication methods supported.)27 E F2(auth_names)72
456 Q F1(The list of authentication methods supported.)23.67 E F2
(auth_pr)72 471.6 Q(ocs)-.45 E F1(The list of authentication callbacks,\
 one for each authentication method.)27.45 E F2(host_based_auth_pr)72
487.2 Q(oc)-.45 E F1(Host based authentication callback.)144 499.2 Q F2
(pr)72 514.8 Q(otocol_setup_pr)-.45 E(oc)-.45 E F1 3.938(Ac)144 526.8 S
1.438(allback to be in)-3.938 F -.2(vo)-.4 G -.1(ke).2 G 3.939(dw).1 G
1.439(hen authentication has succeeded for a)-3.939 F F0(Pr)4.772 E
(otocolSetup)-.18 E F1 -.2(bu)4.772 G(t).2 E(before the)144 538.8 Q F0
(Pr)3.333 E(otocolReply)-.18 E F1(is sent.)3.333 E F2(pr)72 554.4 Q
(otocol_activate_pr)-.45 E(oc)-.45 E F1 2.5(Ac)144 566.4 S
(allback to be in)-2.5 E -.2(vo)-.4 G -.1(ke).2 G 2.5(da).1 G(fter the)
-2.5 E F0(Pr)3.333 E(otocolReply)-.18 E F1(is sent.)3.333 E F2(io_err)72
582 Q(or_pr)-.45 E(oc)-.45 E F1(IO error handler)15.68 E 2.5(,o)-.4 G
2.5(rN)-2.5 G(ULL.)-2.5 E 50.4 578.1 50.4 588.1 DL 50.4 576.1 50.4 586.1
DL 55.4 589.6 50.4 589.6 DL 57.4 589.6 52.4 589.6 DL 62.4 589.6 57.4
589.6 DL F0(IceRegisterF)72.833 609.6 Q(orPr)-.25 E(otocolReply)-.18 E
F1 1.299(returns the major opcode reserv)4.632 F 1.299
(ed or -1 if an error occurred.)-.15 F 1.298(The major)6.298 F(opcode s\
hould be used in all subsequent messages sent for this protocol.)72
621.6 Q 3.157(Ap)72 637.2 S .658(rotocol library may support multiple v)
-3.157 F .658(ersions of the same protocol.)-.15 F .658(The v)5.658 F
.658(ersion_recs ar)-.15 F .658(gument speci-)-.18 F 1.322
(\214es a list of supported v)72 649.2 R 1.321(ersions of the protocol,\
 which are prioritized in decreasing order of preference.)-.15 F .536
(Each v)72 661.2 R .536(ersion record consists of a major and minor v)
-.15 F .536(ersion of the protocol as well as a callback to be used)-.15
F(for processing incoming messages.)72 673.2 Q 2.5<ad33ad>277.36 768 S 0
Cg EP
%%Page: 4 6
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E .4 LW 50.4 76.5 50.4 86.5 DL 50.4 74.5 50.4
84.5 DL 55.4 75 50.4 75 DL 57.4 75 52.4 75 DL 62.4 75 57.4 75 DL/F1 10
/Times-Roman@0 SF(typedef struct {)72 90 Q(int major_v)108 102 Q
(ersion;)-.15 E(int minor_v)108 114 Q(ersion;)-.15 E(IceP)108 126 Q
(aProcessMsgProc process_msg_proc;)-.15 E 2.5(}I)72 138 S(ceP)-2.5 E(aV)
-.15 E(ersionRec;)-1.11 E 50.4 140.1 50.4 150.1 DL 50.4 138.1 50.4 148.1
DL 55.4 151.6 50.4 151.6 DL 57.4 151.6 52.4 151.6 DL 62.4 151.6 57.4
151.6 DL(The)72 171.6 Q F0(IceP)3.665 E(aPr)-.1 E(ocessMsgPr)-.18 E(oc)
-.18 E F1 .332(callback is responsible for processing the set of messag\
es that can be recei)3.665 F -.15(ve)-.25 G(d).15 E 1.395
(by the client that accepted the)72 183.6 R F0(Pr)4.728 E(otocolSetup)
-.18 E F1 6.395(.F).833 G 1.395
(or further information, see section 6.1, `)-6.545 F 1.396
(`Callbacks for)-.74 F(Processing Messages.)72 195.6 Q -.74('')-.7 G
.586(Authentication may be required before the protocol can become acti)
72 211.2 R -.15(ve)-.25 G 5.586(.T).15 G .585
(he protocol library must re)-5.586 F(gister)-.15 E 1.436
(the authentication methods that it supports with the ICE library)72
223.2 R 6.436(.T)-.65 G 1.436(he auth_names and auth_procs ar)-6.436 F
(gu-)-.18 E .219(ments are a list of authentication names and callbacks\
 that are prioritized in decreasing order of preference.)72 235.2 R -.15
(Fo)72 247.2 S 2.5(ri).15 G(nformation on the)-2.5 E F0(IceP)3.333 E(aA)
-.1 E(uthPr)-.5 E(oc)-.18 E F1(callback, see section 6.2, `)3.333 E -.8
(`A)-.74 G(uthentication Methods.).8 E -.74('')-.7 G .801
(If authentication f)72 262.8 R .802
(ails and the client attempting to initiate the)-.1 F F0(Pr)4.135 E
(otocolSetup)-.18 E F1 .802(has not required authentica-)4.135 F .858
(tion, the)72 274.8 R F0(IceHostBasedA)4.191 E(uthPr)-.5 E(oc)-.18 E F1
.858(callback is in)4.191 F -.2(vo)-.4 G -.1(ke).2 G 3.358(dw).1 G .857
(ith the host name of the originating client.)-3.358 F .857(If the)5.857
F 1.749(callback returns)72 286.8 R F0 -.74(Tr)5.082 G(ue).74 E F1 4.249
(,t).833 G(he)-4.249 E F0(Pr)5.082 E(otocolSetup)-.18 E F1 1.749
(will succeed, e)5.082 F -.15(ve)-.25 G 4.249(nt).15 G 1.749
(hough the original authentication f)-4.249 F(ailed.)-.1 E 2.243
(Note that authentication can ef)72 298.8 R(fecti)-.25 E -.15(ve)-.25 G
2.242(ly be disabled by re).15 F 2.242(gistering an)-.15 F F0
(IceHostBasedA)5.575 E(uthPr)-.5 E(oc)-.18 E F1 4.742(,w).833 G(hich)
-4.742 E(al)72 310.8 Q -.1(wa)-.1 G 4.576(ys returns).1 F F0 -.74(Tr)
7.909 G(ue).74 E F1 9.576(.I).833 G 7.076(fn)-9.576 G 7.077(oh)-7.076 G
4.577(ost based authentication is allo)-7.077 F 4.577
(wed, you should pass NULL for)-.25 F(host_based_auth_proc.)72 322.8 Q
50.4 342.9 50.4 352.9 DL 50.4 340.9 50.4 350.9 DL 55.4 341.4 50.4 341.4
DL 57.4 341.4 52.4 341.4 DL 62.4 341.4 57.4 341.4 DL
(typedef Bool \(*IceHostBasedAuthProc\) \(\);)72 354 Q
(Bool HostBasedAuthProc)72 378 Q(\().833 E/F2 10/Times-Italic@0 SF
(host_name).833 E F1(\)).833 E(char *)82 390 Q F2(host_name)A F1(;).833
E F2(host_name)72 409.2 Q F1(The host name of the client that sent the)
28.67 E F0(Pr)3.333 E(otocolSetup)-.18 E F1(.).833 E 50.4 405.3 50.4
415.3 DL 50.4 403.3 50.4 413.3 DL 55.4 416.8 50.4 416.8 DL 57.4 416.8
52.4 416.8 DL 62.4 416.8 57.4 416.8 DL .417(The host_name ar)72 436.8 R
.417(gument is a string of the form)-.18 F F2(pr)2.917 E(otocol)-.45 E
F1(/).833 E F2(hostname).833 E F1 2.917(,w)C(here)-2.917 E F2(pr)2.917 E
(otocol)-.45 E F1 .417(is one of {tcp, decnet,)3.75 F(local}.)72 448.8 Q
(Because)72 464.4 Q F0(Pr)3.822 E(otocolSetup)-.18 E F1 .49(messages an\
d authentication happen behind the scenes via callbacks, the protocol)
3.822 F 1.589(library needs some w)72 476.4 R 1.588
(ay of being noti\214ed when the)-.1 F F0(Pr)4.921 E(otocolSetup)-.18 E
F1 1.588(has completed.)4.921 F 1.588(This occurs in tw)6.588 F(o)-.1 E
2.998(phases. In)72 488.4 R .499(the \214rst phase, the)2.998 F F0
(IcePr)3.832 E(otocolSetupPr)-.18 E(oc)-.18 E F1 .499(callback is in)
3.832 F -.2(vo)-.4 G -.1(ke).2 G 2.999(da).1 G .499
(fter authentication has success-)-2.999 F .527(fully completed b)72
500.4 R .526(ut before the ICE library sends a)-.2 F F0(Pr)3.859 E
(otocolReply)-.18 E F1 5.526(.A).833 G .826 -.15(ny r)-5.526 H .526
(esources required for this proto-).15 F 1.68
(col should be allocated at this time.)72 512.4 R 1.68(If the)6.68 F F0
(IcePr)5.013 E(otocolSetupPr)-.18 E(oc)-.18 E F1 1.681
(returns a successful status, the ICE)5.013 F 1.029
(library will send the)72 524.4 R F0(Pr)4.362 E(otocolReply)-.18 E F1
1.029(and then in)4.362 F -.2(vo)-.4 G 1.229 -.1(ke t).2 H(he).1 E F0
(IcePr)4.362 E(otocolActi)-.18 E -.1(va)-.1 G(tePr).1 E(oc)-.18 E F1
3.528(callback. Otherwise,)4.362 F
(an error will be sent to the other client in response to the)72 536.4 Q
F0(Pr)3.333 E(otocolSetup)-.18 E F1(.).833 E(The)72 552 Q F0(IcePr)3.89
E(otocolActi)-.18 E -.1(va)-.1 G(tePr).1 E(oc)-.18 E F1 .557
(is an optional callback and should be re)3.89 F .558
(gistered only if the protocol library)-.15 F .336
(intends to generate a message immediately follo)72 564 R .336(wing the)
-.25 F F0(Pr)3.669 E(otocolReply)-.18 E F1 5.336(.Y).833 G .336
(ou should pass NULL for pro-)-6.436 F(tocol_acti)72 576 Q -.25(va)-.25
G(te_proc if not interested in this callback.).25 E 2.5<ad34ad>277.36
768 S 0 Cg EP
%%Page: 5 7
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E .4 LW 50.4 76.5 50.4 86.5 DL 50.4 74.5 50.4
84.5 DL 55.4 75 50.4 75 DL 57.4 75 52.4 75 DL 62.4 75 57.4 75 DL/F1 10
/Times-Roman@0 SF(typedef Status \(*IceProtocolSetupProc\) \(\);)72 87.6
Q(Status ProtocolSetupProc)72 111.6 Q(\().833 E/F2 10/Times-Italic@0 SF
(ice_conn).833 E F1(,)A F2(major_ver)2.5 E(sion)-.1 E F1(,).833 E F2
(minor_ver)2.5 E(sion)-.1 E F1(,).833 E F2(vendor)2.5 E F1(,).833 E F2
-.37(re)2.5 G(lease).37 E F1(,).833 E F2(client_data_r)122 123.6 Q(et)
-.37 E F1(,).833 E F2(failur)2.5 E(e_r)-.37 E(eason_r)-.37 E(et)-.37 E
F1(\)).833 E(IceConn)84.5 135.6 Q F2(ice_conn)2.5 E F1(;).833 E(int)84.5
147.6 Q F2(major_ver)2.5 E(sion)-.1 E F1(;).833 E(int)84.5 159.6 Q F2
(minor_ver)2.5 E(sion)-.1 E F1(;).833 E(char *)84.5 171.6 Q F2(vendor)A
F1(;).833 E(char *)84.5 183.6 Q F2 -.37(re)C(lease).37 E F1(;).833 E
(IcePointer *)84.5 195.6 Q F2(client_data_r)A(et)-.37 E F1(;).833 E
(char **)84.5 207.6 Q F2(failur)A(e_r)-.37 E(eason_r)-.37 E(et)-.37 E F1
(;).833 E F2(ice_conn)72 226.8 Q F1(The ICE connection object.)35.9 E F2
(major_ver)72 242.4 Q(sion)-.1 E F1(The major v)13.77 E
(ersion of the protocol.)-.15 E F2(minor_ver)72 258 Q(sion)-.1 E F1
(The minor v)13.77 E(ersion of the protocol.)-.15 E F2(vendor)72 273.6 Q
F1(The v)44.23 E(endor string re)-.15 E
(gistered by the protocol originator)-.15 E(.)-.55 E F2 -.37(re)72 289.2
S(lease).37 E F1(The release string re)43.49 E
(gistered by the protocol originator)-.15 E(.)-.55 E F2(client_data_r)72
304.8 Q(et)-.37 E F1(Client data to be set by callback.)11.26 E F2
(failur)72 320.4 Q(e_r)-.37 E(eason_r)-.37 E(et)-.37 E F1 -.15(Fa)144
332.4 S(ilure reason returned.).15 E 50.4 328.5 50.4 338.5 DL 50.4 326.5
50.4 336.5 DL 55.4 340 50.4 340 DL 57.4 340 52.4 340 DL 62.4 340 57.4
340 DL 1.043(The pointer stored in the client_data_ret ar)72 360 R 1.044
(gument will be passed to the)-.18 F F0(IceP)4.377 E(aPr)-.1 E
(ocessMsgPr)-.18 E(oc)-.18 E F1(callback)4.377 E(whene)72 372 Q -.15(ve)
-.25 G 2.5(ram).15 G(essage has arri)-2.5 E -.15(ve)-.25 G 2.5(df).15 G
(or this protocol on the ICE connection.)-2.5 E(The v)72 387.6 Q
(endor and release strings should be freed with)-.15 E F0(fr)3.333 E(ee)
-.18 E F1(when the)3.333 E 2.5(ya)-.15 G(re no longer needed.)-2.5 E
.838(If a f)72 403.2 R .838(ailure occurs, the)-.1 F F0(IcePr)4.171 E
(otocolSetupPr)-.18 E(oc)-.18 E F1 .838
(should return a zero status as well as allocate and return a)4.171 F
-.1(fa)72 415.2 S(ilure reason string in f).1 E 2.5
(ailure_reason_ret. The)-.1 F
(ICE library will be responsible for freeing this memory)2.5 E(.)-.65 E
(The)72 430.8 Q F0(IcePr)3.333 E(otocolActi)-.18 E -.1(va)-.1 G(tePr).1
E(oc)-.18 E F1(callback is de\214ned as follo)3.333 E(ws:)-.25 E 50.4
447.3 50.4 457.3 DL 50.4 445.3 50.4 455.3 DL 55.4 445.8 50.4 445.8 DL
57.4 445.8 52.4 445.8 DL 62.4 445.8 57.4 445.8 DL(typedef v)72 458.4 Q
(oid \(*IceProtocolActi)-.2 E -.25(va)-.25 G(teProc\)\(\);).25 E -.2(vo)
72 482.4 S(id ProtocolActi).2 E -.25(va)-.25 G -1.667(teProc \().25 F F2
(ice_conn).833 E F1(,)A F2(client_data)2.5 E F1(\)).833 E(IceConn)82
494.4 Q F2(ice_conn)2.5 E F1(;).833 E(IcePointer)82 506.4 Q F2
(client_data)2.5 E F1(;).833 E F2(ice_conn)72 525.6 Q F1
(The ICE connection object.)35.9 E F2(client_data)72 541.2 Q F1
(The client data set in the)27 E F0(IcePr)3.333 E(otocolSetupPr)-.18 E
(oc)-.18 E F1(callback.)3.333 E 50.4 537.3 50.4 547.3 DL 50.4 535.3 50.4
545.3 DL 55.4 548.8 50.4 548.8 DL 57.4 548.8 52.4 548.8 DL 62.4 548.8
57.4 548.8 DL(The)72 568.8 Q F0(IceIOErr)4.803 E(orPr)-.18 E(oc)-.18 E
F1 1.47(callback is in)4.803 F -.2(vo)-.4 G -.1(ke).2 G 3.97(di).1 G
3.97(ft)-3.97 G 1.47(he ICE connection une)-3.97 F 1.471
(xpectedly breaks.)-.15 F -1.1(Yo)6.471 G 3.971(us)1.1 G 1.471
(hould pass)-3.971 F .439
(NULL for io_error_proc if not interested in being noti\214ed.)72 580.8
R -.15(Fo)5.439 G 2.939(rf).15 G .438
(urther information, see section 13, `)-2.939 F(`Error)-.74 E(Handling.)
72 592.8 Q -.74('')-.7 G F0 2.5(6.1. Callbacks)72 616.8 R -.25(fo)2.5 G
2.5(rP).25 G -.18(ro)-2.5 G(cessing Messages).18 E F1 .913
(When an application detects that there is ne)72 632.4 R 3.413(wd)-.25 G
.913(ata to read on an ICE connection \(via)-3.413 F F0(select)4.246 E
F1 .913(\), it calls the).833 F F0(IcePr)72.833 644.4 Q(ocessMessages)
-.18 E F1 .441(function \(see section 9, `)3.774 F .441
(`Processing Messages')-.74 F 2.941('\). When)-.74 F F0(IcePr)3.774 E
(ocessMessages)-.18 E F1(reads)3.773 E .119
(an ICE message header with a major opcode other than zero \(reserv)72
656.4 R .119(ed for the ICE protocol\), it needs to call)-.15 F 2.5(af)
72 668.4 S(unction that will read the rest of the message, unpack it, a\
nd process it accordingly)-2.5 E(.)-.65 E .251(If the message arri)72
684 R -.15(ve)-.25 G 2.751(sa).15 G 2.751(tt)-2.751 G .251
(he client that initiated the)-2.751 F F0(Pr)3.583 E(otocolSetup)-.18 E
F1 2.75(,t).833 G(he)-2.75 E F0(IceP)3.583 E(oPr)-.2 E(ocessMsgPr)-.18 E
(oc)-.18 E F1 .25(callback is)3.583 F 2.5<ad35ad>277.36 768 S 0 Cg EP
%%Page: 6 8
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E/F1 10/Times-Roman@0 SF(in)72 84 Q -.2(vo)-.4
G -.1(ke).2 G(d.).1 E .4 LW 50.4 100.5 50.4 110.5 DL 50.4 98.5 50.4
108.5 DL 55.4 99 50.4 99 DL 57.4 99 52.4 99 DL 62.4 99 57.4 99 DL
(typedef v)72 111.6 Q(oid \(*IcePoProcessMsgProc\)\(\);)-.2 E -.2(vo)72
135.6 S(id PoProcessMsgProc).2 E(\().833 E/F2 10/Times-Italic@0 SF
(ice_conn).833 E F1(,)A F2(client_data)2.5 E F1(,).833 E F2(opcode)2.5 E
F1(,).833 E F2(length)2.5 E F1(,).833 E F2(swap)2.5 E F1(,).833 E F2
-.37(re)2.5 G(ply_wait).37 E F1(,).833 E F2 -.37(re)2.5 G(ply_r).37 E
(eady_r)-.37 E(et)-.37 E F1(\)).833 E(IceConn)82 147.6 Q F2(ice_conn)2.5
E F1(;).833 E(IcePointer)82 159.6 Q F2(client_data)2.5 E F1(;).833 E
(int)82 171.6 Q F2(opcode)2.5 E F1(;).833 E(unsigned long)82 183.6 Q F2
(length)2.5 E F1(;).833 E(Bool)82 195.6 Q F2(swap)2.5 E F1(;).833 E
(IceReplyW)82 207.6 Q(aitInfo *)-.8 E F2 -.37(re)C(ply_wait).37 E F1(;)
.833 E(Bool *)82 219.6 Q F2 -.37(re)C(ply_r).37 E(eady_r)-.37 E(et)-.37
E F1(;).833 E F2(ice_conn)72 238.8 Q F1(The ICE connection object.)35.9
E F2(client_data)72 254.4 Q F1
(Client data associated with this protocol on the ICE connection.)27 E
F2(opcode)72 270 Q F1(The minor opcode of the message.)43.12 E F2
(length)72 285.6 Q F1(The length \(in 8-byte units\) of the message be)
47 E(yond the ICE header)-.15 E(.)-.55 E F2(swap)72 301.2 Q F1 2.5<418d>
51.44 G(ag that indicates if byte sw)-2.5 E(apping is necessary)-.1 E(.)
-.65 E F2 -.37(re)72 316.8 S(ply_wait).37 E F1(Indicates if the in)29.59
E -.2(vo)-.4 G(king client is w).2 E(aiting for a reply)-.1 E(.)-.65 E
F2 -.37(re)72 332.4 S(ply_r).37 E(eady_r)-.37 E(et)-.37 E F1(If set to)
8.68 E F0 -.74(Tr)3.333 G(ue).74 E F1 2.5(,ar).833 G(eply is ready)-2.5
E(.)-.65 E 50.4 328.5 50.4 338.5 DL 50.4 326.5 50.4 336.5 DL 55.4 340
50.4 340 DL 57.4 340 52.4 340 DL 62.4 340 57.4 340 DL .086
(If the message arri)72 360 R -.15(ve)-.25 G 2.586(sa).15 G 2.586(tt)
-2.586 G .086(he client that accepted the)-2.586 F F0(Pr)3.419 E
(otocolSetup)-.18 E F1 2.587(,t).833 G(he)-2.587 E F0(IceP)3.42 E(aPr)
-.1 E(ocessMsgPr)-.18 E(oc)-.18 E F1 .087(callback is)3.42 F(in)72 372 Q
-.2(vo)-.4 G -.1(ke).2 G(d.).1 E 50.4 388.5 50.4 398.5 DL 50.4 386.5
50.4 396.5 DL 55.4 387 50.4 387 DL 57.4 387 52.4 387 DL 62.4 387 57.4
387 DL(typedef v)72 399.6 Q(oid \(*IceP)-.2 E(aProcessMsgProc\)\(\);)
-.15 E -.2(vo)72 423.6 S(id P).2 E -1.667(aProcessMsgProc \()-.15 F F2
(ice_conn).833 E F1(,)A F2(client_data)2.5 E F1(,).833 E F2(opcode)2.5 E
F1(,).833 E F2(length)2.5 E F1(,).833 E F2(swap)2.5 E F1(\)).833 E
(IceConn)82 435.6 Q F2(ice_conn)2.5 E F1(;).833 E(IcePointer)82 447.6 Q
F2(client_data)2.5 E F1(;).833 E(int)82 459.6 Q F2(opcode)2.5 E F1(;)
.833 E(unsigned long)82 471.6 Q F2(length)2.5 E F1(;).833 E(Bool)82
483.6 Q F2(swap)2.5 E F1(;).833 E F2(ice_conn)72 502.8 Q F1
(The ICE connection object.)35.9 E F2(client_data)72 518.4 Q F1
(Client data associated with this protocol on the ICE connection.)27 E
F2(opcode)72 534 Q F1(The minor opcode of the message.)43.12 E F2
(length)72 549.6 Q F1(The length \(in 8-byte units\) of the message be)
47 E(yond the ICE header)-.15 E(.)-.55 E F2(swap)72 565.2 Q F1 2.5<418d>
51.44 G(ag that indicates if byte sw)-2.5 E(apping is necessary)-.1 E(.)
-.65 E 50.4 561.3 50.4 571.3 DL 50.4 559.3 50.4 569.3 DL 55.4 572.8 50.4
572.8 DL 57.4 572.8 52.4 572.8 DL 62.4 572.8 57.4 572.8 DL .872(In orde\
r to read the message, both of these callbacks should use the macros de\
\214ned for this purpose \(see)72 592.8 R .923(section 12.2, `)72 604.8
R .923(`Reading ICE Messages')-.74 F 3.423('\). Note)-.74 F .924
(that byte sw)3.423 F .924(apping may be necessary)-.1 F 5.924(.A)-.65 G
3.424(sac)-5.924 G(on)-3.424 E -.15(ve)-.4 G(nience,).15 E
(the length \214eld in the ICE header will be sw)72 616.8 Q
(apped by ICElib if necessary)-.1 E(.)-.65 E .428
(In both of these callbacks, the client_data ar)72 632.4 R .428
(gument is a pointer to client data that w)-.18 F .427(as re)-.1 F .427
(gistered at)-.15 F F0(Pr)3.76 E(oto-)-.18 E(colSetup)72 644.4 Q F1
4.193(time. In)5.026 F 1.693(the case of)4.193 F F0(IceP)5.026 E(oPr)-.2
E(ocessMsgPr)-.18 E(oc)-.18 E F1 4.194(,t).833 G 1.694(he client data w)
-4.194 F 1.694(as set in the call to)-.1 F F0(IcePr)5.027 E(oto-)-.18 E
(colSetup)72 656.4 Q F1 5.018(.I).833 G 2.518(nt)-5.018 G .018
(he case of)-2.518 F F0(IceP)3.351 E(aPr)-.1 E(ocessMsgPr)-.18 E(oc)-.18
E F1 2.518(,t).833 G .017(he client data w)-2.518 F .017(as set in the)
-.1 F F0(IcePr)3.35 E(otocolSetupPr)-.18 E(oc)-.18 E F1(call-)3.35 E
(back.)72 668.4 Q(The)72 684 Q F0(IceP)3.61 E(oPr)-.2 E(ocessMsgPr)-.18
E(oc)-.18 E F1 .277(callback needs to check the reply_w)3.61 F .277
(ait ar)-.1 F 2.778(gument. If)-.18 F(reply_w)2.778 E .278
(ait is NULL , the)-.1 F .695(ICE library e)72 696 R .695
(xpects the function to pass the message to the client via a callback.)
-.15 F -.15(Fo)5.695 G 3.195(re).15 G .695(xample, if this is a)-3.345 F
.825(Session Management `)72 708 R(`Sa)-.74 E 1.125 -.15(ve Y)-.2 H
-1.95(ourself ')-.95 F 3.325('m)-.74 G .826
(essage, this function should notify the client of the `)-3.325 F(`Sa)
-.74 E 1.126 -.15(ve Y)-.2 H(our)-.95 E(-)-.2 E -1.95(self ')72 720 R
2.5('v)-.74 G(ia a callback.)-2.5 E(The details of ho)5 E 2.5(ws)-.25 G
(uch a callback w)-2.5 E
(ould be de\214ned are implementation-dependent.)-.1 E 2.5<ad36ad>277.36
768 S 0 Cg EP
%%Page: 7 9
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E/F1 10/Times-Roman@0 SF(Ho)72 84 Q(we)-.25 E
-.15(ve)-.25 G .812 -.4(r, i).15 H 2.512(fr).4 G(eply_w)-2.512 E .012
(ait is not NULL , then the client is w)-.1 F .012
(aiting for a reply or an error for a message it pre)-.1 F(vi-)-.25 E
(ously sent.)72 96 Q(The reply_w)5 E(ait is of type)-.1 E F0(IceReplyW)
3.333 E(aitInf)-.65 E(o)-.25 E F1(.).833 E .4 LW 50.4 112.5 50.4 122.5
DL 50.4 110.5 50.4 120.5 DL 55.4 111 50.4 111 DL 57.4 111 52.4 111 DL
62.4 111 57.4 111 DL(typedef struct {)72 126 Q
(unsigned long sequence_of_request;)108 138 Q
(int major_opcode_of_request;)108 150 Q(int minor_opcode_of_request;)108
162 Q(IcePointer reply;)108 174 Q 2.5(}I)72 186 S(ceReplyW)-2.5 E
(aitInfo;)-.8 E 50.4 188.1 50.4 198.1 DL 50.4 186.1 50.4 196.1 DL 55.4
199.6 50.4 199.6 DL 57.4 199.6 52.4 199.6 DL 62.4 199.6 57.4 199.6 DL F0
(IceReplyW)72.833 219.6 Q(aitInf)-.65 E(o)-.25 E F1 1.319(contains the \
major/minor opcodes and sequence number of the message for which a)4.651
F .809(reply is being a)72 231.6 R -.1(wa)-.15 G 3.309(ited. It).1 F
.808(also contains a pointer to the reply message to be \214lled in \(t\
he protocol library)3.309 F .75(should cast this)72 243.6 R F0(IceP)
4.083 E(ointer)-.2 E F1 .751(to the appropriate reply type\).)4.084 F
.751(In most cases, the reply will ha)5.751 F 1.051 -.15(ve s)-.2 H .751
(ome \214x).15 F(ed-)-.15 E .627(size part, and the client w)72 255.6 R
.627(aiting for the reply will ha)-.1 F .926 -.15(ve p)-.2 H(ro).15 E
.626(vided a pointer to a structure to hold this \214x)-.15 F(ed-)-.15 E
1.119(size data.)72 267.6 R 1.119(If there is v)6.119 F 1.12
(ariable-length data, it w)-.25 F 1.12(ould be e)-.1 F 1.12
(xpected that the)-.15 F F0(IceP)4.453 E(oPr)-.2 E(ocessMsgPr)-.18 E(oc)
-.18 E F1(callback)4.453 E .716(will ha)72 279.6 R 1.016 -.15(ve t)-.2 H
3.216(oa).15 G .716(llocate additional memory and store pointer\(s\) to\
 that memory in the \214x)-3.216 F .715(ed-size structure.)-.15 F(If)
5.715 E .784(the entire data is v)72 291.6 R .784
(ariable length \(for e)-.25 F .784(xample., a single v)-.15 F .785
(ariable-length string\), then the client w)-.25 F .785(aiting for)-.1 F
.167(the reply w)72 303.6 R .166
(ould probably just pass a pointer to \214x)-.1 F .166
(ed-size space to hold a pointer)-.15 F 2.666(,a)-.4 G .166(nd the)
-2.666 F F0(IceP)3.499 E(oPr)-.2 E(ocessMs-)-.18 E(gPr)72 315.6 Q(oc)
-.18 E F1 .284(callback w)3.616 F .284
(ould allocate the storage and store the pointer)-.1 F 5.284(.I)-.55 G
2.784(ti)-5.284 G 2.784(st)-2.784 G .284
(he responsibility of the client recei)-2.784 F(v-)-.25 E
(ing the reply to free an)72 327.6 Q 2.5(ym)-.15 G
(emory allocated on its behalf.)-2.5 E 1.257(If reply_w)72 343.2 R 1.257
(ait is not NULL and)-.1 F F0(IceP)4.59 E(oPr)-.2 E(ocessMsgPr)-.18 E
(oc)-.18 E F1 1.257(has a reply or error to return in response to this)
4.59 F(reply_w)72 355.2 Q .732(ait \(that is, no callback w)-.1 F .732
(as generated\), then the reply_ready_ret ar)-.1 F .733
(gument should be set to)-.18 F F0 -.74(Tr)4.066 G(ue).74 E F1(.).833 E
.846(Note that an error should only be returned if it corresponds to th\
e reply being w)72 367.2 R .846(aited for)-.1 F 5.846(.O)-.55 G .846
(therwise, the)-5.846 F F0(IceP)72.833 379.2 Q(oPr)-.2 E(ocessMsgPr)-.18
E(oc)-.18 E F1(should either handle the error internally or in)3.333 E
-.2(vo)-.4 G .2 -.1(ke a).2 H 2.5(ne).1 G(rror handler for its library)
-2.5 E(.)-.65 E 1.448(If reply_w)72 394.8 R 1.449
(ait is NULL, then care must be tak)-.1 F 1.449(en not to store an)-.1 F
3.949(yv)-.15 G 1.449(alue in reply_ready_ret, because this)-4.199 F
(pointer may also be NULL.)72 406.8 Q(The)72 422.4 Q F0(IceP)3.575 E
(aPr)-.1 E(ocessMsgPr)-.18 E(oc)-.18 E F1 .242
(callback, on the other hand, should al)3.575 F -.1(wa)-.1 G .241
(ys pass the message to the client via a).1 F 3.131(callback. F)72 434.4
R .631(or e)-.15 F .631(xample, if this is a Session Management `)-.15 F
.632(`Interact Request')-.74 F 3.132('m)-.74 G .632
(essage, this function should)-3.132 F(notify the client of the `)72
446.4 Q(`Interact Request')-.74 E 2.5('v)-.74 G(ia a callback.)-2.5 E
1.094(The reason the)72 462 R F0(IceP)4.427 E(aPr)-.1 E(ocessMsgPr)-.18
E(oc)-.18 E F1 1.093(callback does not ha)4.427 F 1.393 -.15(ve a r)-.2
H(eply_w).15 E 1.093(ait, lik)-.1 F(e)-.1 E F0(IceP)4.426 E(oPr)-.2 E
(ocessMsgPr)-.18 E(oc)-.18 E F1 1.045
(does, is because a process that is acting as a serv)72 474 R 1.045
(er should ne)-.15 F -.15(ve)-.25 G 3.545(rb).15 G 1.046
(lock for a reply \(in\214nite blocking can)-3.545 F
(occur if the connecting client does not act properly)72 486 Q 2.5(,d)
-.65 G(en)-2.5 E(ying access to other clients\).)-.15 E F0 2.5(6.2. A)72
510 R(uthentication Methods)-.5 E F1 .537
(As already stated, a protocol library must re)72 525.6 R .536
(gister the authentication methods that it supports with the ICE)-.15 F
(library)72 537.6 Q 5(.F)-.65 G
(or each authentication method, there are tw)-5.15 E 2.5(oc)-.1 G
(allbacks that may be re)-2.5 E(gistered:)-.15 E 21.5<834f>72 553.2 S
(ne to handle the side that initiates a)-21.5 E F0(Pr)3.333 E
(otocolSetup)-.18 E F1 21.5<834f>72 568.8 S
(ne to handle the side that accepts or rejects this request)-21.5 E F0
(IceP)72.833 584.4 Q(oA)-.2 E(uthPr)-.5 E(oc)-.18 E F1 .232
(is the callback in)3.565 F -.2(vo)-.4 G -.1(ke).2 G 2.733(df).1 G .233
(or the client that initiated the)-2.733 F F0(Pr)3.566 E(otocolSetup)
-.18 E F1 5.233(.T).833 G .233(his callback must)-5.233 F .999
(be able to respond to the initial `)72 596.4 R -.8(`A)-.74 G .998
(uthentication Required').8 F 3.498('m)-.74 G .998
(essage or subsequent `)-3.498 F -.8(`A)-.74 G .998(uthentication Ne).8
F(xt)-.15 E(Phase')72 608.4 Q 2.5('m)-.74 G
(essages sent by the other client.)-2.5 E 2.5<ad37ad>277.36 768 S 0 Cg
EP
%%Page: 8 10
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E .4 LW 50.4 76.5 50.4 86.5 DL 50.4 74.5 50.4
84.5 DL 55.4 75 50.4 75 DL 57.4 75 52.4 75 DL 62.4 75 57.4 75 DL/F1 10
/Times-Roman@0 SF(typedef IcePoAuthStatus \(*IcePoAuthProc\)\(\);)72
87.6 Q(IcePoAuthStatus PoAuthProc)72 111.6 Q(\().833 E/F2 10
/Times-Italic@0 SF(ice_conn).833 E F1(,)A F2(auth_state_ptr)2.5 E F1(,)
.833 E F2(clean_up)2.5 E F1(,).833 E F2(swap)2.5 E F1(,).833 E F2
(auth_datalen)2.5 E F1(,).833 E F2(auth_data)2.5 E F1(,).833 E F2 -.37
(re)122 123.6 S(ply_datalen_r).37 E(et)-.37 E F1(,).833 E F2 -.37(re)2.5
G(ply_data_r).37 E(et)-.37 E F1(,).833 E F2(err)2.5 E(or_string_r)-.45 E
(et)-.37 E F1(\)).833 E(IceConn)82 135.6 Q F2(ice_conn)2.5 E F1(;).833 E
(IcePointer *)82 147.6 Q F2(auth_state_ptr)A F1(;).833 E(Bool)82 159.6 Q
F2(clean_up)2.5 E F1(;).833 E(Bool)82 171.6 Q F2(swap)2.5 E F1(;).833 E
(int)82 183.6 Q F2(auth_datalen)2.5 E F1(;).833 E(IcePointer)82 195.6 Q
F2(auth_data)2.5 E F1(;).833 E(int *)82 207.6 Q F2 -.37(re)C
(ply_datalen_r).37 E(et)-.37 E F1(;).833 E(IcePointer *)82 219.6 Q F2
-.37(re)C(ply_data_r).37 E(et)-.37 E F1(;).833 E(char **)82 231.6 Q F2
(err)A(or_string_r)-.45 E(et)-.37 E F1(;).833 E F2(ice_conn)72 250.8 Q
F1(The ICE connection object.)35.9 E F2(auth_state_ptr)72 266.4 Q F1 2.5
(Ap)13.66 G
(ointer to state for use by the authentication callback procedure.)-2.5
E F2(clean_up)72 282 Q F1(If)35.34 E F0 -.74(Tr)4.245 G(ue).74 E F1
3.412(,a).833 G .912(uthentication is o)-3.412 F -.15(ve)-.15 G 1.712
-.4(r, a).15 H .912(nd the function should clean up an).4 F 3.413(ys)
-.15 G .913(tate it w)-3.413 F .913(as main-)-.1 F 2.5(taining. The)144
294 R(last 6 ar)2.5 E(guments should be ignored.)-.18 E F2(swap)72 309.6
Q F1(If)51.44 E F0 -.74(Tr)3.333 G(ue).74 E F1 2.5(,t).833 G
(he auth_data may ha)-2.5 E .3 -.15(ve t)-.2 H 2.5(ob).15 G 2.5(eb)-2.5
G(yte sw)-2.5 E(apped \(depending on its contents\).)-.1 E F2
(auth_datalen)72 325.2 Q F1
(The length \(in bytes\) of the authenticator data.)19.22 E F2
(auth_data)72 340.8 Q F1(The data from the authenticator)31.44 E(.)-.55
E F2 -.37(re)72 356.4 S(ply_datalen_r).37 E(et)-.37 E F1
(The length \(in bytes\) of the reply data returned.)144 368.4 Q F2 -.37
(re)72 384 S(ply_data_r).37 E(et)-.37 E F1(The reply data returned.)13.3
E F2(err)72 399.6 Q(or_string_r)-.45 E(et)-.37 E F1 .815(If the authent\
ication procedure encounters an error during authentication, it should \
allo-)7.26 F(cate and return an error string.)144 411.6 Q 50.4 407.7
50.4 417.7 DL 50.4 405.7 50.4 415.7 DL 55.4 419.2 50.4 419.2 DL 57.4
419.2 52.4 419.2 DL 62.4 419.2 57.4 419.2 DL .712
(Authentication may require se)72 439.2 R -.15(ve)-.25 G .713
(ral phases, depending on the authentication method.).15 F .713
(As a result, the)5.713 F F0(Ice-)4.046 E -.2(Po)72 451.2 S -.5(Au).2 G
(thPr).5 E(oc)-.18 E F1 .995(may be called more than once when authenti\
cating a client, and some state will ha)4.329 F 1.295 -.15(ve t)-.2 H
3.495(ob).15 G(e)-3.495 E 1.095(maintained between each in)72 463.2 R
-.2(vo)-.4 G 3.595(cation. At).2 F 1.096(the start of each)3.596 F F0
(Pr)4.429 E(otocolSetup)-.18 E F1 3.596(,*).833 G 1.096
(auth_state_ptr is NULL, and)-3.596 F 1.085
(the function should initialize its state and set this pointer)72 475.2
R 6.084(.I)-.55 G 3.584(ns)-6.084 G 1.084(ubsequent in)-3.584 F -.2(vo)
-.4 G 1.084(cations of the callback, the).2 F
(pointer should be used to get at an)72 487.2 Q 2.5(ys)-.15 G(tate pre)
-2.5 E(viously stored by the callback.)-.25 E 1.006(If needed, the netw)
72 502.8 R 1.006(ork ID of the client accepting the)-.1 F F0(Pr)4.339 E
(otocolSetup)-.18 E F1 1.006(can be obtained by calling the)4.339 F F0
(Ice-)4.339 E(ConnectionString)72 514.8 Q F1(function.)3.333 E(ICElib w\
ill be responsible for freeing the reply_data_ret and error_string_ret \
pointers with)72 530.4 Q F0(fr)3.333 E(ee)-.18 E F1(.).833 E 1.718
(The auth_data pointer may point to a v)72 546 R 1.718
(olatile block of memory)-.2 F 6.718(.I)-.65 G 4.218(ft)-6.718 G 1.718
(he data must be k)-4.218 F 1.717(ept be)-.1 F 1.717(yond this)-.15 F
(in)72 558 Q -.2(vo)-.4 G(cation of the callback, be sure to mak).2 E
2.5(eac)-.1 G(op)-2.5 E 2.5(yo)-.1 G 2.5(fi)-2.5 G(t.)-2.5 E(The)72
573.6 Q F0(IceP)3.333 E(oA)-.2 E(uthPr)-.5 E(oc)-.18 E F1
(should return one of four v)3.333 E(alues:)-.25 E<83>72 589.2 Q F0
(IceP)22.333 E(oA)-.2 E(uthHa)-.5 E -.1(ve)-.25 G(Reply).1 E F1 2.5
(\255ar)3.333 G(eply is a)-2.5 E -.25(va)-.2 G(ilable.).25 E<83>72 604.8
Q F0(IceP)22.333 E(oA)-.2 E(uthRejected)-.5 E F1 2.5<ad61>3.333 G
(uthentication rejected.)-2.5 E<83>72 620.4 Q F0(IceP)22.333 E(oA)-.2 E
(uthF)-.5 E(ailed)-.25 E F1 2.5<ad61>3.333 G(uthentication f)-2.5 E
(ailed.)-.1 E<83>72 636 Q F0(IceP)22.333 E(oA)-.2 E(uthDoneCleanup)-.5 E
F1 2.5<ad64>3.333 G(one cleaning up.)-2.5 E F0(IceP)72.833 651.6 Q(aA)
-.1 E(uthPr)-.5 E(oc)-.18 E F1(is the callback in)3.333 E -.2(vo)-.4 G
-.1(ke).2 G 2.5(df).1 G(or the client that recei)-2.5 E -.15(ve)-.25 G
2.5(dt).15 G(he)-2.5 E F0(Pr)3.333 E(otocolSetup)-.18 E F1(.).833 E 2.5
<ad38ad>277.36 768 S 0 Cg EP
%%Page: 9 11
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E .4 LW 50.4 76.5 50.4 86.5 DL 50.4 74.5 50.4
84.5 DL 55.4 75 50.4 75 DL 57.4 75 52.4 75 DL 62.4 75 57.4 75 DL/F1 10
/Times-Roman@0 SF(typedef IceP)72 87.6 Q(aAuthStatus \(*IceP)-.15 E
(aAuthProc\) \(\);)-.15 E(IceP)72 111.6 Q(aAuthStatus P)-.15 E -1.667
(aAuthProc \()-.15 F/F2 10/Times-Italic@0 SF(ice_conn).833 E F1(,)A F2
(auth_state_ptr)2.5 E F1(,).833 E F2(swap)2.5 E F1(,).833 E F2
(auth_datalen)2.5 E F1(,).833 E F2(auth_data)2.5 E F1(,).833 E F2 -.37
(re)122 123.6 S(ply_datalen_r).37 E(et)-.37 E F1(,).833 E F2 -.37(re)2.5
G(ply_data_r).37 E(et)-.37 E F1(,).833 E F2(err)2.5 E(or_string_r)-.45 E
(et)-.37 E F1(\)).833 E(IceConn)82 135.6 Q F2(ice_conn)2.5 E F1(;).833 E
(IcePointer *)82 147.6 Q F2(auth_state_ptr)A F1(;).833 E(Bool)82 159.6 Q
F2(swap)2.5 E F1(;).833 E(int)82 171.6 Q F2(auth_datalen)2.5 E F1(;).833
E(IcePointer)82 183.6 Q F2(auth_data)2.5 E F1(;).833 E(int *)82 195.6 Q
F2 -.37(re)C(ply_datalen_r).37 E(et)-.37 E F1(;).833 E(IcePointer *)82
207.6 Q F2 -.37(re)C(ply_data_r).37 E(et)-.37 E F1(;).833 E(char **)82
219.6 Q F2(err)A(or_string_r)-.45 E(et)-.37 E F1(;).833 E F2(ice_conn)72
238.8 Q F1(The ICE connection object.)35.9 E F2(auth_state_ptr)72 254.4
Q F1 2.5(Ap)13.66 G
(ointer to state for use by the authentication callback procedure.)-2.5
E F2(swap)72 270 Q F1(If)51.44 E F0 -.74(Tr)3.333 G(ue).74 E F1 2.5(,a)
.833 G(uth_data may ha)-2.5 E .3 -.15(ve t)-.2 H 2.5(ob).15 G 2.5(eb)
-2.5 G(yte sw)-2.5 E(apped \(depending on its contents\).)-.1 E F2
(auth_datalen)72 285.6 Q F1(The length \(in bytes\) of the protocol ori\
ginator authentication data.)19.22 E F2(auth_data)72 301.2 Q F1
(The authentication data from the protocol originator)31.44 E(.)-.55 E
F2 -.37(re)72 316.8 S(ply_datalen_r).37 E(et)-.37 E F1
(The length of the authentication data returned.)144 328.8 Q F2 -.37(re)
72 344.4 S(ply_data_r).37 E(et)-.37 E F1
(The authentication data returned.)13.3 E F2(err)72 360 Q(or_string_r)
-.45 E(et)-.37 E F1(If authentication is rejected or f)7.26 E
(ails, an error string is returned.)-.1 E 50.4 356.1 50.4 366.1 DL 50.4
354.1 50.4 364.1 DL 55.4 367.6 50.4 367.6 DL 57.4 367.6 52.4 367.6 DL
62.4 367.6 57.4 367.6 DL 2.262(Authentication may require se)72 391.2 R
-.15(ve)-.25 G 2.262
(ral phases, depending on the authentication method.).15 F 2.263
(As a result, the)7.263 F F0(IceP)72.833 403.2 Q(aA)-.1 E(uthPr)-.5 E
(oc)-.18 E F1 .189(may be called more than once when authenticating a c\
lient, and some state will ha)3.523 F .489 -.15(ve t)-.2 H 2.689(ob).15
G(e)-2.689 E 4.266(maintained between each in)72 415.2 R -.2(vo)-.4 G
6.766(cation. At).2 F 4.266(the start of each)6.766 F F0(Pr)7.599 E
(otocolSetup)-.18 E F1 6.766(,a).833 G 4.267(uth_datalen is zero,)-6.766
F 1.468(*auth_state_ptr is NULL, and the function should initialize its\
 state and set this pointer)72 427.2 R 6.468(.I)-.55 G 3.968(ns)-6.468 G
(ubsequent)-3.968 E(in)72 439.2 Q -.2(vo)-.4 G
(cations of the callback, the pointer should be used to get at an).2 E
2.5(ys)-.15 G(tate pre)-2.5 E(viously stored by the callback.)-.25 E
1.006(If needed, the netw)72 454.8 R 1.006
(ork ID of the client accepting the)-.1 F F0(Pr)4.339 E(otocolSetup)-.18
E F1 1.006(can be obtained by calling the)4.339 F F0(Ice-)4.339 E
(ConnectionString)72 466.8 Q F1(function.)3.333 E 1.718
(The auth_data pointer may point to a v)72 482.4 R 1.718
(olatile block of memory)-.2 F 6.718(.I)-.65 G 4.218(ft)-6.718 G 1.718
(he data must be k)-4.218 F 1.717(ept be)-.1 F 1.717(yond this)-.15 F
(in)72 494.4 Q -.2(vo)-.4 G(cation of the callback, be sure to mak).2 E
2.5(eac)-.1 G(op)-2.5 E 2.5(yo)-.1 G 2.5(fi)-2.5 G(t.)-2.5 E .18(ICElib\
 will be responsible for transmitting and freeing the reply_data_ret an\
d error_string_ret pointers with)72 510 R F0(fr)72.833 522 Q(ee)-.18 E
F1(.).833 E(The)72 537.6 Q F0(IceP)3.333 E(aA)-.1 E(uthPr)-.5 E(oc)-.18
E F1(should return one of four v)3.333 E(alues:)-.25 E<83>72 553.2 Q F0
(IceP)22.333 E(aA)-.1 E(uthContinue)-.5 E F1 2.5<ad63>3.333 G
(ontinue \(or start\) authentication.)-2.5 E<83>72 568.8 Q F0(IceP)
22.333 E(aA)-.1 E(uthAccepted)-.5 E F1 2.5<ad61>3.333 G
(uthentication accepted.)-2.5 E<83>72 584.4 Q F0(IceP)22.333 E(aA)-.1 E
(uthRejected)-.5 E F1 2.5<ad61>3.333 G(uthentication rejected.)-2.5 E
<83>72 600 Q F0(IceP)22.333 E(aA)-.1 E(uthF)-.5 E(ailed)-.25 E F1 2.5
<ad61>3.333 G(uthentication f)-2.5 E(ailed.)-.1 E F0 2.5(7. ICE)72 624 R
(Connections)2.5 E F1 .105(In order for tw)72 639.6 R 2.605(oc)-.1 G
.105(lients to establish an ICE connection, one client has to be w)
-2.605 F .104(aiting for connections, and the)-.1 F
(other client has to initiate the connection.)72 651.6 Q
(Most clients will initiate connections, so we discuss that \214rst.)5 E
F0 2.5(7.1. Opening)72 675.6 R(an ICE Connection)2.5 E F1 2.5<ad39ad>
277.36 768 S 0 Cg EP
%%Page: 10 12
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E/F1 10/Times-Roman@0 SF 1.791 -.8(To o)72 84 T
.191(pen an ICE connection with another client \(that is, w).8 F .191
(aiting for connections\), use)-.1 F F0(IceOpenConnection)3.524 E F1(.)
.833 E .4 LW 50.4 100.5 50.4 110.5 DL 50.4 98.5 50.4 108.5 DL 55.4 99
50.4 99 DL 57.4 99 52.4 99 DL 62.4 99 57.4 99 DL
(IceConn IceOpenConnection)72 111.6 Q(\().833 E/F2 10/Times-Italic@0 SF
(network_ids_list).833 E F1(,)A F2(conte)2.5 E(xt)-.2 E F1(,).833 E F2
(must_authenticate)2.5 E F1(,).833 E F2(major_opcode_c)2.5 E(hec)-.15 E
(k)-.2 E F1(,).833 E F2(err)122 123.6 Q(or_length)-.45 E F1(,).833 E F2
(err)2.5 E(or_string_r)-.45 E(et)-.37 E F1(\)).833 E(char *)84.5 135.6 Q
F2(network_ids_list)A F1(;).833 E(IcePointer)84.5 147.6 Q F2(conte)2.5 E
(xt)-.2 E F1(;).833 E(Bool)84.5 159.6 Q F2(must_authenticate)2.5 E F1(;)
.833 E(int)84.5 171.6 Q F2(major_opcode_c)2.5 E(hec)-.15 E(k)-.2 E F1(;)
.833 E(int)84.5 183.6 Q F2(err)5 E(or_length)-.45 E F1(;).833 E(char *)
84.5 195.6 Q F2(err)A(or_string_r)-.45 E(et)-.37 E F1(;).833 E F2
(network_ids_list)72 214.8 Q F1(Speci\214es the netw)5.88 E
(ork ID\(s\) of the other client.)-.1 E F2(conte)72 230.4 Q(xt)-.2 E F1
2.922(Ap)43.32 G .422(ointer to an opaque object or NULL.)-2.922 F .421
(Used to determine if an ICE connection can be)5.421 F
(shared \(see belo)144 242.4 Q(w\).)-.25 E F2(must_authenticate)72 258 Q
F1(If)144 270 Q F0 -.74(Tr)3.333 G(ue).74 E F1 2.5(,t).833 G
(he other client may not bypass authentication.)-2.5 E F2
(major_opcode_c)72 285.6 Q(hec)-.15 E(k)-.2 E F1(Used to force a ne)144
297.6 Q 2.5(wI)-.25 G(CE connection to be created \(see belo)-2.5 E
(w\).)-.25 E F2(err)72 313.2 Q(or_length)-.45 E F1
(Length of the error_string_ret ar)21.34 E(gument passed in.)-.18 E F2
(err)72 328.8 Q(or_string_r)-.45 E(et)-.37 E F1 .6
(Returns a null-terminated error message, if an)7.26 F 4.4 -.65(y. T)
-.15 H .6(he error_string_ret ar).65 F .6(gument points to)-.18 F
(user supplied memory)144 340.8 Q 5(.N)-.65 G 2.5(om)-5 G
(ore than error_length bytes are used.)-2.5 E 50.4 336.9 50.4 346.9 DL
50.4 334.9 50.4 344.9 DL 55.4 348.4 50.4 348.4 DL 57.4 348.4 52.4 348.4
DL 62.4 348.4 57.4 348.4 DL F0(IceOpenConnection)72.833 368.4 Q F1(retu\
rns an opaque ICE connection object if it succeeds; otherwise, it retur\
ns NULL.)3.333 E 1.07(The netw)72 384 R 1.07(ork_ids_list ar)-.1 F 1.07
(gument contains a list of netw)-.18 F 1.069
(ork IDs separated by commas.)-.1 F 1.069(An attempt will be)6.069 F
.125(made to use the \214rst netw)72 396 R .125(ork ID.)-.1 F .126
(If that f)5.126 F .126
(ails, an attempt will be made using the second netw)-.1 F .126
(ork ID, and so)-.1 F 2.5(on. Each)72 408 R(netw)2.5 E
(ork ID has the follo)-.1 E(wing format:)-.25 E 67.17
(tcp/<hostname>:<portnumber> or)105 426 R 62.73
(decnet/<hostname>::<objname> or)105 438 R(local/<hostname>:<path>)105
450 Q 2.378(Most protocol libraries will ha)72 471.6 R 2.678 -.15(ve s)
-.2 H 2.377(ome sort of open function that should internally mak).15 F
4.877(eac)-.1 G 2.377(all into)-4.877 F F0(IceOpenConnection)72.833
483.6 Q F1 5.218(.W).833 G(hen)-5.218 E F0(IceOpenConnection)3.551 E F1
.218(is called, it may be possible to use a pre)3.551 F .219
(viously opened)-.25 F .099(ICE connection \(if the tar)72 495.6 R .098
(get client is the same\).)-.18 F(Ho)5.098 E(we)-.25 E -.15(ve)-.25 G
.898 -.4(r, t).15 H .098(here are cases in which shared ICE connections)
.4 F(are not desired.)72 507.6 Q .713(The conte)72 523.2 R .713(xt ar)
-.15 F .713
(gument is used to determine if an ICE connection can be shared.)-.18 F
.714(If conte)5.714 F .714(xt is NULL, then)-.15 F .162
(the caller is al)72 535.2 R -.1(wa)-.1 G .162
(ys willing to share the connection.).1 F .162(If conte)5.162 F .161
(xt is not NULL, then the caller is not willing to)-.15 F(use a pre)72
547.2 Q(viously opened ICE connection that has a dif)-.25 E
(ferent non-NULL conte)-.25 E(xt associated with it.)-.15 E .463
(In addition, if major_opcode_check contains a nonzero major opcode v)72
562.8 R .464(alue, a pre)-.25 F .464(viously created ICE con-)-.25 F
.957(nection will be used only if the major opcode is not acti)72 574.8
R 1.256 -.15(ve o)-.25 H 3.456(nt).15 G .956(he connection.)-3.456 F
.956(This can be used to force)5.956 F
(multiple ICE connections between tw)72 586.8 Q 2.5(oc)-.1 G
(lients for the same protocol.)-2.5 E(An)72 602.4 Q 4.45(ya)-.15 G 1.951
(uthentication requirements are handled internally by the ICE library)
-4.45 F 6.951(.T)-.65 G 1.951(he method by which the)-6.951 F
(authentication data is obtained is implementation-dependent.\207)72
614.4 Q(After)72 630 Q F0(IceOpenConnection)3.782 E F1 .449
(is called, the client is ready to send a)3.782 F F0(Pr)3.782 E
(otocolSetup)-.18 E F1(\(pro)3.782 E .449(vided that)-.15 F F0
(IceRegis-)3.781 E(terF)72 642 Q(orPr)-.25 E(otocolSetup)-.18 E F1 -.1
(wa)3.973 G 3.141(sc).1 G .641(alled\) or recei)-3.141 F .941 -.15(ve a)
-.25 H F0(Pr)4.124 E(otocolSetup)-.18 E F1(\(pro)3.974 E .641
(vided that)-.15 F F0(IceRegisterF)3.974 E(orPr)-.25 E(otocolRe-)-.18 E
(ply)72 654 Q F1 -.1(wa)3.333 G 2.5(sc).1 G(alled\).)-2.5 E F0 2.5
(7.2. Listening)72 678 R -.25(fo)2.5 G 2.5(rI).25 G(CE Connections)-2.5
E F1 .188(Clients wishing to accept ICE connections must \214rst call)72
693.6 R F0(IceListenF)3.521 E(orConnections)-.25 E F1(or)3.521 E F0
(IceListenF)3.521 E(orW)-.25 E(ell-)-.65 E(Kno)72 705.6 Q(wnConnections)
-.1 E F1 .405(so that the)3.738 F 2.905(yc)-.15 G .405
(an listen for connections.)-2.905 F 2.905(Al)5.405 G .405
(ist of opaque "listen" objects are returned,)-2.905 F .32 LW 144 713.6
72 713.6 DL/F3 8/Times-Roman@0 SF 2<8754>82 723.6 S(he X Consortium')-2
E 2(sI)-.44 G
(CElib implementation uses an .ICEauthority \214le \(see Appendix A\).)
-2 E F1 2.5<ad31>274.86 768 S 2.5<30ad>-2.5 G 0 Cg EP
%%Page: 11 13
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E/F1 10/Times-Roman@0 SF .761
(one for each type of transport method that is a)72 84 R -.25(va)-.2 G
.761(ilable \(for e).25 F .761(xample, Unix Domain, TCP)-.15 F 3.261(,D)
-1.11 G .761(ECnet, and so)-3.261 F(on\).)72 96 Q .157
(Normally clients will let ICElib allocate an a)72 111.6 R -.25(va)-.2 G
.157(ilable name in each transport and return listen objects.).25 F
(Such)5.157 E 2.821(ac)72 123.6 S .321(lient will then use)-2.821 F F0
(IceComposeNetw)3.654 E(orkIdList)-.1 E F1 .321(to e)3.654 F .321
(xtract the chosen names and mak)-.15 F 2.821(et)-.1 G .321(hem a)-2.821
F -.25(va)-.2 G .32(ilable to).25 F .417
(other clients for opening the connection.)72 135.6 R .418
(In certain cases it may be necessary for a client to listen for con-)
5.417 F .077(nections on pre-arranged transport object names.)72 147.6 R
.077(Such a client may use)5.077 F F0(IceListenF)3.41 E(orW)-.25 E
(ellKno)-.65 E(wnConnec-)-.1 E(tions)72 159.6 Q F1
(to specify the names for the listen objects.)3.333 E .4 LW 50.4 176.1
50.4 186.1 DL 50.4 174.1 50.4 184.1 DL 55.4 174.6 50.4 174.6 DL 57.4
174.6 52.4 174.6 DL 62.4 174.6 57.4 174.6 DL(Status IceListenF)72 187.2
Q -1.667(orConnections \()-.15 F/F2 10/Times-Italic@0 SF(count_r).833 E
(et)-.37 E F1(,)A F2(listen_objs_r)2.5 E(et)-.37 E F1(,).833 E F2(err)
2.5 E(or_length)-.45 E F1(,).833 E F2(err)2.5 E(or_string_r)-.45 E(et)
-.37 E F1(\)).833 E 2.5(int *)84.5 199.2 R F2(count_r)A(et)-.37 E F1(;)
.833 E(IceListenObj **)84.5 211.2 Q F2(listen_objs_r)A(et)-.37 E F1(;)
.833 E(int)84.5 223.2 Q F2(err)5 E(or_length)-.45 E F1(;).833 E(char *)
84.5 235.2 Q F2(err)A(or_string_r)-.45 E(et)-.37 E F1(;).833 E F2
(count_r)72 254.4 Q(et)-.37 E F1
(Returns the number of listen objects created.)34.04 E F2(listen_objs_r)
72 270 Q(et)-.37 E F1
(Returns a list of pointers to opaque listen objects.)12.92 E F2(err)72
285.6 Q(or_length)-.45 E F1(The length of the error_string_ret ar)21.34
E(gument passed in.)-.18 E F2(err)72 301.2 Q(or_string_r)-.45 E(et)-.37
E F1 .651(Returns a null-terminated error message, if an)7.26 F 4.451
-.65(y. T)-.15 H .651(he error_string_ret points to user sup-).65 F
(plied memory)144 313.2 Q 5(.N)-.65 G 2.5(om)-5 G
(ore than error_length bytes are used.)-2.5 E 50.4 309.3 50.4 319.3 DL
50.4 307.3 50.4 317.3 DL 55.4 320.8 50.4 320.8 DL 57.4 320.8 52.4 320.8
DL 62.4 320.8 57.4 320.8 DL(The return v)72 340.8 Q(alue of)-.25 E F0
(IceListenF)3.333 E(orConnections)-.25 E F1(is zero for f)3.333 E
(ailure and a positi)-.1 E .3 -.15(ve v)-.25 H(alue for success.)-.1 E
50.4 369.3 50.4 379.3 DL 50.4 367.3 50.4 377.3 DL 55.4 367.8 50.4 367.8
DL 57.4 367.8 52.4 367.8 DL 62.4 367.8 57.4 367.8 DL(Status IceListenF)
72 380.4 Q(orW)-.15 E(ellKno)-.8 E -1.667(wnConnections \()-.25 F F2
(port_id).833 E F1(,)A F2(count_r)2.5 E(et)-.37 E F1(,)A F2
(listen_objs_r)2.5 E(et)-.37 E F1(,).833 E F2(err)2.5 E(or_length)-.45 E
F1(,).833 E F2(err)2.5 E(or_string_r)-.45 E(et)-.37 E F1(\)).833 E
(char *)84.5 392.4 Q F2(port_id)A F1(;).833 E 2.5(int *)84.5 404.4 R F2
(count_r)A(et)-.37 E F1(;).833 E(IceListenObj **)84.5 416.4 Q F2
(listen_objs_r)A(et)-.37 E F1(;).833 E(int)84.5 428.4 Q F2(err)5 E
(or_length)-.45 E F1(;).833 E(char *)84.5 440.4 Q F2(err)A(or_string_r)
-.45 E(et)-.37 E F1(;).833 E F2(port_id)72 459.6 Q F1 .062(Speci\214es \
the port identi\214cation for the address\(es\) to be opened.)42.55 F
.061(The v)5.061 F .061(alue must not con-)-.25 F(tain the slash \()144
471.6 Q -.74(``).833 G(/').74 E -1.666 .833('\) o)-.74 H 2.5(rc)-.833 G
(omma \()-2.5 E -.74(``).833 G -.7(,').74 G -1.666 .833('\) c)-.04 H
(haracter; these are reserv)-.833 E(ed for future use.)-.15 E F2
(count_r)72 487.2 Q(et)-.37 E F1
(Returns the number of listen objects created.)34.04 E F2(listen_objs_r)
72 502.8 Q(et)-.37 E F1
(Returns a list of pointers to opaque listen objects.)12.92 E F2(err)72
518.4 Q(or_length)-.45 E F1(The length of the error_string_ret ar)21.34
E(gument passed in.)-.18 E F2(err)72 534 Q(or_string_r)-.45 E(et)-.37 E
F1 .651(Returns a null-terminated error message, if an)7.26 F 4.451 -.65
(y. T)-.15 H .651(he error_string_ret points to user sup-).65 F
(plied memory)144 546 Q 5(.N)-.65 G 2.5(om)-5 G
(ore than error_length bytes are used.)-2.5 E 50.4 542.1 50.4 552.1 DL
50.4 540.1 50.4 550.1 DL 55.4 553.6 50.4 553.6 DL 57.4 553.6 52.4 553.6
DL 62.4 553.6 57.4 553.6 DL F0(IceListenF)72.833 573.6 Q(orW)-.25 E
(ellKno)-.65 E(wnConnections)-.1 E F1 .84(constructs a list of netw)
4.173 F .839(ork IDs by prepending each kno)-.1 F .839(wn trans-)-.25 F
.257(port to port_id and then attempts to create listen objects for the\
 result.)72 585.6 R .258(Port_id is the portnumber)5.258 F 2.758(,o)-.4
G(bjname,)-2.758 E .657(or path portion of the ICE netw)72 597.6 R .657
(ork ID. If a listen object for a particular netw)-.1 F .657
(ork ID cannot be created the)-.1 F(netw)72 609.6 Q .411
(ork ID is ignored.)-.1 F .411(If no listen objects are created)5.411 F
F0(IceListenF)3.744 E(orW)-.25 E(ellKno)-.65 E(wnConnections)-.1 E F1
.412(returns f)3.745 F(ail-)-.1 E(ure.)72 621.6 Q .49(The return v)72
637.2 R .49(alue of)-.25 F F0(IceListenF)3.823 E(orW)-.25 E(ellKno)-.65
E(wnConnections)-.1 E F1 .49(is zero for f)3.823 F .489
(ailure and a positi)-.1 F .789 -.15(ve v)-.25 H .489(alue for suc-)-.1
F(cess.)72 649.2 Q 1.6 -.8(To c)72 676.8 T
(lose and free the listen objects, use).8 E F0(IceFr)3.333 E
(eeListenObjs)-.18 E F1(.).833 E 2.5<ad31>274.86 768 S 2.5<31ad>-2.5 G 0
Cg EP
%%Page: 12 14
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E .4 LW 50.4 76.5 50.4 86.5 DL 50.4 74.5 50.4
84.5 DL 55.4 75 50.4 75 DL 57.4 75 52.4 75 DL 62.4 75 57.4 75 DL/F1 10
/Times-Roman@0 SF -.2(vo)72 87.6 S(id IceFreeListenObjs).2 E(\().833 E
/F2 10/Times-Italic@0 SF(count).833 E F1(,)A F2(listen_objs)2.5 E F1(\))
.833 E(int)82 99.6 Q F2(count)2.5 E F1(;).833 E(IceListenObj *)82 111.6
Q F2(listen_objs)A F1(;).833 E F2(count)72 130.8 Q F1
(The number of listen objects.)49.78 E F2(listen_objs)72 146.4 Q F1
(The listen objects.)28.66 E 50.4 142.5 50.4 152.5 DL 50.4 140.5 50.4
150.5 DL 55.4 154 50.4 154 DL 57.4 154 52.4 154 DL 62.4 154 57.4 154 DL
1.866 -.8(To d)72 177.6 T .266(etect a ne).8 F 2.766(wc)-.25 G .266
(onnection on a listen object, use)-2.766 F F0(select)3.599 E F1 .267
(on the descriptor associated with the listen object.)3.599 F 1.6 -.8
(To o)72 205.2 T(btain the descriptor).8 E 2.5(,u)-.4 G(se)-2.5 E F0
(IceGetListenConnectionNumber)3.333 E F1(.).833 E 50.4 225.3 50.4 235.3
DL 50.4 223.3 50.4 233.3 DL 55.4 223.8 50.4 223.8 DL 57.4 223.8 52.4
223.8 DL 62.4 223.8 57.4 223.8 DL(int IceGetListenConnectionNumber)72
236.4 Q(\().833 E F2(listen_obj).833 E F1(\)).833 E(IceListenObj)82
248.4 Q F2(listen_obj)2.5 E F1(;).833 E F2(listen_obj)72 267.6 Q F1
(The listen object.)32.55 E 50.4 263.7 50.4 273.7 DL 50.4 261.7 50.4
271.7 DL 55.4 275.2 50.4 275.2 DL 57.4 275.2 52.4 275.2 DL 62.4 275.2
57.4 275.2 DL 1.6 -.8(To o)72 298.8 T(btain the netw).8 E
(ork ID string associated with a listen object, use)-.1 E F0
(IceGetListenConnectionString)3.333 E F1(.).833 E 50.4 315.3 50.4 325.3
DL 50.4 313.3 50.4 323.3 DL 55.4 313.8 50.4 313.8 DL 57.4 313.8 52.4
313.8 DL 62.4 313.8 57.4 313.8 DL(char *IceGetListenConnectionString)72
326.4 Q(\().833 E F2(listen_obj).833 E F1(\)).833 E(IceListenObj)82
338.4 Q F2(listen_obj)2.5 E F1(;).833 E F2(listen_obj)72 357.6 Q F1
(The listen object.)32.55 E 50.4 353.7 50.4 363.7 DL 50.4 351.7 50.4
361.7 DL 55.4 365.2 50.4 365.2 DL 57.4 365.2 52.4 365.2 DL 62.4 365.2
57.4 365.2 DL 2.5(An)72 388.8 S(etw)-2.5 E(ork ID has the follo)-.1 E
(wing format:)-.25 E 67.17(tcp/<hostname>:<portnumber> or)105 406.8 R
62.73(decnet/<hostname>::<objname> or)105 418.8 R
(local/<hostname>:<path>)105 430.8 Q 3.314 -.8(To c)72 452.4 T 1.714
(ompose a string containing a list of netw).8 F 1.714
(ork IDs separated by commas \(the format recognized by)-.1 F F0
(IceOpenConnection)72.833 464.4 Q F1(\), use).833 E F0(IceComposeNetw)
3.333 E(orkIdList)-.1 E F1(.).833 E 50.4 484.5 50.4 494.5 DL 50.4 482.5
50.4 492.5 DL 55.4 483 50.4 483 DL 57.4 483 52.4 483 DL 62.4 483 57.4
483 DL(char *IceComposeNetw)72 495.6 Q -1.667(orkIdList \()-.1 F F2
(count).833 E F1(,)A F2(listen_objs)2.5 E F1(\)).833 E(int)82 507.6 Q F2
(count)2.5 E F1(;).833 E(IceListenObj *)82 519.6 Q F2(listen_objs)A F1
(;).833 E F2(count)72 538.8 Q F1(The number of listen objects.)49.78 E
F2(listen_objs)72 554.4 Q F1(The listen objects.)28.66 E 50.4 550.5 50.4
560.5 DL 50.4 548.5 50.4 558.5 DL 55.4 562 50.4 562 DL 57.4 562 52.4 562
DL 62.4 562 57.4 562 DL F0 2.5(7.3. Host)72 594 R(Based A)2.5 E
(uthentication f)-.5 E(or ICE Connections)-.25 E F1 1.122
(If authentication f)72 609.6 R 1.123(ails when a client attempts to op\
en an ICE connection and the initiating client has not)-.1 F .493(requi\
red authentication, a host based authentication procedure may be in)72
621.6 R -.2(vo)-.4 G -.1(ke).2 G 2.993(dt).1 G 2.992(op)-2.993 G(ro)
-2.992 E .492(vide a last chance for)-.15 F .108(the client to connect.)
72 633.6 R .109(Each listen object has such a callback associated with \
it, and this callback is set using)5.108 F(the)72 645.6 Q F0
(IceSetHostBasedA)3.333 E(uthPr)-.5 E(oc)-.18 E F1(function.)3.333 E
50.4 662.1 50.4 672.1 DL 50.4 660.1 50.4 670.1 DL 55.4 660.6 50.4 660.6
DL 57.4 660.6 52.4 660.6 DL 62.4 660.6 57.4 660.6 DL -.2(vo)72 673.2 S
(id IceSetHostBasedAuthProc).2 E(\().833 E F2(listen_obj).833 E F1(,)A
F2(host_based_auth_pr)2.5 E(oc)-.45 E F1(\)).833 E(IceListenObj)82 685.2
Q F2(listen_obj)2.5 E F1(;).833 E(IceHostBasedAuthProc)82 697.2 Q F2
(host_based_auth_pr)2.5 E(oc)-.45 E F1(;).833 E F2(listen_obj)72 716.4 Q
F1(The listen object.)32.55 E 2.5<ad31>274.86 768 S 2.5<32ad>-2.5 G 0 Cg
EP
%%Page: 13 15
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E/F1 10/Times-Italic@0 SF(host_based_auth_pr)72
84 Q(oc)-.45 E/F2 10/Times-Roman@0 SF
(The host based authentication procedure.)144 96 Q .4 LW 50.4 92.1 50.4
102.1 DL 50.4 90.1 50.4 100.1 DL 55.4 103.6 50.4 103.6 DL 57.4 103.6
52.4 103.6 DL 62.4 103.6 57.4 103.6 DL .154(By def)72 123.6 R .154(ault\
, each listen object has no host based authentication procedure associa\
ted with it.)-.1 F -.15(Pa)5.154 G .154(ssing NULL).15 F
(for host_based_auth_proc turns of)72 135.6 Q 2.5(fh)-.25 G
(ost based authentication if it w)-2.5 E(as pre)-.1 E(viously set.)-.25
E 50.4 155.7 50.4 165.7 DL 50.4 153.7 50.4 163.7 DL 55.4 154.2 50.4
154.2 DL 57.4 154.2 52.4 154.2 DL 62.4 154.2 57.4 154.2 DL
(typedef Bool \(*IceHostBasedAuthProc\) \(\);)72 166.8 Q
(Bool HostBasedAuthProc)72 190.8 Q(\().833 E F1(host_name).833 E F2(\))
.833 E(char *)82 202.8 Q F1(host_name)A F2(;).833 E F1(host_name)72 222
Q F2(The host name of the client that tried to open an ICE connection.)
28.67 E 50.4 218.1 50.4 228.1 DL 50.4 216.1 50.4 226.1 DL 55.4 229.6
50.4 229.6 DL 57.4 229.6 52.4 229.6 DL 62.4 229.6 57.4 229.6 DL .451
(The host_name ar)72 249.6 R .451(gument is a string in the form)-.18 F
F1(pr)2.951 E(otocol)-.45 E F2(/).833 E F1(hostname).833 E F2 2.951(,w)C
(here)-2.951 E F1(pr)2.951 E(otocol)-.45 E F2 .452
(is one of {tcp, decnet,)3.785 F(local}.)72 261.6 Q(If)72 277.2 Q F0
(IceHostBasedA)4.398 E(uthPr)-.5 E(oc)-.18 E F2(returns)4.398 E F0 -.74
(Tr)4.398 G(ue).74 E F2 3.565(,a).833 G 1.065(ccess will be granted, e)
-3.565 F -.15(ve)-.25 G 3.565(nt).15 G 1.064
(hough the original authentication)-3.565 F -.1(fa)72 289.2 S 4.448
(iled. Note).1 F 1.948(that authentication can ef)4.448 F(fecti)-.25 E
-.15(ve)-.25 G 1.949(ly be disabled by re).15 F 1.949(gistering an)-.15
F F0(IceHostBasedA)5.282 E(uthPr)-.5 E(oc)-.18 E F2(,).833 E(which al)72
301.2 Q -.1(wa)-.1 G(ys returns).1 E F0 -.74(Tr)3.333 G(ue).74 E F2(.)
.833 E .352(Host based authentication is also allo)72 316.8 R .352
(wed at)-.25 F F0(Pr)3.684 E(otocolSetup)-.18 E F2 2.851(time. The)3.684
F .351(callback is speci\214ed in the)2.851 F F0(IceReg-)3.684 E(isterF)
72 328.8 Q(orPr)-.25 E(otocolReply)-.18 E F2
(function \(see section 6, `)3.333 E(`Protocol Re)-.74 E(gistration')
-.15 E('\).)-.74 E F0 2.5(7.4. Accepting)72 352.8 R(ICE Connections)2.5
E F2 .026
(After a connection attempt is detected on a listen object returned by)
72 368.4 R F0(IceListenF)3.359 E(orConnections)-.25 E F2 2.526(,y).833 G
.026(ou should)-2.526 F(call)72 380.4 Q F0(IceAcceptConnection)3.333 E
F2 5(.T).833 G(his returns a ne)-5 E 2.5(wo)-.25 G
(paque ICE connection object.)-2.5 E 50.4 396.9 50.4 406.9 DL 50.4 394.9
50.4 404.9 DL 55.4 395.4 50.4 395.4 DL 57.4 395.4 52.4 395.4 DL 62.4
395.4 57.4 395.4 DL(IceConn IceAcceptConnection)72 408 Q(\().833 E F1
(listen_obj).833 E F2(,)A F1(status_r)3.333 E(et)-.37 E F2(\)).833 E
(IceListenObj)82 420 Q F1(listen_obj)2.5 E F2(;).833 E
(IceAcceptStatus *)82 432 Q F1(status_r)A(et)-.37 E F2(;).833 E F1
(listen_obj)72 451.2 Q F2(The listen object on which a ne)32.55 E 2.5
(wc)-.25 G(onnection w)-2.5 E(as detected.)-.1 E F1(status_r)72 466.8 Q
(et)-.37 E F2(Return status information.)32.92 E 50.4 462.9 50.4 472.9
DL 50.4 460.9 50.4 470.9 DL 55.4 474.4 50.4 474.4 DL 57.4 474.4 52.4
474.4 DL 62.4 474.4 57.4 474.4 DL(The status_ret ar)72 494.4 Q
(gument is set to one of the follo)-.18 E(wing v)-.25 E(alues:)-.25 E
<83>72 510 Q F0(IceAcceptSuccess)22.333 E F2 4.472<ad74>5.305 G 1.972
(he accept operation succeeded, and the function returns a ne)-4.472 F
4.472(wc)-.25 G(onnection)-4.472 E(object.)97 522 Q<83>72 537.6 Q F0
(IceAcceptF)22.333 E(ailur)-.25 E(e)-.18 E F2 2.5<ad74>3.333 G
(he accept operation f)-2.5 E(ailed, and the function returns NULL.)-.1
E<83>72 553.2 Q F0(IceAcceptBadMalloc)22.333 E F2 2.5(\255am)3.333 G
(emory allocation f)-2.5 E(ailed, and the function returns NULL.)-.1 E
.414(In general, to detect ne)72 568.8 R 2.914(wc)-.25 G .414
(onnections, you should call)-2.914 F F0(select)3.747 E F2 .415
(on the \214le descriptors associated with the lis-)3.747 F 1.697
(ten objects.)72 580.8 R 1.697(When a ne)6.697 F 4.197(wc)-.25 G 1.696
(onnection is detected, the)-4.197 F F0(IceAcceptConnection)5.029 E F2
1.696(function should be called.)5.029 F F0(IceAcceptConnection)72.833
592.8 Q F2 .389(may return a ne)3.722 F 2.889(wI)-.25 G .389
(CE connection that is in a pending state.)-2.889 F .389
(This is because before)5.389 F .71(the connection can become v)72 604.8
R .71(alid, authentication may be necessary)-.25 F 5.71(.B)-.65 G .71
(ecause the ICE library cannot block)-5.71 F .779(and w)72 616.8 R .779
(ait for the connection to become v)-.1 F .78
(alid \(in\214nite blocking can occur if the connecting client does not)
-.25 F(act properly\), the application must w)72 628.8 Q
(ait for the connection status to become v)-.1 E(alid.)-.25 E(The follo)
72 644.4 Q(wing pseudo-code demonstrates ho)-.25 E 2.5(wc)-.25 G
(onnections are accepted:)-2.5 E 2.5<ad31>274.86 768 S 2.5<33ad>-2.5 G 0
Cg EP
%%Page: 14 16
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E/F1 10/Times-Roman@0 SF(ne)72 84 Q
(w_ice_conn = IceAcceptConnection \(listen_obj, &accept_status\);)-.25 E
(if \(accept_status != IceAcceptSuccess\))72 96 Q({)72 108 Q
(close the \214le descriptor and return)108 120 Q(})72 132 Q
(status = IceConnectionStatus \(ne)72 156 Q(w_ice_conn\);)-.25 E
(time_start = time_no)72 168 Q(w;)-.25 E
(while \(status == IceConnectPending\))72 192 Q({)72 204 Q
(select\(\) on {ne)108 216 Q(w_ice_conn, all open connections})-.25 E
(for \(each ice_conn in the list of open connections\))108 240 Q
(if \(data ready on ice_conn\))144 252 Q({)144 264 Q
(status = IceProcessMessages \(ice_conn, NULL, NULL\);)180 276 Q
(if \(status == IceProcessMessagesIOError\))180 288 Q
(IceCloseConnection \(ice_conn\);)216 300 Q(})144 312 Q
(if \(data ready on ne)108 336 Q(w_ice_conn\))-.25 E({)108 348 Q(/*)144
360 Q 2.5(*I)146.5 372 S
(ceProcessMessages is called until the connection)-2.5 E 2.5(*i)146.5
384 S 2.5(sn)-2.5 G 2.5(on-pending. Doing)-2.5 F
(so handles the connection)2.5 E 2.5(*s)146.5 396 S(etup request and an)
-2.5 E 2.5(ya)-.15 G(uthentication requirements.)-2.5 E(*/)146.5 408 Q
(IceProcessMessages \(ne)144 432 Q(w_ice_conn, NULL, NULL\);)-.25 E
(status = IceConnectionStatus \(ne)144 444 Q(w_ice_conn\);)-.25 E(})108
456 Q(else)108 468 Q({)108 480 Q(if \(time_no)144 492 Q 2.5(w-t)-.25 G
(ime_start > MAX_W)-2.5 E(AIT_TIME\))-1.2 E
(status = IceConnectRejected;)180 504 Q(})108 516 Q(})72 528 Q
(if \(status == IceConnectAccepted\))72 552 Q({)72 564 Q(Add ne)108 576
Q(w_ice_conn to the list of open connections)-.25 E(})72 588 Q(else)72
600 Q({)72 612 Q(IceCloseConnection \(ne)108 624 Q(w_ice_conn\);)-.25 E
(})72 636 Q(After)72 657.6 Q F0(IceAcceptConnection)3.454 E F1 .12
(is called and the connection has been v)3.454 F .12
(alidated, the client is ready to recei)-.25 F .42 -.15(ve a)-.25 H F0
(Pr)72.833 669.6 Q(otocolSetup)-.18 E F1(\(pro)4.258 E .925(vided that)
-.15 F F0(IceRegisterF)4.258 E(orPr)-.25 E(otocolReply)-.18 E F1 -.1(wa)
4.258 G 3.425(sc).1 G .925(alled\) or send a)-3.425 F F0(Pr)4.259 E
(otocolSetup)-.18 E F1(\(pro-)4.259 E(vided that)72 681.6 Q F0
(IceRegisterF)3.333 E(orPr)-.25 E(otocolSetup)-.18 E F1 -.1(wa)3.333 G
2.5(sc).1 G(alled\).)-2.5 E 2.5<ad31>274.86 768 S 2.5<34ad>-2.5 G 0 Cg
EP
%%Page: 15 17
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E 2.5(7.5. Closing)72 84 R(ICE Connections)2.5
E/F1 10/Times-Roman@0 SF 2.191 -.8(To c)72 99.6 T .591
(lose an ICE connection created with).8 F F0(IceOpenConnection)3.923 E
F1(or)3.923 E F0(IceAcceptConnection)3.923 E F1 3.09(,u).833 G(se)-3.09
E F0(IceCloseC-)3.923 E(onnection)72 111.6 Q F1(.).833 E .4 LW 50.4
128.1 50.4 138.1 DL 50.4 126.1 50.4 136.1 DL 55.4 126.6 50.4 126.6 DL
57.4 126.6 52.4 126.6 DL 62.4 126.6 57.4 126.6 DL
(IceCloseStatus IceCloseConnection)72 139.2 Q(\().833 E/F2 10
/Times-Italic@0 SF(ice_conn).833 E F1(\)).833 E(IceConn)82 151.2 Q F2
(ice_conn)2.5 E F1(;).833 E F2(ice_conn)72 170.4 Q F1
(The ICE connection to close.)35.9 E 50.4 166.5 50.4 176.5 DL 50.4 164.5
50.4 174.5 DL 55.4 178 50.4 178 DL 57.4 178 52.4 178 DL 62.4 178 57.4
178 DL 1.6 -.8(To a)72 198 T(ctually close an ICE connection, the follo)
.8 E(wing conditions must be met:)-.25 E 21.5<8354>72 213.6 S(he)-21.5 E
F2 .629(open r)3.129 F(efer)-.37 E .629(ence count)-.37 F F1 .629
(must ha)3.129 F .929 -.15(ve r)-.2 H .629
(eached zero on this ICE connection.).15 F(When)5.629 E F0
(IceOpenConnec-)3.962 E(tion)97 225.6 Q F1 .345
(is called, it tries to use a pre)3.678 F .344
(viously opened ICE connection.)-.25 F .344(If it is able to use an e)
5.344 F .344(xisting con-)-.15 F .694(nection, it increments the open r\
eference count on the connection by one.)97 237.6 R .694
(So, to close an ICE con-)5.694 F .073(nection, each call to)97 249.6 R
F0(IceOpenConnection)3.405 E F1 .072(must be matched with a call to)
3.405 F F0(IceCloseConnection)3.405 E F1 5.072(.T).833 G(he)-5.072 E
(connection can be closed only on the last call to)97 261.6 Q F0
(IceCloseConnection)3.333 E F1(.).833 E 21.5<8354>72 277.2 S(he)-21.5 E
F2 .168(active pr)2.668 F .168(otocol count)-.45 F F1 .168(must ha)3.501
F .468 -.15(ve r)-.2 H .168(eached zero.).15 F .168(Each time a)5.168 F
F0(Pr)3.501 E(otocolSetup)-.18 E F1 .168(succeeds on the con-)3.501 F
.841(nection, the acti)97 289.2 R 1.141 -.15(ve p)-.25 H .841
(rotocol count is incremented by one.).15 F .84
(When the client no longer e)5.841 F .84(xpects to use)-.15 F .982
(the protocol on the connection, the)97 301.2 R F0(IcePr)4.315 E
(otocolShutdo)-.18 E(wn)-.1 E F1 .982
(function should be called, which decre-)4.315 F(ments the acti)97 313.2
Q .3 -.15(ve p)-.25 H(rotocol count by one \(see section 8, `).15 E
(`Protocol Setup and Shutdo)-.74 E(wn')-.25 E('\).)-.74 E 21.5<8349>72
328.8 S 2.874(fs)-21.5 G(hutdo)-2.874 E .374(wn ne)-.25 F .373(gotiatio\
n is enabled on the connection, the client on the other side of the ICE\
 connec-)-.15 F(tion must agree to ha)97 340.8 Q .3 -.15(ve t)-.2 H
(he connection closed.).15 E F0(IceCloseConnection)72.833 356.4 Q F1
(returns one of the follo)3.333 E(wing v)-.25 E(alues:)-.25 E<83>72 372
Q F0(IceClosedNo)22.333 E(w)-.1 E F1 3.348<ad74>4.181 G .849
(he ICE connection w)-3.348 F .849(as closed at this time.)-.1 F .849
(The w)5.849 F .849(atch procedures were in)-.1 F -.2(vo)-.4 G -.1(ke).2
G(d).1 E(and the connection w)97 384 Q(as freed.)-.1 E<83>72 399.6 Q F0
(IceClosedASAP)22.333 E F1 3.566<ad61>4.399 G 3.566(nI)-3.566 G 3.566
(Oe)-3.566 G 1.066(rror had occurred on the connection, b)-3.566 F(ut)
-.2 E F0(IceCloseConnection)4.399 E F1 1.066(is being)4.399 F .733
(called within a nested)97 411.6 R F0(IcePr)4.066 E(ocessMessages)-.18 E
F1 5.733(.T).833 G .733(he w)-5.733 F .733(atch procedures ha)-.1 F
1.034 -.15(ve b)-.2 H .734(een in).15 F -.2(vo)-.4 G -.1(ke).2 G 3.234
(da).1 G 3.234(tt)-3.234 G .734(his time,)-3.234 F -.2(bu)97 423.6 S
2.67(tt).2 G .169
(he connection will be freed as soon as possible \(when the nesting le)
-2.67 F -.15(ve)-.25 G 2.669(lr).15 G .169(eaches zero and)-2.669 F F0
(IcePr)3.502 E(o-)-.18 E(cessMessages)97 435.6 Q F1(returns a status of)
3.333 E F0(IcePr)3.333 E(ocessMessagesConnectionClosed)-.18 E F1(\).)
.833 E<83>72 451.2 Q F0(IceConnectionInUse)22.333 E F1 2.889<ad74>3.722
G .389(he connection w)-2.889 F .389
(as not closed at this time, because it is being used by other)-.1 F
(acti)97 463.2 Q .3 -.15(ve p)-.25 H(rotocols.).15 E<83>72 478.8 Q F0
(IceStartedShutdo)22.333 E(wnNegotiation)-.1 E F1 2.666<ad74>3.499 G
.166(he connection w)-2.666 F .165
(as not closed at this time and shutdo)-.1 F .165(wn ne)-.25 F(goti-)
-.15 E .17
(ation started with the client on the other side of the ICE connection.)
97 490.8 R .17(When the connection is actually)5.17 F(closed,)97 502.8 Q
F0(IcePr)3.333 E(ocessMessages)-.18 E F1(will return a status of)3.333 E
F0(IcePr)3.333 E(ocessMessagesConnectionClosed)-.18 E F1(.).833 E 1.27
(When it is kno)72 530.4 R 1.27(wn that the client on the other side of\
 the ICE connection has terminated the connection)-.25 F .176
(without initiating shutdo)72 542.4 R .176(wn ne)-.25 F .177
(gotiation, the)-.15 F F0(IceSetShutdo)3.51 E(wnNegotiation)-.1 E F1
.177(function should be called to turn)3.51 F(of)72 554.4 Q 2.5(fs)-.25
G(hutdo)-2.5 E(wn ne)-.25 E 2.5(gotiation. This)-.15 F(will pre)2.5 E
-.15(ve)-.25 G(nt).15 E F0(IceCloseConnection)3.333 E F1
(from writing to a brok)3.333 E(en connection.)-.1 E 50.4 570.9 50.4
580.9 DL 50.4 568.9 50.4 578.9 DL 55.4 569.4 50.4 569.4 DL 57.4 569.4
52.4 569.4 DL 62.4 569.4 57.4 569.4 DL -.2(vo)72 582 S(id IceSetShutdo)
.2 E(wnNe)-.25 E -1.667(gotiation \()-.15 F F2(ice_conn).833 E F1(,)A F2
(ne)2.5 E(gotiate)-.4 E F1(\)).833 E(IceConn)82 594 Q F2(ice_conn)2.5 E
F1(;).833 E(Bool)82 606 Q F2(ne)2.5 E(gotiate)-.4 E F1(;).833 E F2
(ice_conn)72 625.2 Q F1 2.5(Av)35.9 G(alid ICE connection object.)-2.75
E F2(ne)72 640.8 Q(gotiate)-.4 E F1(If)35.18 E F0 -.25(Fa)3.333 G(lse)
.25 E F1 2.5(,s).833 G(hutdo)-2.5 E(wn ne)-.25 E
(gotiating will be turned of)-.15 E(f.)-.25 E 50.4 636.9 50.4 646.9 DL
50.4 634.9 50.4 644.9 DL 55.4 648.4 50.4 648.4 DL 57.4 648.4 52.4 648.4
DL 62.4 648.4 57.4 648.4 DL 1.6 -.8(To c)72 672 T(heck the shutdo).8 E
(wn ne)-.25 E(gotiation status of an ICE connection, use)-.15 E F0
(IceCheckShutdo)3.333 E(wnNegotiation)-.1 E F1(.).833 E 50.4 688.5 50.4
698.5 DL 50.4 686.5 50.4 696.5 DL 55.4 687 50.4 687 DL 57.4 687 52.4 687
DL 62.4 687 57.4 687 DL(Bool IceCheckShutdo)72 699.6 Q(wnNe)-.25 E
-1.667(gotiation \()-.15 F F2(ice_conn).833 E F1(\)).833 E(IceConn)82
711.6 Q F2(ice_conn)2.5 E F1(;).833 E 2.5<ad31>274.86 768 S 2.5<35ad>
-2.5 G 0 Cg EP
%%Page: 16 18
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E/F1 10/Times-Italic@0 SF(ice_conn)72 84 Q/F2
10/Times-Roman@0 SF 2.5(Av)35.9 G(alid ICE connection object.)-2.75 E .4
LW 50.4 80.1 50.4 90.1 DL 50.4 78.1 50.4 88.1 DL 55.4 91.6 50.4 91.6 DL
57.4 91.6 52.4 91.6 DL 62.4 91.6 57.4 91.6 DL F0(IceCheckShutdo)72.833
111.6 Q(wnNegotiation)-.1 E F2(returns)4.12 E F0 -.74(Tr)4.12 G(ue).74 E
F2 .786(if shutdo)4.119 F .786(wn ne)-.25 F .786(gotiation will tak)-.15
F 3.286(ep)-.1 G .786(lace on the connection;)-3.286 F .374
(otherwise, it returns)72 123.6 R F0 -.25(Fa)3.707 G(lse).25 E F2 5.374
(.N).833 G -.15(eg)-5.374 G .374(otiation is on by def).15 F .374
(ault for a connection.)-.1 F .374(It can only be changed with the)5.374
F F0(IceSetShutdo)72.833 135.6 Q(wnNegotiation)-.1 E F2(function.)3.333
E F0 2.5(7.6. Connection)72 159.6 R -.65(Wa)2.5 G(tch Pr).65 E(ocedur)
-.18 E(es)-.18 E F2 2.281 -.8(To a)72 175.2 T .681(dd a w).8 F .68
(atch procedure that will be called each time ICElib opens a ne)-.1 F
3.18(wc)-.25 G .68(onnection via)-3.18 F F0(IceOpenCon-)4.013 E(nection)
72 187.2 Q F2(or)4.401 E F0(IceAcceptConnection)4.401 E F2 1.068
(or closes a connection via)4.401 F F0(IceCloseConnection)4.401 E F2
3.569(,u).833 G(se)-3.569 E F0(IceAddConnec-)4.402 E(tionW)72 199.2 Q
(atch)-.65 E F2(.).833 E 50.4 215.7 50.4 225.7 DL 50.4 213.7 50.4 223.7
DL 55.4 214.2 50.4 214.2 DL 57.4 214.2 52.4 214.2 DL 62.4 214.2 57.4
214.2 DL(Status IceAddConnectionW)72 226.8 Q -1.667(atch \()-.8 F F1
(watc).833 E(h_pr)-.15 E(oc)-.45 E F2(,)A F1(client_data)2.5 E F2(\))
.833 E(IceW)82 238.8 Q(atchProc)-.8 E F1(watc)2.5 E(h_pr)-.15 E(oc)-.45
E F2(;).833 E(IcePointer)82 250.8 Q F1(client_data)2.5 E F2(;).833 E F1
(watc)72 270 Q(h_pr)-.15 E(oc)-.45 E F2(The w)25.38 E
(atch procedure to in)-.1 E -.2(vo)-.4 G .2 -.1(ke w).2 H
(hen ICElib opens or closes a connection.).1 E F1(client_data)72 285.6 Q
F2(This pointer will be passed to the w)27 E(atch procedure.)-.1 E 50.4
281.7 50.4 291.7 DL 50.4 279.7 50.4 289.7 DL 55.4 293.2 50.4 293.2 DL
57.4 293.2 52.4 293.2 DL 62.4 293.2 57.4 293.2 DL(The return v)72 313.2
Q(alue of)-.25 E F0(IceAddConnectionW)3.333 E(atch)-.65 E F2
(is zero for f)3.333 E(ailure, and a positi)-.1 E .3 -.15(ve v)-.25 H
(alue for success.)-.1 E .728(Note that se)72 328.8 R -.15(ve)-.25 G
.727(ral calls to).15 F F0(IceOpenConnection)4.06 E F2 .727
(might share the same ICE connection.)4.06 F .727(In such a case, the)
5.727 F -.1(wa)72 340.8 S .285(tch procedure is only in).1 F -.2(vo)-.4
G -.1(ke).2 G 2.786(dw).1 G .286(hen the connection is \214rst created \
\(after authentication succeeds\).)-2.786 F(Simi-)5.286 E(larly)72 352.8
Q 4.15(,b)-.65 G 1.65(ecause connections might be shared, the w)-4.15 F
1.649(atch procedure is called only if)-.1 F F0(IceCloseConnection)4.982
E F2
(actually closes the connection \(right before the IceConn is freed\).)
72 364.8 Q 1.118(The w)72 380.4 R 1.118(atch procedures are v)-.1 F
1.118(ery useful for applications that need to add a \214le descriptor \
to a select mask)-.15 F 2.516(when a ne)72 392.4 R 5.016(wc)-.25 G 2.516
(onnection is created and remo)-5.016 F 2.816 -.15(ve t)-.15 H 2.516
(he \214le descriptor when the connection is destro).15 F(yed.)-.1 E
.425(Because connections are shared, kno)72 404.4 R .426
(wing when to add and remo)-.25 F .726 -.15(ve t)-.15 H .426
(he \214le descriptor from the select mask).15 F -.1(wo)72 416.4 S
(uld be dif).1 E(\214cult without the w)-.25 E(atch procedures.)-.1 E
.512(Multiple w)72 432 R .512(atch procedures may be re)-.1 F .512
(gistered with the ICE library)-.15 F 5.512(.N)-.65 G 3.012(oa)-5.512 G
.512(ssumptions should be made about)-3.012 F(their order of in)72 444 Q
-.2(vo)-.4 G(cation.).2 E .424(If one or more ICE connections were alre\
ady created by the ICE library at the time the w)72 459.6 R .424
(atch procedure is)-.1 F(re)72 471.6 Q .277(gistered, the w)-.15 F .277
(atch procedure will instantly be in)-.1 F -.2(vo)-.4 G -.1(ke).2 G
2.777(df).1 G .277(or each of these ICE connections \(with the open-)
-2.777 F(ing ar)72 483.6 Q(gument set to)-.18 E F0 -.74(Tr)3.333 G(ue)
.74 E F2(\).).833 E(The w)72 499.2 Q(atch procedure is of type)-.1 E F0
(IceW)3.333 E(atchPr)-.65 E(oc)-.18 E F2(.).833 E 50.4 515.7 50.4 525.7
DL 50.4 513.7 50.4 523.7 DL 55.4 514.2 50.4 514.2 DL 57.4 514.2 52.4
514.2 DL 62.4 514.2 57.4 514.2 DL(typedef v)72 526.8 Q(oid \(*IceW)-.2 E
(atchProc\)\(\);)-.8 E -.2(vo)72 550.8 S(id W).2 E -1.667(atchProc \()
-.8 F F1(ice_conn).833 E F2(,)A F1(client_data)2.5 E F2(,).833 E F1
(opening)2.5 E F2(,).833 E F1(watc)2.5 E(h_data)-.15 E F2(\)).833 E
(IceConn)82 562.8 Q F1(ice_conn)2.5 E F2(;).833 E(IcePointer)82 574.8 Q
F1(client_data)2.5 E F2(;).833 E(Bool)82 586.8 Q F1(opening)2.5 E F2(;)
.833 E(IcePointer *)82 598.8 Q F1(watc)A(h_data)-.15 E F2(;).833 E F1
(ice_conn)72 618 Q F2 2.605(The opened or closed ICE connection.)35.9 F
(Call)7.605 E F0(IceConnectionNumber)5.938 E F2 2.605(to get the \214le)
5.938 F(descriptor associated with this connection.)144 630 Q F1
(client_data)72 645.6 Q F2(Client data speci\214ed in the call to)27 E
F0(IceAddConnectionW)3.333 E(atch)-.65 E F2(.).833 E F1(opening)72 661.2
Q F2(If)39.78 E F0 -.74(Tr)3.333 G(ue).74 E F2 2.5(,t).833 G
(he connection is being opened.)-2.5 E(If)5 E F0 -.25(Fa)3.333 G(lse).25
E F2 2.5(,t).833 G(he connection is being closed.)-2.5 E F1(watc)72
676.8 Q(h_data)-.15 E F2(Can be used to sa)25.48 E .3 -.15(ve a p)-.2 H
(ointer to client data.).15 E 50.4 672.9 50.4 682.9 DL 50.4 670.9 50.4
680.9 DL 55.4 684.4 50.4 684.4 DL 57.4 684.4 52.4 684.4 DL 62.4 684.4
57.4 684.4 DL .628(If opening is)72 704.4 R F0 -.74(Tr)3.961 G(ue).74 E
F2 3.128(,t).833 G .628(he client should set the *w)-3.128 F .628
(atch_data pointer to an)-.1 F 3.128(yd)-.15 G .627
(ata it may need to sa)-3.128 F .927 -.15(ve u)-.2 H .627(ntil the).15 F
(connection is closed and the w)72 716.4 Q(atch procedure is in)-.1 E
-.2(vo)-.4 G -.1(ke).2 G 2.5(da).1 G -.05(ga)-2.5 G
(in with opening set to).05 E F0 -.25(Fa)3.333 G(lse).25 E F2(.).833 E
2.5<ad31>274.86 768 S 2.5<36ad>-2.5 G 0 Cg EP
%%Page: 17 19
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E/F1 10/Times-Roman@0 SF 1.6 -.8(To r)72 84 T
(emo).8 E .3 -.15(ve a w)-.15 H(atch procedure, use).05 E F0(IceRemo)
3.333 E -.1(ve)-.1 G(ConnectionW).1 E(atch)-.65 E F1(.).833 E .4 LW 50.4
100.5 50.4 110.5 DL 50.4 98.5 50.4 108.5 DL 55.4 99 50.4 99 DL 57.4 99
52.4 99 DL 62.4 99 57.4 99 DL -.2(vo)72 111.6 S(id IceRemo).2 E -.15(ve)
-.15 G(ConnectionW).15 E -1.667(atch \()-.8 F/F2 10/Times-Italic@0 SF
(watc).833 E(h_pr)-.15 E(oc)-.45 E F1(,)A F2(client_data)2.5 E F1(\))
.833 E(IceW)82 123.6 Q(atchProc)-.8 E F2(watc)2.5 E(h_pr)-.15 E(oc)-.45
E F1(;).833 E(IcePointer)82 135.6 Q F2(client_data)2.5 E F1(;).833 E F2
(watc)72 158.4 Q(h_pr)-.15 E(oc)-.45 E F1(The w)25.38 E
(atch procedure that w)-.1 E(as passed to)-.1 E F0(IceAddConnectionW)
3.333 E(atch)-.65 E F1(.).833 E F2(client_data)72 174 Q F1
(The client_data pointer that w)27 E(as passed to)-.1 E F0
(IceAddConnectionW)3.333 E(atch)-.65 E F1(.).833 E 50.4 170.1 50.4 180.1
DL 50.4 168.1 50.4 178.1 DL 55.4 181.6 50.4 181.6 DL 57.4 181.6 52.4
181.6 DL 62.4 181.6 57.4 181.6 DL F0 2.5(8. Pr)72 213.6 R
(otocol Setup and Shutdo)-.18 E(wn)-.1 E F1 1.6 -.8(To a)72 229.2 T(cti)
.8 E -.25(va)-.25 G(te a protocol on a gi).25 E -.15(ve)-.25 G 2.5(nI)
.15 G(CE connection, use)-2.5 E F0(IcePr)3.333 E(otocolSetup)-.18 E F1
(.).833 E 50.4 249.3 50.4 259.3 DL 50.4 247.3 50.4 257.3 DL 55.4 247.8
50.4 247.8 DL 57.4 247.8 52.4 247.8 DL 62.4 247.8 57.4 247.8 DL
(IceProtocolSetupStatus IceProtocolSetup)72 260.4 Q(\().833 E F2
(ice_conn).833 E F1(,)A F2(my_opcode)2.5 E F1(,).833 E F2(client_data)
2.5 E F1(,).833 E F2(must_authenticate)2.5 E F1(,).833 E F2(major_ver)
122 272.4 Q(sion_r)-.1 E(et)-.37 E F1(,).833 E F2(minor_ver)2.5 E
(sion_r)-.1 E(et)-.37 E F1(,).833 E F2(vendor_r)2.5 E(et)-.37 E F1(,)
.833 E F2 -.37(re)2.5 G(lease_r).37 E(et)-.37 E F1(,).833 E F2(err)2.5 E
(or_length)-.45 E F1(,).833 E F2(err)2.5 E(or_string_r)-.45 E(et)-.37 E
F1(\)).833 E(IceConn)82 284.4 Q F2(ice_conn)2.5 E F1(;).833 E(int)82
296.4 Q F2(my_opcode)2.5 E F1(;).833 E(IcePointer)82 308.4 Q F2
(client_data)2.5 E F1(;).833 E(Bool)82 320.4 Q F2(must_authenticate)2.5
E F1(;).833 E(int *)82 332.4 Q F2(major_ver)A(sion_r)-.1 E(et)-.37 E F1
(;).833 E(int *)82 344.4 Q F2(minor_ver)A(sion_r)-.1 E(et)-.37 E F1(;)
.833 E(char **)82 356.4 Q F2(vendor_r)A(et)-.37 E F1(;).833 E(char **)82
368.4 Q F2 -.37(re)C(lease_r).37 E(et)-.37 E F1(;).833 E(int)82 380.4 Q
F2(err)2.5 E(or_length)-.45 E F1(;).833 E(char *)82 392.4 Q F2(err)A
(or_string_r)-.45 E(et)-.37 E F1(;).833 E F2(ice_conn)72 411.6 Q F1 2.5
(Av)35.9 G(alid ICE connection object.)-2.75 E F2(my_opcode)72 427.2 Q
F1 1.685(The major opcode of the protocol to be set up, as returned by)
26.46 F F0(IceRegisterF)5.019 E(orPr)-.25 E(oto-)-.18 E(colSetup)144
439.2 Q F1(.).833 E F2(client_data)72 454.8 Q F1 1.01
(The client data stored in this pointer will be passed to the)27 F F0
(IceP)4.342 E(oPr)-.2 E(ocessMsgPr)-.18 E(oc)-.18 E F1(call-)4.342 E
(back.)144 466.8 Q F2(must_authenticate)72 482.4 Q F1(If)144 494.4 Q F0
-.74(Tr)3.333 G(ue).74 E F1 2.5(,t).833 G
(he other client may not bypass authentication.)-2.5 E F2(major_ver)72
510 Q(sion_r)-.1 E(et)-.37 E F1(The major v)144 522 Q
(ersion of the protocol to be used is returned.)-.15 E F2(minor_ver)72
537.6 Q(sion_r)-.1 E(et)-.37 E F1(The minor v)144 549.6 Q
(ersion of the protocol to be used is returned.)-.15 E F2(vendor_r)72
565.2 Q(et)-.37 E F1(The v)28.49 E
(endor string speci\214ed by the protocol acceptor)-.15 E(.)-.55 E F2
-.37(re)72 580.8 S(lease_r).37 E(et)-.37 E F1
(The release string speci\214ed by the protocol acceptor)27.75 E(.)-.55
E F2(err)72 596.4 Q(or_length)-.45 E F1
(Speci\214es the length of the error_string_ret ar)21.34 E
(gument passed in.)-.18 E F2(err)72 612 Q(or_string_r)-.45 E(et)-.37 E
F1 .6(Returns a null-terminated error message, if an)7.26 F 4.4 -.65
(y. T)-.15 H .6(he error_string_ret ar).65 F .6(gument points to)-.18 F
(user supplied memory)144 624 Q 5(.N)-.65 G 2.5(om)-5 G
(ore than error_length bytes are used.)-2.5 E 50.4 620.1 50.4 630.1 DL
50.4 618.1 50.4 628.1 DL 55.4 631.6 50.4 631.6 DL 57.4 631.6 52.4 631.6
DL 62.4 631.6 57.4 631.6 DL(The v)72 651.6 Q
(endor_ret and release_ret strings should be freed with)-.15 E F0(fr)
3.333 E(ee)-.18 E F1(when no longer needed.)3.333 E F0(IcePr)72.833
667.2 Q(otocolSetup)-.18 E F1(returns one of the follo)3.333 E(wing v)
-.25 E(alues:)-.25 E<83>72 682.8 Q F0(IcePr)22.333 E(otocolSetupSuccess)
-.18 E F1 4.147<ad74>4.98 G 1.646(he major_v)-4.147 F 1.646
(ersion_ret, minor_v)-.15 F 1.646(ersion_ret, v)-.15 F 1.646
(endor_ret, release_ret are)-.15 F(set.)97 694.8 Q<83>72 710.4 Q F0
(IcePr)22.333 E(otocolSetupF)-.18 E(ailur)-.25 E(e)-.18 E F1(or)3.822 E
F0(IcePr)3.822 E(otocolSetupIOErr)-.18 E(or)-.18 E F1 2.99<ad63>3.823 G
.49(heck error_string_ret for f)-2.99 F .49(ailure reason.)-.1 F
(The major_v)97 722.4 Q(ersion_ret, minor_v)-.15 E(ersion_ret, v)-.15 E
(endor_ret, release_ret are not set.)-.15 E 2.5<ad31>274.86 768 S 2.5
<37ad>-2.5 G 0 Cg EP
%%Page: 18 20
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E/F1 10/Times-Roman@0 SF<83>72 84 Q F0(IcePr)
22.333 E(otocolAlr)-.18 E(eadyActi)-.18 E -.1(ve)-.1 G F1 4.493<ad74>
5.426 G 1.992(his protocol is already acti)-4.493 F 2.292 -.15(ve o)-.25
H 4.492(nt).15 G 1.992(his connection.)-4.492 F 1.992(The major_v)6.992
F(er)-.15 E(-)-.2 E(sion_ret, minor_v)97 96 Q(ersion_ret, v)-.15 E
(endor_ret, release_ret are not set.)-.15 E 2 -.8(To n)72 123.6 T .401
(otify the ICE library when a gi).8 F -.15(ve)-.25 G 2.901(np).15 G .401
(rotocol will no longer be used on an ICE connection, use)-2.901 F F0
(IcePr)3.734 E(o-)-.18 E(tocolShutdo)72 135.6 Q(wn)-.1 E F1(.).833 E .4
LW 50.4 155.7 50.4 165.7 DL 50.4 153.7 50.4 163.7 DL 55.4 154.2 50.4
154.2 DL 57.4 154.2 52.4 154.2 DL 62.4 154.2 57.4 154.2 DL
(Status IceProtocolShutdo)72 166.8 Q -1.667(wn \()-.25 F/F2 10
/Times-Italic@0 SF(ice_conn).833 E F1(,)A F2(major_opcode)2.5 E F1(\))
.833 E(IceConn)82 178.8 Q F2(ice_conn)2.5 E F1(;).833 E(int)82 190.8 Q
F2(major_opcode)2.5 E F1(;).833 E F2(ice_conn)72 210 Q F1 2.5(Av)35.9 G
(alid ICE connection object.)-2.75 E F2(major_opcode)72 225.6 Q F1
(The major opcode of the protocol to shut do)14.23 E(wn.)-.25 E 50.4
221.7 50.4 231.7 DL 50.4 219.7 50.4 229.7 DL 55.4 233.2 50.4 233.2 DL
57.4 233.2 52.4 233.2 DL 62.4 233.2 57.4 233.2 DL(The return v)72 253.2
Q(alue of)-.25 E F0(IcePr)3.333 E(otocolShutdo)-.18 E(wn)-.1 E F1
(is zero for f)3.333 E(ailure and a positi)-.1 E .3 -.15(ve v)-.25 H
(alue for success.)-.1 E -.15(Fa)72 268.8 S .251
(ilure will occur if the major opcode w).15 F .251(as ne)-.1 F -.15(ve)
-.25 G 2.751(rr).15 G -.15(eg)-2.751 G .25
(istered OR the protocol of the major opcode w).15 F .25(as ne)-.1 F
-.15(ve)-.25 G(r).15 E(acti)72 280.8 Q -.25(va)-.25 G 1.146
(ted on the connection.).25 F 1.146(By acti)6.146 F -.25(va)-.25 G 1.146
(ted, we mean that a).25 F F0(Pr)4.479 E(otocolSetup)-.18 E F1 1.146
(succeeded on the connection.)4.479 F
(Note that ICE does not de\214ne ho)72 292.8 Q 2.5(we)-.25 G
(ach sub-protocol triggers a protocol shutdo)-2.5 E(wn.)-.25 E F0 2.5
(9. Pr)72 316.8 R(ocessing Messages)-.18 E F1 1.6 -.8(To p)72 332.4 T
(rocess incoming messages on an ICE connection, use).8 E F0(IcePr)3.333
E(ocessMessages)-.18 E F1(.).833 E 50.4 348.9 50.4 358.9 DL 50.4 346.9
50.4 356.9 DL 55.4 347.4 50.4 347.4 DL 57.4 347.4 52.4 347.4 DL 62.4
347.4 57.4 347.4 DL(IceProcessMessagesStatus IceProcessMessages)72 360 Q
(\().833 E F2(ice_conn).833 E F1(,)A F2 -.37(re)2.5 G(ply_wait).37 E F1
(,).833 E F2 -.37(re)2.5 G(ply_r).37 E(eady_r)-.37 E(et)-.37 E F1(\))
.833 E(IceConn)82 372 Q F2(ice_conn)2.5 E F1(;).833 E(IceReplyW)82 384 Q
(aitInfo *)-.8 E F2 -.37(re)C(ply_wait).37 E F1(;).833 E(Bool *)82 396 Q
F2 -.37(re)C(ply_r).37 E(eady_r)-.37 E(et)-.37 E F1(;).833 E F2
(ice_conn)72 415.2 Q F1 2.5(Av)35.9 G(alid ICE connection object.)-2.75
E F2 -.37(re)72 430.8 S(ply_wait).37 E F1
(Indicates if a reply is being w)29.59 E(aited for)-.1 E(.)-.55 E F2
-.37(re)72 446.4 S(ply_r).37 E(eady_r)-.37 E(et)-.37 E F1(If set to)8.68
E F0 -.74(Tr)3.333 G(ue).74 E F1(on return, a reply is ready)3.333 E(.)
-.65 E 50.4 442.5 50.4 452.5 DL 50.4 440.5 50.4 450.5 DL 55.4 454 50.4
454 DL 57.4 454 52.4 454 DL 62.4 454 57.4 454 DL F0(IcePr)72.833 474 Q
(ocessMessages)-.18 E F1(is used in tw)3.333 E 2.5(ow)-.1 G(ays:)-2.6 E
21.5<8349>72 489.6 S 3.596(nt)-21.5 G 1.095
(he \214rst, a client may generate a message and block by calling)-3.596
F F0(IcePr)4.428 E(ocessMessages)-.18 E F1(repeatedly)4.428 E
(until it gets its reply)97 501.6 Q(.)-.65 E 21.5<8349>72 517.2 S 2.879
(nt)-21.5 G .38(he second, a client calls)-2.879 F F0(IcePr)3.713 E
(ocessMessages)-.18 E F1 .38(with reply_w)3.713 F .38
(ait set to NULL in response to)-.1 F F0(select)3.713 E F1(sho)97 529.2
Q .346(wing that there is data to read on the ICE connection.)-.25 F
.345(The ICE library may process zero or more)5.345 F .927
(complete messages.)97 541.2 R .927
(Note that messages that are not block)5.927 F .927(ed for are al)-.1 F
-.1(wa)-.1 G .928(ys processed by in).1 F -.2(vo)-.4 G(king).2 E
(callbacks.)97 553.2 Q F0(IceReplyW)72.833 568.8 Q(aitInf)-.65 E(o)-.25
E F1 1.319(contains the major/minor opcodes and sequence number of the \
message for which a)4.652 F .808(reply is being a)72 580.8 R -.1(wa)-.15
G 3.308(ited. It).1 F .809(also contains a pointer to the reply message\
 to be \214lled in \(the protocol library)3.308 F .751(should cast this)
72 592.8 R F0(IceP)4.084 E(ointer)-.2 E F1 .751
(to the appropriate reply type\).)4.084 F .751
(In most cases, the reply will ha)5.751 F 1.05 -.15(ve s)-.2 H .75
(ome \214x).15 F(ed-)-.15 E .626(size part, and the client w)72 604.8 R
.626(aiting for the reply will ha)-.1 F .927 -.15(ve p)-.2 H(ro).15 E
.627(vided a pointer to a structure to hold this \214x)-.15 F(ed-)-.15 E
1.12(size data.)72 616.8 R 1.12(If there is v)6.12 F 1.12
(ariable-length data, it w)-.25 F 1.119(ould be e)-.1 F 1.119
(xpected that the)-.15 F F0(IceP)4.452 E(oPr)-.2 E(ocessMsgPr)-.18 E(oc)
-.18 E F1(callback)4.452 E .715(will ha)72 628.8 R 1.015 -.15(ve t)-.2 H
3.215(oa).15 G .716(llocate additional memory and store pointer\(s\) to\
 that memory in the \214x)-3.215 F .716(ed-size structure.)-.15 F(If)
5.716 E .02(the entire data is v)72 640.8 R .02(ariable length \(for e)
-.25 F .019(xample, a single v)-.15 F .019
(ariable-length string\), then the client w)-.25 F .019(aiting for the)
-.1 F .784(reply w)72 652.8 R .784
(ould probably just pass a pointer to \214x)-.1 F .784
(ed-size space to hold a pointer)-.15 F 3.285(,a)-.4 G .785(nd the)
-3.285 F F0(IceP)4.118 E(oPr)-.2 E(ocessMsg-)-.18 E(Pr)72 664.8 Q(oc)
-.18 E F1 .023(callback w)3.356 F .022
(ould allocate the storage and store the pointer)-.1 F 5.022(.I)-.55 G
2.522(ti)-5.022 G 2.522(st)-2.522 G .022
(he responsibility of the client recei)-2.522 F(ving)-.25 E
(the reply to free up an)72 676.8 Q 2.5(ym)-.15 G
(emory allocated on its behalf.)-2.5 E 2.5<ad31>274.86 768 S 2.5<38ad>
-2.5 G 0 Cg EP
%%Page: 19 21
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E .4 LW 50.4 76.5 50.4 86.5 DL 50.4 74.5 50.4
84.5 DL 55.4 75 50.4 75 DL 57.4 75 52.4 75 DL 62.4 75 57.4 75 DL/F1 10
/Times-Roman@0 SF(typedef struct {)72 90 Q
(unsigned long sequence_of_request;)108 102 Q
(int major_opcode_of_request;)108 114 Q(int minor_opcode_of_request;)108
126 Q(IcePointer reply;)108 138 Q 2.5(}I)72 150 S(ceReplyW)-2.5 E
(aitInfo;)-.8 E 50.4 152.1 50.4 162.1 DL 50.4 150.1 50.4 160.1 DL 55.4
163.6 50.4 163.6 DL 57.4 163.6 52.4 163.6 DL 62.4 163.6 57.4 163.6 DL
1.789(If reply_w)72 183.6 R 1.789(ait is not NULL and)-.1 F F0(IcePr)
5.122 E(ocessMessages)-.18 E F1 1.79
(has a reply or error to return in response to this)5.123 F(reply_w)72
195.6 Q(ait \(that is, no callback w)-.1 E
(as generated\), then the reply_ready_ret ar)-.1 E
(gument will be set to)-.18 E F0 -.74(Tr)3.333 G(ue).74 E F1(.).833 E
.457(If reply_w)72 211.2 R .456(ait is NULL, then the caller may also p\
ass NULL for reply_ready_ret and be guaranteed that no)-.1 F -.25(va)72
223.2 S(lue will be stored in this pointer).25 E(.)-.55 E F0(IcePr)
72.833 238.8 Q(ocessMessages)-.18 E F1(returns one of the follo)3.333 E
(wing v)-.25 E(alues:)-.25 E<83>72 254.4 Q F0(IcePr)22.333 E
(ocessMessagesSuccess)-.18 E F1 2.5<ad6e>3.333 G 2.5(oe)-2.5 G
(rror occurred.)-2.5 E<83>72 270 Q F0(IcePr)22.333 E(ocessMessagesIOErr)
-.18 E(or)-.18 E F1 3.464<ad61>4.297 G 3.464(nI)-3.464 G 3.464(Oe)-3.464
G .964(rror occurred, and the caller must e)-3.464 F .965
(xplicitly close the con-)-.15 F(nection by calling)97 282 Q F0
(IceCloseConnection)3.333 E F1(.).833 E<83>72 297.6 Q F0(IcePr)22.333 E
(ocessMessagesConnectionClosed)-.18 E F1 3.329<ad74>4.162 G .828
(he ICE connection has been closed \(closing of the con-)-3.329 F .707
(nection w)97 309.6 R .707(as deferred because of shutdo)-.1 F .708
(wn ne)-.25 F .708(gotiation, or because the)-.15 F F0(IcePr)4.041 E
(ocessMessages)-.18 E F1(nesting)4.041 E(le)97 321.6 Q -.15(ve)-.25 G
2.504(lw).15 G .004(as not zero\).)-2.604 F .004(Do not attempt to acce\
ss the ICE connection at this point, since it has been freed.)5.004 F F0
2.5(10. Ping)72 345.6 R F1 1.6 -.8(To s)72 361.2 T(end a `).8 E(`Ping')
-.74 E 2.5('m)-.74 G
(essage to the client on the other side of the ICE connection, use)-2.5
E F0(IcePing)3.333 E F1(.).833 E 50.4 377.7 50.4 387.7 DL 50.4 375.7
50.4 385.7 DL 55.4 376.2 50.4 376.2 DL 57.4 376.2 52.4 376.2 DL 62.4
376.2 57.4 376.2 DL(Status IcePing)72 388.8 Q(\().833 E/F2 10
/Times-Italic@0 SF(ice_conn).833 E F1(,)A F2(ping_r)2.5 E(eply_pr)-.37 E
(oc)-.45 E F1(,).833 E F2(client_data)2.5 E F1(\)).833 E(IceConn)82
400.8 Q F2(ice_conn)2.5 E F1(;).833 E(IcePingReplyProc)82 412.8 Q F2
(ping_r)2.5 E(eply_pr)-.37 E(oc)-.45 E F1(;).833 E(IcePointer)82 424.8 Q
F2(client_data)2.5 E F1(;).833 E F2(ice_conn)72 444 Q F1 2.5(Av)35.9 G
(alid ICE connection object.)-2.75 E F2(ping_r)72 459.6 Q(eply_pr)-.37 E
(oc)-.45 E F1(The callback to in)6.16 E -.2(vo)-.4 G .2 -.1(ke w).2 H
(hen the Ping reply arri).1 E -.15(ve)-.25 G(s.).15 E F2(client_data)72
475.2 Q F1(This pointer will be passed to the)27 E F0(IcePingReplyPr)
3.333 E(oc)-.18 E F1(callback.)3.333 E 50.4 471.3 50.4 481.3 DL 50.4
469.3 50.4 479.3 DL 55.4 482.8 50.4 482.8 DL 57.4 482.8 52.4 482.8 DL
62.4 482.8 57.4 482.8 DL F0(IcePing)72.833 502.8 Q F1
(returns zero for f)3.333 E(ailure and a positi)-.1 E .3 -.15(ve v)-.25
H(alue for success.)-.1 E(When)72 518.4 Q F0(IcePr)3.333 E
(ocessMessages)-.18 E F1(processes the Ping reply)3.333 E 2.5(,i)-.65 G
2.5(tw)-2.5 G(ill in)-2.5 E -.2(vo)-.4 G .2 -.1(ke t).2 H(he).1 E F0
(IcePingReplyPr)3.333 E(oc)-.18 E F1(callback.)3.333 E 50.4 534.9 50.4
544.9 DL 50.4 532.9 50.4 542.9 DL 55.4 533.4 50.4 533.4 DL 57.4 533.4
52.4 533.4 DL 62.4 533.4 57.4 533.4 DL(typedef v)72 546 Q
(oid \(*IcePingReplyProc\)\(\);)-.2 E -.2(vo)72 570 S(id PingReplyProc)
.2 E(\().833 E F2(ice_conn).833 E F1(,)A F2(client_data)2.5 E F1(\)).833
E(IceConn)82 582 Q F2(ice_conn)2.5 E F1(;).833 E(IcePointer)82 594 Q F2
(client_data)2.5 E F1(;).833 E F2(ice_conn)72 613.2 Q F1
(The ICE connection object.)35.9 E F2(client_data)72 628.8 Q F1
(The client data speci\214ed in the call to)27 E F0(IcePing)3.333 E F1
(.).833 E 50.4 624.9 50.4 634.9 DL 50.4 622.9 50.4 632.9 DL 55.4 636.4
50.4 636.4 DL 57.4 636.4 52.4 636.4 DL 62.4 636.4 57.4 636.4 DL F0 2.5
(11. Using)72 668.4 R(ICElib Inf)2.5 E(ormational Functions)-.25 E 50.4
688.5 50.4 698.5 DL 50.4 686.5 50.4 696.5 DL 55.4 687 50.4 687 DL 57.4
687 52.4 687 DL 62.4 687 57.4 687 DL F1
(IceConnectStatus IceConnectionStatus)72 699.6 Q(\().833 E F2(ice_conn)
.833 E F1(\)).833 E(IceConn)82 711.6 Q F2(ice_conn)2.5 E F1(;).833 E 2.5
<ad31>274.86 768 S 2.5<39ad>-2.5 G 0 Cg EP
%%Page: 20 22
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E .4 LW 50.4 76.5 50.4 86.5 DL 50.4 74.5 50.4
84.5 DL 55.4 88 50.4 88 DL 57.4 88 52.4 88 DL 62.4 88 57.4 88 DL
(IceConnectionStatus)72.833 108 Q/F1 10/Times-Roman@0 SF
(returns the status of an ICE connection.)3.333 E(The possible return v)
5 E(alues are:)-.25 E<83>72 123.6 Q F0(IceConnectP)22.333 E(ending)-.2 E
F1 2.622<ad74>3.455 G .122(he connection is not v)-2.622 F .122
(alid yet \(that is, authentication is taking place\).)-.25 F .123
(This is)5.123 F(only rele)97 135.6 Q -.25(va)-.25 G
(nt to connections created by).25 E F0(IceAcceptConnection)3.333 E F1(.)
.833 E<83>72 151.2 Q F0(IceConnectAccepted)22.333 E F1 2.971<ad74>3.805
G .471(he connection has been accepted.)-2.971 F .471(This is only rele)
5.471 F -.25(va)-.25 G .471(nt to connections cre-).25 F(ated by)97
163.2 Q F0(IceAcceptConnection)3.333 E F1(.).833 E<83>72 178.8 Q F0
(IceConnectRejected)22.333 E F1 2.555<ad74>3.387 G .055
(he connection had been rejected)-2.555 F .055
(\(that is, authentication f)5.055 F 2.555(ailed\). This)-.1 F .055
(is only)2.555 F(rele)97 190.8 Q -.25(va)-.25 G
(nt to connections created by).25 E F0(IceAcceptConnection)3.333 E F1(.)
.833 E<83>72 206.4 Q F0(IceConnectIOErr)22.333 E(or)-.18 E F1 2.5<ad61>
3.333 G 2.5(nI)-2.5 G 2.5(Oe)-2.5 G
(rror has occurred on the connection.)-2.5 E 50.4 226.5 50.4 236.5 DL
50.4 224.5 50.4 234.5 DL 55.4 225 50.4 225 DL 57.4 225 52.4 225 DL 62.4
225 57.4 225 DL(char *IceV)72 237.6 Q -1.667(endor \()-1.11 F/F2 10
/Times-Italic@0 SF(ice_conn).833 E F1(\)).833 E(IceConn)82 249.6 Q F2
(ice_conn)2.5 E F1(;).833 E 50.4 245.7 50.4 255.7 DL 50.4 243.7 50.4
253.7 DL 55.4 257.2 50.4 257.2 DL 57.4 257.2 52.4 257.2 DL 62.4 257.2
57.4 257.2 DL F0(IceV)72.833 277.2 Q(endor)-1 E F1 1.159
(returns the ICE library v)4.492 F 1.159
(endor identi\214cation for the other side of the connection.)-.15 F
1.158(The string)6.159 F(should be freed with a call to)72 289.2 Q F0
(fr)3.333 E(ee)-.18 E F1(when no longer needed.)3.333 E 50.4 309.3 50.4
319.3 DL 50.4 307.3 50.4 317.3 DL 55.4 307.8 50.4 307.8 DL 57.4 307.8
52.4 307.8 DL 62.4 307.8 57.4 307.8 DL(char *IceRelease)72 320.4 Q(\()
.833 E F2(ice_conn).833 E F1(\)).833 E(IceConn)82 332.4 Q F2(ice_conn)
2.5 E F1(;).833 E 50.4 328.5 50.4 338.5 DL 50.4 326.5 50.4 336.5 DL 55.4
340 50.4 340 DL 57.4 340 52.4 340 DL 62.4 340 57.4 340 DL F0(IceRelease)
72.833 360 Q F1 1.103(returns the release identi\214cation of the ICE l\
ibrary on the other side of the connection.)4.435 F(The)6.103 E
(string should be freed with a call to)72 372 Q F0(fr)3.333 E(ee)-.18 E
F1(when no longer needed.)3.333 E 50.4 392.1 50.4 402.1 DL 50.4 390.1
50.4 400.1 DL 55.4 390.6 50.4 390.6 DL 57.4 390.6 52.4 390.6 DL 62.4
390.6 57.4 390.6 DL(int IceProtocolV)72 403.2 Q -1.667(ersion \()-1.11 F
F2(ice_conn).833 E F1(\)).833 E(IceConn)82 415.2 Q F2(ice_conn)2.5 E F1
(;).833 E 50.4 411.3 50.4 421.3 DL 50.4 409.3 50.4 419.3 DL 55.4 422.8
50.4 422.8 DL 57.4 422.8 52.4 422.8 DL 62.4 422.8 57.4 422.8 DL F0
(IcePr)72.833 442.8 Q(otocolV)-.18 E(ersion)-1 E F1(returns the major v)
3.333 E(ersion of the ICE protocol on this connection.)-.15 E 50.4 462.9
50.4 472.9 DL 50.4 460.9 50.4 470.9 DL 55.4 461.4 50.4 461.4 DL 57.4
461.4 52.4 461.4 DL 62.4 461.4 57.4 461.4 DL(int IceProtocolRe)72 474 Q
-1.667(vision \()-.25 F F2(ice_conn).833 E F1(\)).833 E(IceConn)82 486 Q
F2(ice_conn)2.5 E F1(;).833 E 50.4 482.1 50.4 492.1 DL 50.4 480.1 50.4
490.1 DL 55.4 493.6 50.4 493.6 DL 57.4 493.6 52.4 493.6 DL 62.4 493.6
57.4 493.6 DL F0(IcePr)72.833 513.6 Q(otocolRe)-.18 E(vision)-.15 E F1
(returns the minor v)3.333 E
(ersion of the ICE protocol on this connection.)-.15 E 50.4 533.7 50.4
543.7 DL 50.4 531.7 50.4 541.7 DL 55.4 532.2 50.4 532.2 DL 57.4 532.2
52.4 532.2 DL 62.4 532.2 57.4 532.2 DL(int IceConnectionNumber)72 544.8
Q(\().833 E F2(ice_conn).833 E F1(\)).833 E(IceConn)82 556.8 Q F2
(ice_conn)2.5 E F1(;).833 E 50.4 552.9 50.4 562.9 DL 50.4 550.9 50.4
560.9 DL 55.4 564.4 50.4 564.4 DL 57.4 564.4 52.4 564.4 DL 62.4 564.4
57.4 564.4 DL F0(IceConnectionNumber)72.833 584.4 Q F1
(returns the \214le descriptor of this ICE connection.)3.333 E 50.4
604.5 50.4 614.5 DL 50.4 602.5 50.4 612.5 DL 55.4 603 50.4 603 DL 57.4
603 52.4 603 DL 62.4 603 57.4 603 DL(char *IceConnectionString)72 615.6
Q(\().833 E F2(ice_conn).833 E F1(\)).833 E(IceConn)82 627.6 Q F2
(ice_conn)2.5 E F1(;).833 E 50.4 623.7 50.4 633.7 DL 50.4 621.7 50.4
631.7 DL 55.4 635.2 50.4 635.2 DL 57.4 635.2 52.4 635.2 DL 62.4 635.2
57.4 635.2 DL F0(IceConnectionString)72.833 655.2 Q F1 .194
(returns the netw)3.527 F .194
(ork ID of the client that accepted this connection.)-.1 F .193
(The string should)5.194 F(be freed with a call to)72 667.2 Q F0(fr)
3.333 E(ee)-.18 E F1(when no longer needed.)3.333 E 50.4 687.3 50.4
697.3 DL 50.4 685.3 50.4 695.3 DL 55.4 685.8 50.4 685.8 DL 57.4 685.8
52.4 685.8 DL 62.4 685.8 57.4 685.8 DL
(unsigned long IceLastSentSequenceNumber)72 698.4 Q(\().833 E F2
(ice_conn).833 E F1(\)).833 E(IceConn)82 710.4 Q F2(ice_conn)2.5 E F1(;)
.833 E 2.5<ad32>274.86 768 S 2.5<30ad>-2.5 G 0 Cg EP
%%Page: 21 23
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E .4 LW 50.4 76.5 50.4 86.5 DL 50.4 74.5 50.4
84.5 DL 55.4 88 50.4 88 DL 57.4 88 52.4 88 DL 62.4 88 57.4 88 DL
(IceLastSentSequenceNumber)72.833 108 Q/F1 10/Times-Roman@0 SF .608(ret\
urns the sequence number of the last message sent on this ICE connec-)
3.941 F(tion.)72 120 Q 50.4 140.1 50.4 150.1 DL 50.4 138.1 50.4 148.1 DL
55.4 138.6 50.4 138.6 DL 57.4 138.6 52.4 138.6 DL 62.4 138.6 57.4 138.6
DL(unsigned long IceLastRecei)72 151.2 Q -.15(ve)-.25 G -1.667
(dSequenceNumber \().15 F/F2 10/Times-Italic@0 SF(ice_conn).833 E F1(\))
.833 E(IceConn)82 163.2 Q F2(ice_conn)2.5 E F1(;).833 E 50.4 159.3 50.4
169.3 DL 50.4 157.3 50.4 167.3 DL 55.4 170.8 50.4 170.8 DL 57.4 170.8
52.4 170.8 DL 62.4 170.8 57.4 170.8 DL F0(IceLastRecei)72.833 190.8 Q
-.1(ve)-.1 G(dSequenceNumber).1 E F1 .455
(returns the sequence number of the last message recei)3.789 F -.15(ve)
-.25 G 2.955(do).15 G 2.955(nt)-2.955 G .455(his ICE)-2.955 F
(connection.)72 202.8 Q 50.4 222.9 50.4 232.9 DL 50.4 220.9 50.4 230.9
DL 55.4 221.4 50.4 221.4 DL 57.4 221.4 52.4 221.4 DL 62.4 221.4 57.4
221.4 DL(Bool IceSw)72 234 Q -1.667(apping \()-.1 F F2(ice_conn).833 E
F1(\)).833 E(IceConn)82 246 Q F2(ice_conn)2.5 E F1(;).833 E 50.4 242.1
50.4 252.1 DL 50.4 240.1 50.4 250.1 DL 55.4 253.6 50.4 253.6 DL 57.4
253.6 52.4 253.6 DL 62.4 253.6 57.4 253.6 DL F0(IceSwapping)72.833 273.6
Q F1(returns)3.333 E F0 -.74(Tr)3.333 G(ue).74 E F1(if byte sw)3.333 E
(apping is necessary when reading messages on the ICE connection.)-.1 E
50.4 293.7 50.4 303.7 DL 50.4 291.7 50.4 301.7 DL 55.4 292.2 50.4 292.2
DL 57.4 292.2 52.4 292.2 DL 62.4 292.2 57.4 292.2 DL
(IcePointer IceGetConte)72 304.8 Q -1.667(xt \()-.15 F F2(ice_conn).833
E F1(\)).833 E(IceConn)82 316.8 Q F2(ice_conn)2.5 E F1(;).833 E 50.4
312.9 50.4 322.9 DL 50.4 310.9 50.4 320.9 DL 55.4 324.4 50.4 324.4 DL
57.4 324.4 52.4 324.4 DL 62.4 324.4 57.4 324.4 DL F0(IceGetContext)
72.833 344.4 Q F1(returns the conte)3.333 E
(xt associated with a connection created by)-.15 E F0(IceOpenConnection)
3.333 E F1(.).833 E F0 2.5(12. ICE)72 368.4 R(Messages)2.5 E F1 .454
(All ICE messages ha)72 384 R .754 -.15(ve a s)-.2 H .454
(tandard 8-byte header).15 F 5.454(.T)-.55 G .454
(he ICElib macros that read and write messages rely on)-5.454 F
(the follo)72 396 Q(wing naming con)-.25 E -.15(ve)-.4 G
(ntion for message headers:).15 E .72(CARD8 major_opcode;)108 417.6 R
.72(CARD8 minor_opcode;)108 429.6 R .72(CARD8 data[2];)108 441.6 R
(CARD32length B32;)108 453.6 Q .086
(The 3rd and 4th bytes of the message header can be used as needed.)72
475.2 R .085(The length \214eld is speci\214ed in units of)5.086 F 2.5
(8b)72 487.2 S(ytes.)-2.5 E F0 2.5(12.1. Sending)72 511.2 R
(ICE Messages)2.5 E F1 .298(The ICE library maintains an output b)72
526.8 R(uf)-.2 E .298(fer used for generating messages.)-.25 F .298
(Protocol libraries layered on top)5.298 F
(of ICE may choose to batch messages together and \215ush the output b)
72 538.8 Q(uf)-.2 E(fer at appropriate times.)-.25 E .11(If an IO error\
 has occurred on an ICE connection, all write operations will be ignore\
d.)72 554.4 R -.15(Fo)5.11 G 2.61(rf).15 G .11(urther informa-)-2.61 F
(tion, see section 13, `)72 566.4 Q(`Error Handling.)-.74 E -.74('')-.7
G 1.6 -.8(To g)72 594 T(et the size of the ICE output b).8 E(uf)-.2 E
(fer)-.25 E 2.5(,u)-.4 G(se)-2.5 E F0(IceGetOutBufSize)3.333 E F1(.).833
E 50.4 610.5 50.4 620.5 DL 50.4 608.5 50.4 618.5 DL 55.4 609 50.4 609 DL
57.4 609 52.4 609 DL 62.4 609 57.4 609 DL(int IceGetOutBufSize)72 621.6
Q(\().833 E F2(ice_conn).833 E F1(\)).833 E(IceConn)84.5 633.6 Q F2
(ice_conn)2.5 E F1(;).833 E F2(ice_conn)72 652.8 Q F1 2.5(Av)35.9 G
(alid ICE connection object.)-2.75 E 50.4 648.9 50.4 658.9 DL 50.4 646.9
50.4 656.9 DL 55.4 660.4 50.4 660.4 DL 57.4 660.4 52.4 660.4 DL 62.4
660.4 57.4 660.4 DL 1.6 -.8(To \215)72 684 T(ush the ICE output b).8 E
(uf)-.2 E(fer)-.25 E 2.5(,u)-.4 G(se)-2.5 E F0(IceFlush)3.333 E F1(.)
.833 E 50.4 700.5 50.4 710.5 DL 50.4 698.5 50.4 708.5 DL 55.4 699 50.4
699 DL 57.4 699 52.4 699 DL 62.4 699 57.4 699 DL 2.5<ad32>274.86 768 S
2.5<31ad>-2.5 G 0 Cg EP
%%Page: 22 24
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E/F1 10/Times-Roman@0 SF -1.667(IceFlush \()72
84 R/F2 10/Times-Italic@0 SF(ice_conn).833 E F1(\)).833 E(IceConn)84.5
96 Q F2(ice_conn)2.5 E F1(;).833 E F2(ice_conn)72 115.2 Q F1 2.5(Av)35.9
G(alid ICE connection object.)-2.75 E .4 LW 50.4 111.3 50.4 121.3 DL
50.4 109.3 50.4 119.3 DL 55.4 122.8 50.4 122.8 DL 57.4 122.8 52.4 122.8
DL 62.4 122.8 57.4 122.8 DL(Note that the output b)72 142.8 Q(uf)-.2 E
(fer may be implicitly \215ushed if there is insuf)-.25 E
(\214cient space to generate a message.)-.25 E(The follo)72 158.4 Q
(wing macros can be used to generate ICE messages:)-.25 E 50.4 178.5
50.4 188.5 DL 50.4 176.5 50.4 186.5 DL 55.4 177 50.4 177 DL 57.4 177
52.4 177 DL 62.4 177 57.4 177 DL -1.667(IceGetHeader \()72 189.6 R F2
(ice_conn).833 E F1(,)A F2(major_opcode)2.5 E F1(,).833 E F2
(minor_opcode)2.5 E F1(,).833 E F2(header_size)2.5 E F1(,).833 E F2
(<C_data_type>)2.5 E F1(,).833 E F2(pmsg)2.5 E F1(\)).833 E(IceConn)84.5
201.6 Q F2(ice_conn)2.5 E F1(;).833 E(int)84.5 213.6 Q F2(major_opcode)
2.5 E F1(;).833 E(int)84.5 225.6 Q F2(minor_opcode)2.5 E F1(;).833 E
(int)84.5 237.6 Q F2(header_size)2.5 E F1(;).833 E(<C_data_type> *)84.5
249.6 Q F2(pmsg)A F1(;).833 E F2(ice_conn)72 268.8 Q F1 2.5(Av)35.9 G
(alid ICE connection object.)-2.75 E F2(major_opcode)72 284.4 Q F1
(The major opcode of the message.)14.23 E F2(minor_opcode)72 300 Q F1
(The minor opcode of the message.)14.23 E F2(header_size)72 315.6 Q F1
(The size of the message header \(in bytes\).)24.23 E F2(<C_data_type>)
72 331.2 Q F1(The actual C data type of the message header)7.39 E(.)-.55
E F2(pmsg)72 346.8 Q F1 .746(The message header pointer)50.89 F 5.746
(.A)-.55 G .746
(fter this macro is called, the library can store data in the)-5.746 F
(message header)144 358.8 Q(.)-.55 E 50.4 354.9 50.4 364.9 DL 50.4 352.9
50.4 362.9 DL 55.4 366.4 50.4 366.4 DL 57.4 366.4 52.4 366.4 DL 62.4
366.4 57.4 366.4 DL F0(IceGetHeader)72.833 386.4 Q F1 1.504
(is used to set up a message header on an ICE connection.)4.838 F 1.504
(It sets the major and minor)6.504 F .397
(opcodes of the message, and initializes the message')72 398.4 R 2.898
(sl)-.55 G .398(ength to the length of the header)-2.898 F 5.398(.I)-.55
G 2.898(fa)-5.398 G .398(dditional v)-2.898 F(ari-)-.25 E
(able length data follo)72 410.4 Q(ws, the message')-.25 E 2.5(sl)-.55 G
(ength \214eld should be updated.)-2.5 E 50.4 442.5 50.4 452.5 DL 50.4
440.5 50.4 450.5 DL 55.4 441 50.4 441 DL 57.4 441 52.4 441 DL 62.4 441
57.4 441 DL -1.667(IceGetHeaderExtra \()72 453.6 R F2(ice_conn).833 E F1
(,)A F2(major_opcode)2.5 E F1(,).833 E F2(minor_opcode)2.5 E F1(,).833 E
F2(header_size)2.5 E F1(,).833 E F2 -.2(ex)2.5 G(tr).2 E(a)-.15 E F1(,)
.833 E F2(<C_data_type>)2.5 E F1(,).833 E F2(pmsg)2.5 E F1(,).833 E F2
(pdata)2.5 E F1(\)).833 E(IceConn)84.5 465.6 Q F2(ice_conn)2.5 E F1(;)
.833 E(int)84.5 477.6 Q F2(major_opcode)2.5 E F1(;).833 E(int)84.5 489.6
Q F2(minor_opcode)2.5 E F1(;).833 E(int)84.5 501.6 Q F2(header_size)2.5
E F1(;).833 E(int)84.5 513.6 Q F2 -.2(ex)2.5 G(tr).2 E(a)-.15 E F1(;)
.833 E(<C_data_type> *)84.5 525.6 Q F2(pmsg)A F1(;).833 E(char *)84.5
537.6 Q F2(pdata)A F1(;).833 E F2(ice_conn)72 556.8 Q F1 2.5(Av)35.9 G
(alid ICE connection object.)-2.75 E F2(major_opcode)72 572.4 Q F1
(The major opcode of the message.)14.23 E F2(minor_opcode)72 588 Q F1
(The minor opcode of the message.)14.23 E F2(header_size)72 603.6 Q F1
(The size of the message header \(in bytes\).)24.23 E F2 -.2(ex)72 619.2
S(tr).2 E(a)-.15 E F1(The size of the e)51.8 E(xtra data be)-.15 E
(yond the header \(in 8-byte units\).)-.15 E F2(<C_data_type>)72 634.8 Q
F1(The actual C data type of the message header)7.39 E(.)-.55 E F2(pmsg)
72 650.4 Q F1 .746(The message header pointer)50.89 F 5.746(.A)-.55 G
.746(fter this macro is called, the library can store data in the)-5.746
F(message header)144 662.4 Q(.)-.55 E F2(pdata)72 678 Q F1 1.854
(Returns a pointer to the ICE output b)49.22 F(uf)-.2 E 1.854
(fer that points immediately after the message)-.25 F(header)144 690 Q
5.418(.T)-.55 G .418(he v)-5.418 F .418
(ariable length data should be stored here.)-.25 F .417(If there w)5.417
F .417(as not enough room in)-.1 F(the ICE output b)144 702 Q(uf)-.2 E
(fer)-.25 E 2.5(,p)-.4 G(data is set to NULL.)-2.5 E 50.4 698.1 50.4
708.1 DL 50.4 696.1 50.4 706.1 DL 55.4 709.6 50.4 709.6 DL 57.4 709.6
52.4 709.6 DL 62.4 709.6 57.4 709.6 DL F0(IceGetHeaderExtra)72.833 729.6
Q F1 .729(is used to generate a message with a \214x)4.062 F .73
(ed \(and relati)-.15 F -.15(ve)-.25 G .73(ly small\) amount of v).15 F
(ariable)-.25 E 2.5<ad32>274.86 768 S 2.5<32ad>-2.5 G 0 Cg EP
%%Page: 23 25
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E/F1 10/Times-Roman@0 SF(length data.)72 84 Q
(The complete message must \214t in the ICE output b)5 E(uf)-.2 E(fer)
-.25 E(.)-.55 E .4 LW 50.4 116.1 50.4 126.1 DL 50.4 114.1 50.4 124.1 DL
55.4 114.6 50.4 114.6 DL 57.4 114.6 52.4 114.6 DL 62.4 114.6 57.4 114.6
DL -1.667(IceSimpleMessage \()72 127.2 R/F2 10/Times-Italic@0 SF
(ice_conn).833 E F1(,)A F2(major_opcode)2.5 E F1(,).833 E F2
(minor_opcode)2.5 E F1(\)).833 E(IceConn)84.5 139.2 Q F2(ice_conn)2.5 E
F1(;).833 E(int)84.5 151.2 Q F2(major_opcode)2.5 E F1(;).833 E(int)84.5
163.2 Q F2(minor_opcode)2.5 E F1(;).833 E F2(ice_conn)72 182.4 Q F1 2.5
(Av)35.9 G(alid ICE connection object.)-2.75 E F2(major_opcode)72 198 Q
F1(The major opcode of the message.)14.23 E F2(minor_opcode)72 213.6 Q
F1(The minor opcode of the message.)14.23 E 50.4 209.7 50.4 219.7 DL
50.4 207.7 50.4 217.7 DL 55.4 221.2 50.4 221.2 DL 57.4 221.2 52.4 221.2
DL 62.4 221.2 57.4 221.2 DL F0(IceSimpleMessage)72.833 241.2 Q F1 .678(\
is used to generate a message that is identical in size to the ICE head\
er message, and)4.011 F(has no additional data.)72 253.2 Q 50.4 285.3
50.4 295.3 DL 50.4 283.3 50.4 293.3 DL 55.4 283.8 50.4 283.8 DL 57.4
283.8 52.4 283.8 DL 62.4 283.8 57.4 283.8 DL -1.667(IceErrorHeader \()72
296.4 R F2(ice_conn).833 E F1(,)A F2(of)2.5 E(fending_major_opcode)-.18
E F1(,).833 E F2(of)2.5 E(fending_minor_opcode)-.18 E F1(,).833 E F2(of)
2.5 E(fending_sequence_num)-.18 E F1(,).833 E F2(se)122 308.4 Q(verity)
-.15 E F1(,).833 E F2(err)2.5 E(or_class)-.45 E F1(,).833 E F2
(data_length)2.5 E F1(\)).833 E(IceConn)84.5 320.4 Q F2(ice_conn)2.5 E
F1(;).833 E(int)84.5 332.4 Q F2(of)2.5 E(fending_major_opcode)-.18 E F1
(;).833 E(int)84.5 344.4 Q F2(of)2.5 E(fending_minor_opcode)-.18 E F1(;)
.833 E(int)84.5 356.4 Q F2(of)2.5 E(fending_sequence_num)-.18 E F1(;)
.833 E(int)84.5 368.4 Q F2(se)2.5 E(verity)-.15 E F1(;).833 E(int)84.5
380.4 Q F2(err)2.5 E(or_class)-.45 E F1(;).833 E(int)84.5 392.4 Q F2
(data_length)2.5 E F1(;).833 E F2(ice_conn)72 411.6 Q F1 2.5(Av)35.9 G
(alid ICE connection object.)-2.75 E F2(of)72 427.2 Q
(fending_major_opcode)-.18 E F1
(The major opcode of the protocol in which an error w)144 439.2 Q
(as detected.)-.1 E F2(of)72 454.8 Q(fending_minor_opcode)-.18 E F1
(The minor opcode of the protocol in which an error w)144 466.8 Q
(as detected.)-.1 E F2(of)72 482.4 Q(fending_sequence_num)-.18 E F1
(The sequence number of the message that caused the error)144 494.4 Q(.)
-.55 E F2(se)72 510 Q(verity)-.15 E F0(IceCanContinue)41.883 E F1(,).833
E F0(IceF)3.333 E(atalT)-.25 E(oPr)-.92 E(otocol)-.18 E F1 2.5(,o).833 G
(r)-2.5 E F0(IceF)3.333 E(atalT)-.25 E(oConnection)-.92 E F1(.).833 E F2
(err)72 525.6 Q(or_class)-.45 E F1(The error class.)26.34 E F2
(data_length)72 541.2 Q F1
(Length of data \(in 8-byte units\) to be written after the header)24.22
E(.)-.55 E 50.4 537.3 50.4 547.3 DL 50.4 535.3 50.4 545.3 DL 55.4 548.8
50.4 548.8 DL 57.4 548.8 52.4 548.8 DL 62.4 548.8 57.4 548.8 DL F0
(IceErr)72.833 568.8 Q(orHeader)-.18 E F1
(sets up an error message header)3.333 E(.)-.55 E .126(Note that the tw)
72 584.4 R 2.626(oc)-.1 G .126(lients connected by ICE may be using dif)
-2.626 F .126(ferent major opcodes for a gi)-.25 F -.15(ve)-.25 G 2.627
(np).15 G 2.627(rotocol. The)-2.627 F(of)72 596.4 Q .179(fending_major_\
opcode passed to this macro is the major opcode of the protocol for the\
 client sending the)-.25 F(error message.)72 608.4 Q 1.418
(Generic errors, which are common to all protocols, ha)72 624 R 1.718
-.15(ve c)-.2 H 1.418(lasses in the range 0x8000..0xFFFF).15 F 6.418(.S)
-.8 G 1.418(ee the)-6.418 F F2(Inter)72 636 Q(-Client Exc)-.2 E(hang)
-.15 E 2.5(eP)-.1 G -.45(ro)-2.5 G(tocol).45 E F1
(standard for more details.)3.333 E F0(IceBadMinor)72.833 654 Q F1
(0x8000)159 654 Q F0(IceBadState)72.833 670 Q F1(0x8001)159 670 Q F0
(IceBadLength)72.833 686 Q F1(0x8002)159 686 Q F0(IceBadV)72.833 702 Q
(alue)-.92 E F1(0x8003)159 702 Q 2.5<ad32>274.86 768 S 2.5<33ad>-2.5 G 0
Cg EP
%%Page: 24 26
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E/F1 10/Times-Roman@0 SF(Per)72 84 Q
(-protocol errors ha)-.2 E .3 -.15(ve c)-.2 H
(lasses in the range 0x0000-0x7f).15 E -.25(ff)-.25 G(.).25 E 3.102 -.8
(To w)72 111.6 T 1.502(rite data to an ICE connection, use the).8 F F0
(IceWriteData)4.835 E F1 4.002(macro. If)4.835 F 1.502
(the data \214ts into the ICE output)4.002 F -.2(bu)72 123.6 S -.25(ff)
.2 G(er).25 E 2.5(,i)-.4 G 2.5(ti)-2.5 G 2.5(sc)-2.5 G(opied there.)-2.5
E(Otherwise, the ICE output b)5 E(uf)-.2 E
(fer is \215ushed and the data is directly sent.)-.25 E
(This macro is used in conjunction with)72 139.2 Q F0(IceGetHeader)3.333
E F1(and)3.333 E F0(IceErr)3.333 E(orHeader)-.18 E F1(.).833 E .4 LW
50.4 171.3 50.4 181.3 DL 50.4 169.3 50.4 179.3 DL 55.4 169.8 50.4 169.8
DL 57.4 169.8 52.4 169.8 DL 62.4 169.8 57.4 169.8 DL -1.667
(IceWriteData \()72 182.4 R/F2 10/Times-Italic@0 SF(ice_conn).833 E F1
(,)A F2(bytes)2.5 E F1(,).833 E F2(data)2.5 E F1(\)).833 E(IceConn)84.5
194.4 Q F2(ice_conn)2.5 E F1(;).833 E(int)84.5 206.4 Q F2(bytes)2.5 E F1
(;).833 E(char *)84.5 218.4 Q F2(data)A F1(;).833 E F2(ice_conn)72 237.6
Q F1 2.5(Av)35.9 G(alid ICE connection object.)-2.75 E F2(bytes)72 253.2
Q F1(The number of bytes to write.)51.45 E F2(data)72 268.8 Q F1
(The data to write.)54.22 E 50.4 264.9 50.4 274.9 DL 50.4 262.9 50.4
272.9 DL 55.4 276.4 50.4 276.4 DL 57.4 276.4 52.4 276.4 DL 62.4 276.4
57.4 276.4 DL 1.6 -.8(To w)72 308.4 T
(rite data as 16-bit quantities, use).8 E F0(IceWriteData16)3.333 E F1
(.).833 E 50.4 324.9 50.4 334.9 DL 50.4 322.9 50.4 332.9 DL 55.4 323.4
50.4 323.4 DL 57.4 323.4 52.4 323.4 DL 62.4 323.4 57.4 323.4 DL -1.667
(IceWriteData16 \()72 336 R F2(ice_conn).833 E F1(,)A F2(bytes)2.5 E F1
(,).833 E F2(data)2.5 E F1(\)).833 E(IceConn)84.5 348 Q F2(ice_conn)2.5
E F1(;).833 E(int)84.5 360 Q F2(bytes)2.5 E F1(;).833 E(short *)84.5 372
Q F2(data)A F1(;).833 E F2(ice_conn)72 391.2 Q F1 2.5(Av)35.9 G
(alid ICE connection object.)-2.75 E F2(bytes)72 406.8 Q F1
(The number of bytes to write.)51.45 E F2(data)72 422.4 Q F1
(The data to write.)54.22 E 50.4 418.5 50.4 428.5 DL 50.4 416.5 50.4
426.5 DL 55.4 430 50.4 430 DL 57.4 430 52.4 430 DL 62.4 430 57.4 430 DL
1.6 -.8(To w)72 462 T(rite data as 32-bit quantities, use).8 E F0
(IceWriteData32)3.333 E F1(.).833 E 50.4 478.5 50.4 488.5 DL 50.4 476.5
50.4 486.5 DL 55.4 477 50.4 477 DL 57.4 477 52.4 477 DL 62.4 477 57.4
477 DL -1.667(IceWriteData32 \()72 489.6 R F2(ice_conn).833 E F1(,)A F2
(bytes)2.5 E F1(,).833 E F2(data)2.5 E F1(\)).833 E(IceConn)84.5 501.6 Q
F2(ice_conn)2.5 E F1(;).833 E(int)84.5 513.6 Q F2(bytes)2.5 E F1(;).833
E(long *)84.5 525.6 Q F2(data)A F1(;).833 E F2(ice_conn)72 544.8 Q F1
2.5(Av)35.9 G(alid ICE connection object.)-2.75 E F2(bytes)72 560.4 Q F1
(The number of bytes to write.)51.45 E F2(data)72 576 Q F1
(The data to write.)54.22 E 50.4 572.1 50.4 582.1 DL 50.4 570.1 50.4
580.1 DL 55.4 583.6 50.4 583.6 DL 57.4 583.6 52.4 583.6 DL 62.4 583.6
57.4 583.6 DL 2.207 -.8(To b)72 615.6 T .607(ypass cop).8 F .607
(ying data to the ICE output b)-.1 F(uf)-.2 E(fer)-.25 E 3.107(,u)-.4 G
(se)-3.107 E F0(IceSendData)3.94 E F1 .608(to directly send data o)3.94
F -.15(ve)-.15 G 3.108(rt).15 G .608(he netw)-3.108 F(ork)-.1 E 2.5
(connection. If)72 627.6 R(necessary)2.5 E 2.5(,t)-.65 G
(he ICE output b)-2.5 E(uf)-.2 E(fer is \214rst \215ushed.)-.25 E 50.4
644.1 50.4 654.1 DL 50.4 642.1 50.4 652.1 DL 55.4 642.6 50.4 642.6 DL
57.4 642.6 52.4 642.6 DL 62.4 642.6 57.4 642.6 DL -1.667(IceSendData \()
72 655.2 R F2(ice_conn).833 E F1(,)A F2(bytes)2.5 E F1(,).833 E F2(\(c)
2.5 E(har *\) data)-.15 E F1(\)).833 E(IceConn)84.5 667.2 Q F2(ice_conn)
2.5 E F1(;).833 E(int)84.5 679.2 Q F2(bytes)2.5 E F1(;).833 E(char *)
84.5 691.2 Q F2(data)A F1(;).833 E F2(ice_conn)72 710.4 Q F1 2.5(Av)35.9
G(alid ICE connection object.)-2.75 E 2.5<ad32>274.86 768 S 2.5<34ad>
-2.5 G 0 Cg EP
%%Page: 25 27
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E/F1 10/Times-Italic@0 SF(bytes)72 84 Q/F2 10
/Times-Roman@0 SF(The number of bytes to send.)51.45 E F1(data)72 99.6 Q
F2(The data to send.)54.22 E .4 LW 50.4 95.7 50.4 105.7 DL 50.4 93.7
50.4 103.7 DL 55.4 107.2 50.4 107.2 DL 57.4 107.2 52.4 107.2 DL 62.4
107.2 57.4 107.2 DL 1.6 -.8(To f)72 139.2 T
(orce 32-bit or 64-bit alignment, use).8 E F0(IceWriteP)3.333 E(ad)-.1 E
F2 5(.A).833 G(maximum of 7 pad bytes can be speci\214ed.)-2.5 E 50.4
155.7 50.4 165.7 DL 50.4 153.7 50.4 163.7 DL 55.4 154.2 50.4 154.2 DL
57.4 154.2 52.4 154.2 DL 62.4 154.2 57.4 154.2 DL(IceWriteP)72 166.8 Q
-1.667(ad \()-.15 F F1(ice_conn).833 E F2(,)A F1(bytes)2.5 E F2(\)).833
E(IceConn)84.5 178.8 Q F1(ice_conn)2.5 E F2(;).833 E(int)84.5 190.8 Q F1
(bytes)2.5 E F2(;).833 E F1(ice_conn)72 210 Q F2 2.5(Av)35.9 G
(alid ICE connection object.)-2.75 E F1(bytes)72 225.6 Q F2
(The number of pad bytes.)51.45 E 50.4 221.7 50.4 231.7 DL 50.4 219.7
50.4 229.7 DL 55.4 233.2 50.4 233.2 DL 57.4 233.2 52.4 233.2 DL 62.4
233.2 57.4 233.2 DL F0 2.5(12.2. Reading)72 265.2 R(ICE Messages)2.5 E
F2 .133(The ICE library maintains an input b)72 280.8 R(uf)-.2 E .133
(fer used for reading messages.)-.25 F .133
(If the ICE library chooses to perform)5.133 F .62
(nonblocking reads \(this is implementation-dependent\), then for e)72
292.8 R -.15(ve)-.25 G .621(ry read operation that it mak).15 F .621
(es, zero or)-.1 F .601
(more complete messages may be read into the input b)72 304.8 R(uf)-.2 E
(fer)-.25 E 5.601(.A)-.55 G 3.101(sar)-5.601 G .601
(esult, for all of the macros described in)-3.101 F .255(this section t\
hat read messages, an actual read operation will occur on the connectio\
n only if the data is not)72 316.8 R(already present in the input b)72
328.8 Q(uf)-.2 E(fer)-.25 E(.)-.55 E 1.6 -.8(To g)72 356.4 T
(et the size of the ICE input b).8 E(uf)-.2 E(fer)-.25 E 2.5(,u)-.4 G
(se)-2.5 E F0(IceGetInBufSize)3.333 E F2(.).833 E 50.4 372.9 50.4 382.9
DL 50.4 370.9 50.4 380.9 DL 55.4 371.4 50.4 371.4 DL 57.4 371.4 52.4
371.4 DL 62.4 371.4 57.4 371.4 DL(int IceGetInBufSize)72 384 Q(\().833 E
F1(ice_conn).833 E F2(\)).833 E(IceConn)84.5 396 Q F1(ice_conn)2.5 E F2
(;).833 E F1(ice_conn)72 415.2 Q F2 2.5(Av)35.9 G
(alid ICE connection object.)-2.75 E 50.4 411.3 50.4 421.3 DL 50.4 409.3
50.4 419.3 DL 55.4 422.8 50.4 422.8 DL 57.4 422.8 52.4 422.8 DL 62.4
422.8 57.4 422.8 DL .66(When reading messages, care must be tak)72 446.4
R .66(en to check for IO errors.)-.1 F .66(If an)5.66 F 3.16(yI)-.15 G
3.16(Oe)-3.16 G .66(rror occurs in reading an)-3.16 F(y)-.15 E .754
(part of a message, the message should be thro)72 458.4 R .754(wn out.)
-.25 F .754(After using an)5.754 F 3.254(yo)-.15 G 3.254(ft)-3.254 G
.754(he macros described belo)-3.254 F 3.254(wf)-.25 G(or)-3.254 E .685
(reading messages, the)72 470.4 R F0(IceV)4.018 E(alidIO)-.92 E F2 .685
(macro can be used to check if an IO error occurred on the connection.)
4.018 F .183(After an IO error has occurred on an ICE connection, all r\
ead operations will be ignored.)72 482.4 R -.15(Fo)5.184 G 2.684(rf).15
G .184(urther infor)-2.684 F(-)-.2 E(mation, see section 13, `)72 494.4
Q(`Error Handling.)-.74 E -.74('')-.7 G 50.4 526.5 50.4 536.5 DL 50.4
524.5 50.4 534.5 DL 55.4 525 50.4 525 DL 57.4 525 52.4 525 DL 62.4 525
57.4 525 DL(Bool IceV)72 537.6 Q -1.667(alidIO \()-1.11 F F1(ice_conn)
.833 E F2(\)).833 E(IceConn)82 549.6 Q F1(ice_conn)2.5 E F2(;).833 E
50.4 549.3 50.4 559.3 DL 50.4 547.3 50.4 557.3 DL 55.4 560.8 50.4 560.8
DL 57.4 560.8 52.4 560.8 DL 62.4 560.8 57.4 560.8 DL(The follo)72 584.4
Q(wing macros can be used to read ICE messages.)-.25 E 50.4 600.9 50.4
610.9 DL 50.4 598.9 50.4 608.9 DL 55.4 599.4 50.4 599.4 DL 57.4 599.4
52.4 599.4 DL 62.4 599.4 57.4 599.4 DL -1.667(IceReadSimpleMessage \()72
612 R F1(ice_conn).833 E F2(,)A F1(<C_data_type>)2.5 E F2(,).833 E F1
(pmsg)2.5 E F2(\)).833 E(IceConn)84.5 624 Q F1(ice_conn)2.5 E F2(;).833
E(<C_data_type> *)84.5 636 Q F1(pmsg)A F2(;).833 E F1(ice_conn)72 655.2
Q F2 2.5(Av)35.9 G(alid ICE connection object.)-2.75 E F1(<C_data_type>)
72 670.8 Q F2(The actual C data type of the message header)7.39 E(.)-.55
E F1(pmsg)72 686.4 Q F2(This pointer is set to the message header)50.89
E(.)-.55 E 50.4 682.5 50.4 692.5 DL 50.4 680.5 50.4 690.5 DL 55.4 694
50.4 694 DL 57.4 694 52.4 694 DL 62.4 694 57.4 694 DL F0
(IceReadSimpleMessage)72.833 714 Q F2 .879(is used for messages that ar\
e identical in size to the 8-byte ICE header)4.212 F 3.379(,b)-.4 G .879
(ut use)-3.579 F .749
(the spare 2 bytes in the header to encode additional data.)72 726 R
.749(Note that the ICE library al)5.749 F -.1(wa)-.1 G .749
(ys reads in these).1 F 2.5<ad32>274.86 768 S 2.5<35ad>-2.5 G 0 Cg EP
%%Page: 26 28
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E/F1 10/Times-Roman@0 SF .562
(\214rst 8 bytes, so it can obtain the major opcode of the message.)72
84 R F0(IceReadSimpleMessage)6.395 E F1 .562(simply returns a)3.895 F
(pointer to these 8 bytes; it does not actually read an)72 96 Q 2.5(yd)
-.15 G(ata into the input b)-2.5 E(uf)-.2 E(fer)-.25 E(.)-.55 E -.15(Fo)
72 111.6 S 2.898(ram).15 G .398(essage with v)-2.898 F .398
(ariable length data, there are tw)-.25 F 2.898(ow)-.1 G .398
(ays of reading the message.)-2.998 F .399(One method in)5.399 F -.2(vo)
-.4 G(lv).2 E(es)-.15 E .236
(reading the complete message in one pass using)72 123.6 R F0
(IceReadCompleteMessage)3.568 E F1 5.235(.T).833 G .235
(he second method in)-5.235 F -.2(vo)-.4 G(lv).2 E(es)-.15 E .156
(reading the message header \(note that this may be lar)72 135.6 R .157
(ger than the 8-byte ICE header\), then reading the v)-.18 F(ari-)-.25 E
(able length data in chunks \(see)72 147.6 Q F0(IceReadMessageHeader)
3.333 E F1(and)3.333 E F0(IceReadData)3.333 E F1(\).).833 E .4 LW 50.4
179.7 50.4 189.7 DL 50.4 177.7 50.4 187.7 DL 55.4 178.2 50.4 178.2 DL
57.4 178.2 52.4 178.2 DL 62.4 178.2 57.4 178.2 DL -1.667
(IceReadCompleteMessage \()72 190.8 R/F2 10/Times-Italic@0 SF(ice_conn)
.833 E F1(,)A F2(header_size)2.5 E F1(,).833 E F2(<C_data_type>)2.5 E F1
(,).833 E F2(pmsg)2.5 E F1(,).833 E F2(pdata)2.5 E F1(\)).833 E(IceConn)
84.5 202.8 Q F2(ice_conn)2.5 E F1(;).833 E(int)84.5 214.8 Q F2
(header_size)2.5 E F1(;).833 E(<C_data_type> *)84.5 226.8 Q F2(pmsg)A F1
(;).833 E(char *)84.5 238.8 Q F2(pdata)A F1(;).833 E F2(ice_conn)72 258
Q F1 2.5(Av)35.9 G(alid ICE connection object.)-2.75 E F2(header_size)72
273.6 Q F1(The size of the message header \(in bytes\).)24.23 E F2
(<C_data_type>)72 289.2 Q F1
(The actual C data type of the message header)7.39 E(.)-.55 E F2(pmsg)72
304.8 Q F1(This pointer is set to the message header)50.89 E(.)-.55 E F2
(pdata)72 320.4 Q F1(This pointer is set to the v)49.22 E
(ariable length data of the message.)-.25 E 50.4 316.5 50.4 326.5 DL
50.4 314.5 50.4 324.5 DL 55.4 328 50.4 328 DL 57.4 328 52.4 328 DL 62.4
328 57.4 328 DL 1.198(If the ICE input b)72 348 R(uf)-.2 E 1.198
(fer has suf)-.25 F 1.198(\214cient space,)-.25 F F0
(IceReadCompleteMessage)4.531 E F1 1.198(will read the complete message)
4.531 F .626(into the ICE input b)72 360 R(uf)-.2 E(fer)-.25 E 5.626(.O)
-.55 G .626(therwise, a b)-5.626 F(uf)-.2 E .627
(fer will be allocated to hold the v)-.25 F .627(ariable length data.)
-.25 F .627(After the)5.627 F .169(call, the pdata ar)72 372 R .168
(gument should be check)-.18 F .168(ed ag)-.1 F .168(ainst NULL to mak)
-.05 F 2.668(es)-.1 G .168(ure that there w)-2.668 F .168(as suf)-.1 F
.168(\214cient memory to)-.25 F(allocate the b)72 384 Q(uf)-.2 E(fer)
-.25 E(.)-.55 E 3.156(After calling)72 411.6 R F0
(IceReadCompleteMessage)6.49 E F1 3.157(and processing the message,)6.49
F F0(IceDisposeCompleteMessage)6.49 E F1(should be called.)72 423.6 Q
50.4 443.7 50.4 453.7 DL 50.4 441.7 50.4 451.7 DL 55.4 442.2 50.4 442.2
DL 57.4 442.2 52.4 442.2 DL 62.4 442.2 57.4 442.2 DL -1.667
(IceDisposeCompleteMessage \()72 454.8 R F2(ice_conn).833 E F1(,)A F2
(pdata)2.5 E F1(\)).833 E(IceConn)84.5 466.8 Q F2(ice_conn)2.5 E F1(;)
.833 E(char *)84.5 478.8 Q F2(pdata)A F1(;).833 E F2(ice_conn)72 498 Q
F1 2.5(Av)35.9 G(alid ICE connection object.)-2.75 E F2(pdata)72 513.6 Q
F1(The pointer to the v)49.22 E(ariable length data returned in)-.25 E
F0(IceReadCompleteMessage)3.333 E F1(.).833 E 50.4 509.7 50.4 519.7 DL
50.4 507.7 50.4 517.7 DL 55.4 521.2 50.4 521.2 DL 57.4 521.2 52.4 521.2
DL 62.4 521.2 57.4 521.2 DL .084(If a b)72 541.2 R(uf)-.2 E .084
(fer had to be allocated to hold the v)-.25 F .083
(ariable length data \(because it did not \214t in the ICE input b)-.25
F(uf)-.2 E(fer\),)-.25 E(it is freed here by ICElib)72 553.2 Q(.)-.4 E
50.4 585.3 50.4 595.3 DL 50.4 583.3 50.4 593.3 DL 55.4 583.8 50.4 583.8
DL 57.4 583.8 52.4 583.8 DL 62.4 583.8 57.4 583.8 DL -1.667
(IceReadMessageHeader \()72 596.4 R F2(ice_conn).833 E F1(,)A F2
(header_size)2.5 E F1(,).833 E F2(<C_data_type>)2.5 E F1(,).833 E F2
(pmsg)2.5 E F1(\)).833 E(IceConn)84.5 608.4 Q F2(ice_conn)2.5 E F1(;)
.833 E(int)84.5 620.4 Q F2(header_size)2.5 E F1(;).833 E
(<C_data_type> *)84.5 632.4 Q F2(pmsg)A F1(;).833 E F2(ice_conn)72 651.6
Q F1 2.5(Av)35.9 G(alid ICE connection object.)-2.75 E F2(header_size)72
667.2 Q F1(The size of the message header \(in bytes\).)24.23 E F2
(<C_data_type>)72 682.8 Q F1
(The actual C data type of the message header)7.39 E(.)-.55 E F2(pmsg)72
698.4 Q F1(This pointer is set to the message header)50.89 E(.)-.55 E
50.4 694.5 50.4 704.5 DL 50.4 692.5 50.4 702.5 DL 55.4 706 50.4 706 DL
57.4 706 52.4 706 DL 62.4 706 57.4 706 DL F0(IceReadMessageHeader)72.833
726 Q F1 1.787(reads just the message header)5.12 F 6.787(.T)-.55 G
1.788(he rest of the data should be read with the)-6.787 F 2.5<ad32>
274.86 768 S 2.5<36ad>-2.5 G 0 Cg EP
%%Page: 27 29
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E(IceReadData)72.833 84 Q/F1 10/Times-Roman@0
SF -.1(fa)4.958 G 1.625(mily of macros.).1 F 1.625
(This method of reading a message should be used when the v)6.625 F
(ariable)-.25 E(length data must be read in chunks.)72 96 Q 1.6 -.8
(To r)72 123.6 T(ead data directly into a user supplied b).8 E(uf)-.2 E
(fer)-.25 E 2.5(,u)-.4 G(se)-2.5 E F0(IceReadData)3.333 E F1(.).833 E .4
LW 50.4 140.1 50.4 150.1 DL 50.4 138.1 50.4 148.1 DL 55.4 138.6 50.4
138.6 DL 57.4 138.6 52.4 138.6 DL 62.4 138.6 57.4 138.6 DL -1.667
(IceReadData \()72 151.2 R/F2 10/Times-Italic@0 SF(ice_conn).833 E F1(,)
A F2(bytes)2.5 E F1(,).833 E F2(pdata)2.5 E F1(\)).833 E(IceConn)84.5
163.2 Q F2(ice_conn)2.5 E F1(;).833 E(int)84.5 175.2 Q F2(bytes)2.5 E F1
(;).833 E(char *)84.5 187.2 Q F2(pdata)A F1(;).833 E F2(ice_conn)72
206.4 Q F1 2.5(Av)35.9 G(alid ICE connection object.)-2.75 E F2(bytes)72
222 Q F1(The number of bytes to read.)51.45 E F2(pdata)72 237.6 Q F1
(The data is read into this user supplied b)49.22 E(uf)-.2 E(fer)-.25 E
(.)-.55 E 50.4 233.7 50.4 243.7 DL 50.4 231.7 50.4 241.7 DL 55.4 245.2
50.4 245.2 DL 57.4 245.2 52.4 245.2 DL 62.4 245.2 57.4 245.2 DL 1.6 -.8
(To r)72 277.2 T(ead data as 16-bit quantities, use).8 E F0
(IceReadData16)3.333 E F1(.).833 E 50.4 293.7 50.4 303.7 DL 50.4 291.7
50.4 301.7 DL 55.4 292.2 50.4 292.2 DL 57.4 292.2 52.4 292.2 DL 62.4
292.2 57.4 292.2 DL -1.667(IceReadData16 \()72 304.8 R F2(ice_conn).833
E F1(,)A F2(swap)2.5 E F1(,).833 E F2(bytes)2.5 E F1(,).833 E F2(pdata)
2.5 E F1(\)).833 E(IceConn)84.5 316.8 Q F2(ice_conn)2.5 E F1(;).833 E
(Bool)84.5 328.8 Q F2(swap)2.5 E F1(;).833 E(int)84.5 340.8 Q F2(bytes)
2.5 E F1(;).833 E(short *)84.5 352.8 Q F2(pdata)A F1(;).833 E F2
(ice_conn)72 372 Q F1 2.5(Av)35.9 G(alid ICE connection object.)-2.75 E
F2(swap)72 387.6 Q F1(If)51.44 E F0 -.74(Tr)3.333 G(ue,).74 E F1(the v)
3.333 E(alues will be byte sw)-.25 E(apped.)-.1 E F2(bytes)72 403.2 Q F1
(The number of bytes to read.)51.45 E F2(pdata)72 418.8 Q F1
(The data is read into this user supplied b)49.22 E(uf)-.2 E(fer)-.25 E
(.)-.55 E 50.4 414.9 50.4 424.9 DL 50.4 412.9 50.4 422.9 DL 55.4 426.4
50.4 426.4 DL 57.4 426.4 52.4 426.4 DL 62.4 426.4 57.4 426.4 DL 1.6 -.8
(To r)72 458.4 T(ead data as 32-bit quantities, use).8 E F0
(IceReadData32)3.333 E F1(.).833 E 50.4 474.9 50.4 484.9 DL 50.4 472.9
50.4 482.9 DL 55.4 473.4 50.4 473.4 DL 57.4 473.4 52.4 473.4 DL 62.4
473.4 57.4 473.4 DL -1.667(IceReadData32 \()72 486 R F2(ice_conn).833 E
F1(,)A F2(swap)2.5 E F1(,).833 E F2(bytes)2.5 E F1(,).833 E F2(pdata)2.5
E F1(\)).833 E(IceConn)84.5 498 Q F2(ice_conn)2.5 E F1(;).833 E(Bool)
84.5 510 Q F2(swap)2.5 E F1(;).833 E(int)84.5 522 Q F2(bytes)2.5 E F1(;)
.833 E(long *)84.5 534 Q F2(pdata)A F1(;).833 E F2(ice_conn)72 553.2 Q
F1 2.5(Av)35.9 G(alid ICE connection object.)-2.75 E F2(swap)72 568.8 Q
F1(If)51.44 E F0 -.74(Tr)3.333 G(ue,).74 E F1(the v)3.333 E
(alues will be byte sw)-.25 E(apped.)-.1 E F2(bytes)72 584.4 Q F1
(The number of bytes to read.)51.45 E F2(pdata)72 600 Q F1
(The data is read into this user supplied b)49.22 E(uf)-.2 E(fer)-.25 E
(.)-.55 E 50.4 596.1 50.4 606.1 DL 50.4 594.1 50.4 604.1 DL 55.4 607.6
50.4 607.6 DL 57.4 607.6 52.4 607.6 DL 62.4 607.6 57.4 607.6 DL 1.6 -.8
(To f)72 639.6 T(orce 32-bit or 64-bit alignment, use).8 E F0(IceReadP)
3.333 E(ad)-.1 E F1 5(.A).833 G
(maximum of 7 pad bytes can be speci\214ed.)-2.5 E 50.4 656.1 50.4 666.1
DL 50.4 654.1 50.4 664.1 DL 55.4 654.6 50.4 654.6 DL 57.4 654.6 52.4
654.6 DL 62.4 654.6 57.4 654.6 DL(IceReadP)72 667.2 Q -1.667(ad \()-.15
F F2(ice_conn).833 E F1(,)A F2(bytes)2.5 E F1(\)).833 E(IceConn)84.5
679.2 Q F2(ice_conn)2.5 E F1(;).833 E(int)84.5 691.2 Q F2(bytes)2.5 E F1
(;).833 E F2(ice_conn)72 710.4 Q F1 2.5(Av)35.9 G
(alid ICE connection object.)-2.75 E 2.5<ad32>274.86 768 S 2.5<37ad>-2.5
G 0 Cg EP
%%Page: 28 30
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E/F1 10/Times-Italic@0 SF(bytes)72 84 Q/F2 10
/Times-Roman@0 SF(The number of pad bytes.)51.45 E .4 LW 50.4 80.1 50.4
90.1 DL 50.4 78.1 50.4 88.1 DL 55.4 91.6 50.4 91.6 DL 57.4 91.6 52.4
91.6 DL 62.4 91.6 57.4 91.6 DL F0 2.5(13. Err)72 123.6 R(or Handling)
-.18 E F2(There are tw)72 139.2 Q 2.5(od)-.1 G(ef)-2.5 E
(ault error handlers in ICElib:)-.1 E 21.5<834f>72 154.8 S .028
(ne to handle typically f)-21.5 F .028(atal conditions \(for e)-.1 F
.029(xample, a connection dying because a machine crashed\))-.15 F 21.5
<834f>72 170.4 S(ne to handle ICE-speci\214c protocol errors)-21.5 E
.959(These error handlers can be changed to user)72 186 R .959
(-supplied routines if you prefer your o)-.2 F .958
(wn error handling and)-.25 F(can be changed as often as you lik)72 198
Q(e.)-.1 E 1.6 -.8(To s)72 225.6 T(et the ICE error handler).8 E 2.5(,u)
-.4 G(se)-2.5 E F0(IceSetErr)3.333 E(orHandler)-.18 E F2(.).833 E 50.4
242.1 50.4 252.1 DL 50.4 240.1 50.4 250.1 DL 55.4 240.6 50.4 240.6 DL
57.4 240.6 52.4 240.6 DL 62.4 240.6 57.4 240.6 DL
(IceErrorHandler IceSetErrorHandler)72 253.2 Q(\().833 E F1(handler).833
E F2(\)).833 E(IceErrorHandler)82 265.2 Q F1(handler)2.5 E F2(;).833 E
F1(handler)72 284.4 Q F2(The ICE error handler)40.89 E 5(.Y)-.55 G
(ou should pass NULL to restore the def)-6.1 E(ault handler)-.1 E(.)-.55
E 50.4 280.5 50.4 290.5 DL 50.4 278.5 50.4 288.5 DL 55.4 292 50.4 292 DL
57.4 292 52.4 292 DL 62.4 292 57.4 292 DL F0(IceSetErr)72.833 312 Q
(orHandler)-.18 E F2(returns the pre)3.333 E(vious error handler)-.25 E
(.)-.55 E .341(The ICE error handler is in)72 327.6 R -.2(vo)-.4 G -.1
(ke).2 G 2.841(dw).1 G .341(hen an une)-2.841 F .341
(xpected ICE protocol error \(major opcode 0\) is encountered.)-.15 F
.851(The action of the def)72 339.6 R .851
(ault handler is to print an e)-.1 F .851(xplanatory message to)-.15 F
F0(stderr)4.184 E F2 .85(and if the se)4.184 F -.15(ve)-.25 G .85
(rity is f).15 F(atal,)-.1 E(call)72 351.6 Q F0(exit)3.959 E F2 .626
(with a nonzero v)3.959 F 3.127(alue. If)-.25 F -.15(ex)3.127 G .627
(iting is undesirable, the application should re).15 F .627
(gister its o)-.15 F .627(wn error han-)-.25 F(dler)72 363.6 Q(.)-.55 E
1.035(Note that errors in other protocol domains should be handled by t\
heir respecti)72 379.2 R 1.335 -.15(ve l)-.25 H 1.035
(ibraries \(these libraries).15 F(should ha)72 391.2 Q .3 -.15(ve t)-.2
H(heir o).15 E(wn error handlers\).)-.25 E
(An ICE error handler has the type of)72 406.8 Q F0(IceErr)3.333 E
(orHandler)-.18 E F2(.).833 E 50.4 423.3 50.4 433.3 DL 50.4 421.3 50.4
431.3 DL 55.4 421.8 50.4 421.8 DL 57.4 421.8 52.4 421.8 DL 62.4 421.8
57.4 421.8 DL(typedef v)72 434.4 Q(oid \(*IceErrorHandler\)\(\);)-.2 E
-.2(vo)72 458.4 S(id ErrorHandler).2 E(\().833 E F1(ice_conn).833 E F2
(,)A F1(swap)2.5 E F2(,).833 E F1(of)2.5 E(fending_minor_opcode)-.18 E
F2(,).833 E F1(of)2.5 E(fending_sequence_num)-.18 E F2(,).833 E F1(err)
2.5 E(or_class)-.45 E F2(,).833 E F1(se)124.5 470.4 Q(verity)-.15 E F2
(,).833 E F1(values)2.5 E F2(\)).833 E(IceConn)82 482.4 Q F1(ice_conn)
2.5 E F2(;).833 E(Bool)82 494.4 Q F1(swap)2.5 E F2(;).833 E(int)82 506.4
Q F1(of)2.5 E(fending_minor_opcode)-.18 E F2(;).833 E(unsigned long)82
518.4 Q F1(of)2.5 E(fending_sequence_num)-.18 E F2(;).833 E(int)82 530.4
Q F1(err)2.5 E(or_class)-.45 E F2(;).833 E(int)82 542.4 Q F1(se)2.5 E
(verity)-.15 E F2(;).833 E(IcePointer)82 554.4 Q F1(values)2.5 E F2(;)
.833 E F1(ice_conn)72 573.6 Q F2(The ICE connection object.)35.9 E F1
(swap)72 589.2 Q F2 2.5<418d>51.44 G(ag that indicates if the v)-2.5 E
(alues need byte sw)-.25 E(apping.)-.1 E F1(of)72 604.8 Q
(fending_minor_opcode)-.18 E F2(The ICE minor opcode of the of)144 616.8
Q(fending message.)-.25 E F1(of)72 632.4 Q(fending_sequence_num)-.18 E
F2(The sequence number of the of)144 644.4 Q(fending message.)-.25 E F1
(err)72 660 Q(or_class)-.45 E F2(The error class of the of)26.34 E
(fending message.)-.25 E F1(se)72 675.6 Q(verity)-.15 E F0
(IceCanContinue)41.883 E F2(,).833 E F0(IceF)3.333 E(atalT)-.25 E(oPr)
-.92 E(otocol)-.18 E F2 2.5(,o).833 G(r)-2.5 E F0(IceF)3.333 E(atalT)
-.25 E(oConnection)-.92 E F2(.).833 E F1(values)72 691.2 Q F2(An)46.45 E
2.5(ya)-.15 G(dditional error v)-2.5 E
(alues speci\214c to the minor opcode and class.)-.25 E 50.4 687.3 50.4
697.3 DL 50.4 685.3 50.4 695.3 DL 55.4 698.8 50.4 698.8 DL 57.4 698.8
52.4 698.8 DL 62.4 698.8 57.4 698.8 DL(The follo)72 718.8 Q
(wing error classes are de\214ned at the ICE le)-.25 E -.15(ve)-.25 G
(l:).15 E 2.5<ad32>274.86 768 S 2.5<38ad>-2.5 G 0 Cg EP
%%Page: 29 31
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E(IceBadMinor)72.833 84 Q(IceBadState)72.833 96
Q(IceBadLength)72.833 108 Q(IceBadV)72.833 120 Q(alue)-.92 E
(IceBadMajor)72.833 132 Q(IceNoA)72.833 144 Q(uth)-.5 E(IceNoV)72.833
156 Q(ersion)-1 E(IceSetupF)72.833 168 Q(ailed)-.25 E(IceA)72.833 180 Q
(uthRejected)-.5 E(IceA)72.833 192 Q(uthF)-.5 E(ailed)-.25 E(IcePr)
72.833 204 Q(otocolDuplicate)-.18 E(IceMajorOpcodeDuplicate)72.833 216 Q
(IceUnkno)72.833 228 Q(wnPr)-.1 E(otocol)-.18 E/F1 10/Times-Roman@0 SF
-.15(Fo)72 249.6 S 2.5(rf).15 G(urther information, see the)-2.5 E/F2 10
/Times-Italic@0 SF(Inter)2.5 E(-Client Exc)-.2 E(hang)-.15 E 2.5(eP)-.1
G -.45(ro)-2.5 G(tocol).45 E F1(standard.)3.333 E 1.6 -.8(To h)72 277.2
T(andle f).8 E(atal I/O errors, use)-.1 E F0(IceSetIOErr)3.333 E
(orHandler)-.18 E F1(.).833 E .4 LW 50.4 297.3 50.4 307.3 DL 50.4 295.3
50.4 305.3 DL 55.4 295.8 50.4 295.8 DL 57.4 295.8 52.4 295.8 DL 62.4
295.8 57.4 295.8 DL(IceIOErrorHandler IceSetIOErrorHandler)72 308.4 Q
(\().833 E F2(handler).833 E F1(\)).833 E(IceIOErrorHandler)82 320.4 Q
F2(handler)2.5 E F1(;).833 E F2(handler)72 339.6 Q F1
(The I/O error handler)40.89 E 5(.Y)-.55 G
(ou should pass NULL to restore the def)-6.1 E(ault handler)-.1 E(.)-.55
E 50.4 335.7 50.4 345.7 DL 50.4 333.7 50.4 343.7 DL 55.4 347.2 50.4
347.2 DL 57.4 347.2 52.4 347.2 DL 62.4 347.2 57.4 347.2 DL F0
(IceSetIOErr)72.833 367.2 Q(orHandler)-.18 E F1(returns the pre)3.333 E
(vious IO error handler)-.25 E(.)-.55 E
(An ICE I/O error handler has the type of)72 382.8 Q F0(IceIOErr)3.333 E
(orHandler)-.18 E F1(.).833 E 50.4 402.9 50.4 412.9 DL 50.4 400.9 50.4
410.9 DL 55.4 401.4 50.4 401.4 DL 57.4 401.4 52.4 401.4 DL 62.4 401.4
57.4 401.4 DL(typedef v)72 414 Q(oid \(*IceIOErrorHandler\)\(\);)-.2 E
-.2(vo)72 438 S(id IOErrorHandler).2 E(\().833 E F2(ice_conn).833 E F1
(\)).833 E(IceConn)82 450 Q F2(ice_conn)2.5 E F1(;).833 E F2(ice_conn)72
469.2 Q F1(The ICE connection object.)35.9 E 50.4 465.3 50.4 475.3 DL
50.4 463.3 50.4 473.3 DL 55.4 476.8 50.4 476.8 DL 57.4 476.8 52.4 476.8
DL 62.4 476.8 57.4 476.8 DL(There are tw)72 496.8 Q 2.5(ow)-.1 G
(ays of handling IO errors in ICElib:)-2.6 E 21.5<8349>72 512.4 S 4.166
(nt)-21.5 G 1.666(he \214rst, the IO error handler does whate)-4.166 F
-.15(ve)-.25 G 4.167(ri).15 G 4.167(sn)-4.167 G 1.667
(ecessary to respond to the IO error and then)-4.167 F .887(returns, b)
97 524.4 R .887(ut it does not call)-.2 F F0(IceCloseConnection)4.22 E
F1 5.887(.T).833 G .887(he ICE connection is gi)-5.887 F -.15(ve)-.25 G
3.387(na`).15 G .887(`bad IO')-4.127 F 3.386('s)-.74 G(tatus,)-3.386 E
.402(and all future reads and writes to the connection are ignored.)97
536.4 R .403(The ne)5.402 F .403(xt time)-.15 F F0(IcePr)3.736 E
(ocessMessages)-.18 E F1(is)3.736 E 1.041
(called it will return a status of)97 548.4 R F0(IcePr)4.373 E
(ocessMessagesIOErr)-.18 E(or)-.18 E F1 6.04(.A).833 G 3.54(tt)-6.04 G
1.04(hat time, the application should)-3.54 F(call)97 560.4 Q F0
(IceCloseConnection)3.333 E F1(.).833 E 21.5<8349>72 576 S 2.594(nt)
-21.5 G .095(he second, the IO error handler does call)-2.594 F F0
(IceCloseConnection)3.428 E F1 2.595(,a).833 G .095(nd then uses the)
-2.595 F F0(longjmp)3.428 E F1 .095(call to)3.428 F .021
(get back to the application')97 588 R 2.521(sm)-.55 G .021(ain e)-2.521
F -.15(ve)-.25 G .021(nt loop.).15 F(The)5.021 E F0(setjmp)3.353 E F1
(and)3.353 E F0(longjmp)3.353 E F1 .02(calls may not w)3.353 F .02
(ork properly)-.1 F 1.782
(on all platforms, and special care must be tak)97 600 R 1.783(en to a)
-.1 F -.2(vo)-.2 G 1.783(id memory leaks.).2 F 1.783
(Therefore, this second)6.783 F(model is less desirable.)97 612 Q .482
(Before the application I/O error handler is in)72 627.6 R -.2(vo)-.4 G
-.1(ke).2 G .481
(d, protocol libraries that were interested in being noti\214ed).1 F
.361(of I/O errors will ha)72 639.6 R .661 -.15(ve t)-.2 H(heir).15 E F0
(IceIOErr)3.694 E(orPr)-.18 E(oc)-.18 E F1 .361(handlers in)3.694 F -.2
(vo)-.4 G -.1(ke).2 G 2.861(d. This).1 F .362
(handler is set up in the protocol re)2.861 F(g-)-.15 E 1.274
(istration functions \(see)72 651.6 R F0(IceRegisterF)4.607 E(orPr)-.25
E(otocolSetup)-.18 E F1(and)4.607 E F0(IceRegisterF)4.606 E(orPr)-.25 E
(otocolReply)-.18 E F1 3.773(\)a).833 G 1.273(nd could be)-3.773 F
(used to clean up state speci\214c to the protocol.)72 663.6 Q 2.5<ad32>
274.86 768 S 2.5<39ad>-2.5 G 0 Cg EP
%%Page: 30 32
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E .4 LW 50.4 76.5 50.4 86.5 DL 50.4 74.5 50.4
84.5 DL 55.4 75 50.4 75 DL 57.4 75 52.4 75 DL 62.4 75 57.4 75 DL/F1 10
/Times-Roman@0 SF(typedef v)72 84 Q(oid \(*IceIOErrorProc\)\(\);)-.2 E
-.2(vo)72 103.2 S(id IOErrorProc).2 E(\().833 E/F2 10/Times-Italic@0 SF
(ice_conn).833 E F1(\)).833 E(IceConn)82 115.2 Q F2(ice_conn)2.5 E F1(;)
.833 E F2(ice_conn)72 134.4 Q F1(The ICE connection object.)35.9 E 50.4
130.5 50.4 140.5 DL 50.4 128.5 50.4 138.5 DL 55.4 142 50.4 142 DL 57.4
142 52.4 142 DL 62.4 142 57.4 142 DL .312(Note that e)72 162 R -.15(ve)
-.25 G(ry).15 E F0(IceIOErr)3.645 E(orPr)-.18 E(oc)-.18 E F1 .312
(callback must return.)3.645 F .313(This is required because each acti)
5.312 F .613 -.15(ve p)-.25 H .313(rotocol must).15 F
(be noti\214ed of the brok)72 174 Q
(en connection, and the application IO error handler must be in)-.1 E
-.2(vo)-.4 G -.1(ke).2 G 2.5(da).1 G(fterw)-2.5 E(ards.)-.1 E F0 2.5
(14. Multi-Thr)72 198 R(eading Support)-.18 E F1 1.6 -.8(To d)72 213.6 T
(eclare that multiple threads in an application will be using the ICE l\
ibrary).8 E 2.5(,u)-.65 G(se)-2.5 E F0(IceInitThr)3.333 E(eads)-.18 E F1
(.).833 E 50.4 233.7 50.4 243.7 DL 50.4 231.7 50.4 241.7 DL 55.4 232.2
50.4 232.2 DL 57.4 232.2 52.4 232.2 DL 62.4 232.2 57.4 232.2 DL
(Status IceInitThreads)72 244.8 Q(\(\)).833 E 50.4 244.5 50.4 254.5 DL
50.4 242.5 50.4 252.5 DL 55.4 256 50.4 256 DL 57.4 256 52.4 256 DL 62.4
256 57.4 256 DL(The)72 276 Q F0(IceInitThr)4.761 E(eads)-.18 E F1 1.427
(function must be the \214rst ICElib function a multi-threaded program \
calls.)4.761 F 1.427(It must)6.427 F .908(complete before an)72 288 R
3.408(yo)-.15 G .908(ther ICElib call is made.)-3.408 F F0(IceInitThr)
6.741 E(eads)-.18 E F1 .909(returns a nonzero status if and only if it)
4.241 F -.1(wa)72 300 S 3.4(sa).1 G .9
(ble to initialize the threads package successfully)-3.4 F 5.9(.I)-.65 G
3.4(ti)-5.9 G 3.4(ss)-3.4 G .899(afe to call)-3.4 F F0(IceInitThr)4.232
E(eads)-.18 E F1 .899(more than once,)4.232 F
(although the threads package will only be initialized once.)72 312 Q
.025(Protocol libraries layered on top of ICElib will ha)72 327.6 R .325
-.15(ve t)-.2 H 2.525(ol).15 G .026
(ock critical sections of code that access an ICE con-)-2.525 F .371
(nection \(for e)72 339.6 R .371(xample, when generating messages\).)
-.15 F -1 -.8(Tw o)5.371 H .371
(calls, which are generally implemented as macros,)3.671 F(are pro)72
351.6 Q(vided:)-.15 E 50.4 368.1 50.4 378.1 DL 50.4 366.1 50.4 376.1 DL
55.4 366.6 50.4 366.6 DL 57.4 366.6 52.4 366.6 DL 62.4 366.6 57.4 366.6
DL -1.667(IceLockConn \()72 379.2 R F2(ice_conn).833 E F1(\)).833 E
(IceConn)82 391.2 Q F2(ice_conn)2.5 E F1(;).833 E -1.667
(IceUnlockConn \()72 415.2 R F2(ice_conn).833 E F1(\)).833 E(IceConn)82
427.2 Q F2(ice_conn)2.5 E F1(;).833 E F2(ice_conn)72 446.4 Q F1
(The ICE connection.)35.9 E 50.4 442.5 50.4 452.5 DL 50.4 440.5 50.4
450.5 DL 55.4 454 50.4 454 DL 57.4 454 52.4 454 DL 62.4 454 57.4 454 DL
3.167 -.8(To k)72 486 T 1.567(eep an ICE connection lock).7 F 1.567
(ed across se)-.1 F -.15(ve)-.25 G 1.567
(ral ICElib calls, applications use).15 F F0(IceA)4.901 E(ppLockConn)
-.25 E F1(and)4.901 E F0(IceA)72.833 498 Q(ppUnlockConn)-.25 E F1(.).833
E 50.4 514.5 50.4 524.5 DL 50.4 512.5 50.4 522.5 DL 55.4 513 50.4 513 DL
57.4 513 52.4 513 DL 62.4 513 57.4 513 DL -.2(vo)72 525.6 S
(id IceAppLockConn).2 E(\().833 E F2(ice_conn).833 E F1(\)).833 E
(IceConn)82 537.6 Q F2(ice_conn)2.5 E F1(;).833 E F2(ice_conn)72 556.8 Q
F1(The ICE connection to lock.)35.9 E 50.4 552.9 50.4 562.9 DL 50.4
550.9 50.4 560.9 DL 55.4 564.4 50.4 564.4 DL 57.4 564.4 52.4 564.4 DL
62.4 564.4 57.4 564.4 DL(The)72 584.4 Q F0(IceA)3.659 E(ppLockConn)-.25
E F1 .326
(function completely locks out other threads using the connection until)
3.659 F F0(IceA)3.658 E(ppUn-)-.25 E(lockConn)72 596.4 Q F1 .414
(is called.)3.746 F .414(Other threads attempting to use ICElib calls o\
n the connection will block.)5.414 F .414(If the pro-)5.414 F
(gram has not pre)72 608.4 Q(viously called)-.25 E F0(IceInitThr)3.333 E
(eads)-.18 E F1(,).833 E F0(IceA)3.333 E(ppLockConn)-.25 E F1(has no ef)
3.333 E(fect.)-.25 E 50.4 628.5 50.4 638.5 DL 50.4 626.5 50.4 636.5 DL
55.4 627 50.4 627 DL 57.4 627 52.4 627 DL 62.4 627 57.4 627 DL -.2(vo)72
639.6 S(id IceAppUnlockConn).2 E(\().833 E F2(ice_conn).833 E F1(\)).833
E(IceConn)82 651.6 Q F2(ice_conn)2.5 E F1(;).833 E F2(ice_conn)72 670.8
Q F1(The ICE connection to unlock.)35.9 E 50.4 666.9 50.4 676.9 DL 50.4
664.9 50.4 674.9 DL 55.4 678.4 50.4 678.4 DL 57.4 678.4 52.4 678.4 DL
62.4 678.4 57.4 678.4 DL(The)72 698.4 Q F0(IceA)4.746 E(ppUnlockConn)
-.25 E F1 1.413(function allo)4.746 F 1.413
(ws other threads to complete ICElib calls on the connection that)-.25 F
.494(were block)72 710.4 R .494(ed by a pre)-.1 F .494(vious call to)
-.25 F F0(IceA)3.827 E(ppLockConn)-.25 E F1 .494(from this thread.)3.827
F .494(If the program has not pre)5.494 F(viously)-.25 E(called)72 722.4
Q F0(IceInitThr)3.333 E(eads)-.18 E F1(,).833 E F0(IceA)3.333 E
(ppUnlockConn)-.25 E F1(has no ef)3.333 E(fect.)-.25 E 2.5<ad33>274.86
768 S 2.5<30ad>-2.5 G 0 Cg EP
%%Page: 31 33
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E 2.5(15. Miscellaneous)72 84 R(Functions)2.5 E
/F1 10/Times-Roman@0 SF 3.907 -.8(To a)72 99.6 T 2.307
(llocate scratch space \(for e).8 F 2.307
(xample, when generating messages with v)-.15 F 2.306
(ariable data\), use)-.25 F F0(IceAlloc-)5.639 E(Scratch)72 111.6 Q F1
6.171(.E).833 G 1.172
(ach ICE connection has one scratch space associated with it.)-6.171 F
1.172(The scratch space starts of)6.172 F 3.672(fa)-.25 G(s)-3.672 E .55
(empty and gro)72 123.6 R .55(ws as needed.)-.25 F .549
(The contents of the scratch space is not guaranteed to be preserv)5.55
F .549(ed after an)-.15 F(y)-.15 E(ICElib function is called.)72 135.6 Q
.4 LW 50.4 155.7 50.4 165.7 DL 50.4 153.7 50.4 163.7 DL 55.4 154.2 50.4
154.2 DL 57.4 154.2 52.4 154.2 DL 62.4 154.2 57.4 154.2 DL
(char *IceAllocScratch)72 166.8 Q(\().833 E/F2 10/Times-Italic@0 SF
(ice_conn).833 E F1(,)A F2(size)2.5 E F1(\)).833 E(IceConn)82 178.8 Q F2
(ice_conn)2.5 E F1(;).833 E(unsigned long)82 190.8 Q F2(size)2.5 E F1(;)
.833 E F2(ice_conn)72 210 Q F1 2.5(Av)35.9 G
(alid ICE connection object.)-2.75 E F2(size)72 225.6 Q F1
(The number of bytes required.)57 E 50.4 221.7 50.4 231.7 DL 50.4 219.7
50.4 229.7 DL 55.4 233.2 50.4 233.2 DL 57.4 233.2 52.4 233.2 DL 62.4
233.2 57.4 233.2 DL .269(Note that the memory returned by)72 253.2 R F0
(IceAllocScratch)3.602 E F1 .269(should not be freed by the caller)3.602
F 5.269(.T)-.55 G .269(he ICE library will)-5.269 F
(free the memory when the ICE connection is closed.)72 265.2 Q F0 2.5
(16. Ackno)72 289.2 R(wledgements)-.1 E F1 .89(Thanks to Bob Schei\215e\
r for his thoughtful input on the design of the ICE library)72 304.8 R
5.889(.T)-.65 G .889(hanks also to Jordan)-5.889 F(Bro)72 316.8 Q .467
(wn, Larry Cable, Donna Con)-.25 F -.15(ve)-.4 G .468(rse, Cli).15 F
.768 -.15(ve F)-.25 H(eather).15 E 2.968(,S)-.4 G .468(tephen Gildea, V)
-2.968 F .468(ania Jolobof)-1.11 F .468(f, Kaleb K)-.25 F(eithle)-.25 E
1.768 -.65(y, S)-.15 H(tu-).65 E
(art Marks, Hiro Miyamoto, Ralph Swick, Jim V)72 328.8 Q(anGilder)-1.11
E 2.5(,a)-.4 G(nd Mik)-2.5 E 2.5(eW)-.1 G -.15(ex)-3.3 G(ler).15 E(.)
-.55 E 2.5<ad33>274.86 768 S 2.5<31ad>-2.5 G 0 Cg EP
%%Page: 32 34
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E/F1 12/Times-Bold@0 SF -.3(Ap)257.31 84 S
(pendix A).3 E/F2 11/Times-Bold@0 SF -.55(Au)212.188 108 S
(thentication Utility Functions).55 E/F3 10/Times-Roman@0 SF .545(As di\
scussed in this document, the means by which authentication data is obt\
ained by the ICE library \(for)72 135.6 R F0(ConnectionSetup)72.833
147.6 Q F3(messages or)3.333 E F0(Pr)3.333 E(otocolSetup)-.18 E F3
(messages\) is implementation-dependent.\207)3.333 E .228(This appendix\
 describes some utility functions that manipulate an ICE authority \214\
le.)72 163.2 R .228(The authority \214le can)5.228 F
(be used to pass authentication data between clients.)72 175.2 Q
(The basic operations on the .ICEauthority \214le are:)72 190.8 Q 21.5
<8347>72 206.4 S(et \214le name)-21.5 E 21.5<834c>72 222 S(ock)-21.5 E
21.5<8355>72 237.6 S(nlock)-21.5 E 21.5<8352>72 253.2 S(ead entry)-21.5
E 21.5<8357>72 268.8 S(rite entry)-21.5 E 21.5<8353>72 284.4 S
(earch for entry)-21.5 E .582(These are f)72 300 R .582(airly lo)-.1 F
(w-le)-.25 E -.15(ve)-.25 G 3.082(lo).15 G .582(perations, and it is e)
-3.082 F .582(xpected that a program, lik)-.15 F 3.082(e")-.1 G .581
(iceauth", w)-3.082 F .581(ould e)-.1 F .581(xist to add,)-.15 F(remo)72
312 Q -.15(ve)-.15 G 2.5(,a).15 G(nd display entries in the \214le.)-2.5
E(In order to use these utility functions, the <)72 327.6 Q F0
(X11/ICE/ICEutil.h).833 E F3 2.5(>h).833 G
(eader \214le must be included.)-2.5 E
(An entry in the .ICEauthority \214le is de\214ned by the follo)72 343.2
Q(wing data structure:)-.25 E .4 LW 50.4 363.3 50.4 373.3 DL 50.4 361.3
50.4 371.3 DL 55.4 361.8 50.4 361.8 DL 57.4 361.8 52.4 361.8 DL 62.4
361.8 57.4 361.8 DL(typedef struct {)72 376.8 Q(char *protocol_name;)108
388.8 Q(unsigned short protocol_data_length;)108 400.8 Q
(char *protocol_data;)108 412.8 Q(char *netw)108 424.8 Q(ork_id;)-.1 E
(char *auth_name;)108 436.8 Q(unsigned short auth_data_length;)108 448.8
Q(char *auth_data;)108 460.8 Q 2.5(}I)72 472.8 S(ceAuthFileEntry;)-2.5 E
50.4 474.9 50.4 484.9 DL 50.4 472.9 50.4 482.9 DL 55.4 486.4 50.4 486.4
DL 57.4 486.4 52.4 486.4 DL 62.4 486.4 57.4 486.4 DL .658
(The protocol_name member is either `)72 506.4 R(`ICE')-.74 E 3.158('f)
-.74 G .659(or connection setup authentication or the subprotocol name,)
-3.158 F 1.346(such as `)72 518.4 R(`XSMP')-.74 E 3.846('. F)-.74 F
1.346(or each entry)-.15 F 3.846(,p)-.65 G 1.346
(rotocol speci\214c data can be speci\214ed in the protocol_data member)
-3.846 F(.)-.55 E
(This can be used to search for old entries that need to be remo)72
530.4 Q -.15(ve)-.15 G 2.5(df).15 G(rom the \214le.)-2.5 E .317
(The netw)72 546 R .317(ork_id member is the netw)-.1 F .317
(ork ID of the client accepting authentication \(for e)-.1 F .318
(xample, the netw)-.15 F(ork)-.1 E(ID of a session manager\).)72 558 Q
2.5(An)5 G(etw)-2.5 E(ork ID has the follo)-.1 E(wing form:)-.25 E 67.17
(tcp/<hostname>:<portnumber> or)105 576 R 62.73
(decnet/<hostname>::<objname> or)105 588 R(local/<hostname>:<path>)105
600 Q 1.305
(The auth_name member is the name of the authentication method.)72 621.6
R 1.304(The auth_data member is the actual)6.305 F(authentication data,\
 and the auth_data_length member is the number of bytes in the data.)72
633.6 Q 1.6 -.8(To o)72 661.2 T(btain the def).8 E
(ault authorization \214le name, use)-.1 E F0(IceA)3.333 E(uthFileName)
-.5 E F3(.).833 E 50.4 677.7 50.4 687.7 DL 50.4 675.7 50.4 685.7 DL 55.4
676.2 50.4 676.2 DL 57.4 676.2 52.4 676.2 DL 62.4 676.2 57.4 676.2 DL
(char *IceAuthFileName)72 688.8 Q(\(\)).833 E .32 LW 144 710 72 710 DL
/F4 8/Times-Roman@0 SF 2<8754>82 720 S(he X Consortium')-2 E 2(sI)-.44 G
(CElib implementation assumes the presence of an ICE authority \214le.)
-2 E F3 2.5<ad33>274.86 768 S 2.5<32ad>-2.5 G 0 Cg EP
%%Page: 33 35
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E .4 LW 50.4 76.5 50.4 86.5 DL 50.4 74.5 50.4
84.5 DL 55.4 88 50.4 88 DL 57.4 88 52.4 88 DL 62.4 88 57.4 88 DL/F1 10
/Times-Roman@0 SF .894(If the ICEA)72 108 R .894(UTHORITY en)-.55 F .894
(vironment v)-.4 F .894(ariable if set, this v)-.25 F .894
(alue is returned.)-.25 F .895(Otherwise, the def)5.895 F .895
(ault autho-)-.1 F(rization \214le name is $HOME/.ICEauthority)72 120 Q
5(.T)-.65 G(his name is statically allocated and should not be freed.)-5
E 2.811 -.8(To s)72 135.6 T 1.21
(ynchronously update the authorization \214le, the \214le must be lock)
.8 F 1.21(ed with a call to)-.1 F F0(IceLockA)4.543 E(uthFile)-.5 E F1
(.).833 E 1.281(This function tak)72 147.6 R 1.281(es adv)-.1 F 1.281
(antage of the f)-.25 F 1.281(act that the)-.1 F F0(link)4.614 E F1
1.281(system call will f)4.614 F 1.281(ail if the name of the ne)-.1 F
3.782(wl)-.25 G(ink)-3.782 E(already e)72 159.6 Q(xists.)-.15 E 50.4
176.1 50.4 186.1 DL 50.4 174.1 50.4 184.1 DL 55.4 174.6 50.4 174.6 DL
57.4 174.6 52.4 174.6 DL 62.4 174.6 57.4 174.6 DL(int IceLockAuthFile)72
187.2 Q(\().833 E/F2 10/Times-Italic@0 SF(\214le_name).833 E F1(,)A F2
-.37(re)2.5 G(tries).37 E F1(,).833 E F2(timeout)2.5 E F1(,).833 E F2
(dead)2.5 E F1(\)).833 E(char *)82 199.2 Q F2(\214le_name)A F1(;).833 E
(int)82 211.2 Q F2 -.37(re)2.5 G(tries).37 E F1(;).833 E(int)82 223.2 Q
F2(timeout)2.5 E F1(;).833 E(long)82 235.2 Q F2(dead)2.5 E F1(;).833 E
F2(\214le_name)72 254.4 Q F1(The authorization \214le to lock.)33.12 E
F2 -.37(re)72 270 S(tries).37 E F1(The number of retries.)46.26 E F2
(timeout)72 285.6 Q F1(The number of seconds before each retry)42 E(.)
-.65 E F2(dead)72 301.2 Q F1 .017(If a lock already e)52.56 F .016
(xists that is the speci\214ed dead seconds old, it is brok)-.15 F 2.516
(en. A)-.1 F -.25(va)2.516 G .016(lue of zero).25 F
(is used to unconditionally break an old lock.)144 313.2 Q 50.4 309.3
50.4 319.3 DL 50.4 307.3 50.4 317.3 DL 55.4 320.8 50.4 320.8 DL 57.4
320.8 52.4 320.8 DL 62.4 320.8 57.4 320.8 DL(One of three v)72 340.8 Q
(alues is returned:)-.25 E<83>72 356.4 Q F0(IceA)22.333 E
(uthLockSuccess)-.5 E F1 2.5<ad74>3.333 G(he lock succeeded.)-2.5 E<83>
72 372 Q F0(IceA)22.333 E(uthLockErr)-.5 E(or)-.18 E F1 2.5(\255as)3.333
G(ystem error occurred, and)-2.5 E F0(err)3.333 E(no)-.15 E F1(may pro)
3.333 E .3 -.15(ve u)-.15 H(seful.).15 E<83>72 387.6 Q F0(IceA)22.333 E
(uthLockT)-.5 E(imeout)-.18 E F1 2.5<ad74>3.333 G
(he speci\214ed number of retries f)-2.5 E(ailed.)-.1 E 1.6 -.8(To u)72
415.2 T(nlock an authorization \214le, use).8 E F0(IceUnlockA)3.333 E
(uthFile)-.5 E F1(.).833 E 50.4 431.7 50.4 441.7 DL 50.4 429.7 50.4
439.7 DL 55.4 430.2 50.4 430.2 DL 57.4 430.2 52.4 430.2 DL 62.4 430.2
57.4 430.2 DL -.2(vo)72 442.8 S(id IceUnlockAuthFile).2 E(\().833 E F2
(\214le_name).833 E F1(\)).833 E(char *)82 454.8 Q F2(\214le_name)A F1
(;).833 E F2(\214le_name)72 474 Q F1
(The authorization \214le to unlock.)33.12 E 50.4 470.1 50.4 480.1 DL
50.4 468.1 50.4 478.1 DL 55.4 481.6 50.4 481.6 DL 57.4 481.6 52.4 481.6
DL 62.4 481.6 57.4 481.6 DL 1.6 -.8(To r)72 505.2 T(ead the ne).8 E
(xt entry in an authorization \214le, use)-.15 E F0(IceReadA)3.333 E
(uthFileEntry)-.5 E F1(.).833 E 50.4 521.7 50.4 531.7 DL 50.4 519.7 50.4
529.7 DL 55.4 520.2 50.4 520.2 DL 57.4 520.2 52.4 520.2 DL 62.4 520.2
57.4 520.2 DL(IceAuthFileEntry *IceReadAuthFileEntry)72 532.8 Q(\().833
E F2(auth_\214le).833 E F1(\)).833 E(FILE *)82 544.8 Q F2(auth_\214le)A
F1(;).833 E F2(auth_\214le)72 564 Q F1(The authorization \214le.)37 E
50.4 560.1 50.4 570.1 DL 50.4 558.1 50.4 568.1 DL 55.4 571.6 50.4 571.6
DL 57.4 571.6 52.4 571.6 DL 62.4 571.6 57.4 571.6 DL .005(Note that it \
is the responsibility of the application to open the \214le for reading\
 before calling this function.)72 591.6 R(If)5.006 E(an error is encoun\
tered, or there are no more entries to read, NULL is returned.)72 603.6
Q(Entries should be free with a call to)72 619.2 Q F0(IceFr)3.333 E(eeA)
-.18 E(uthFileEntry)-.5 E F1(.).833 E 1.6 -.8(To w)72 646.8 T
(rite an entry in an authorization \214le, use).8 E F0(IceWriteA)3.333 E
(uthFileEntry)-.5 E F1(.).833 E 50.4 663.3 50.4 673.3 DL 50.4 661.3 50.4
671.3 DL 55.4 661.8 50.4 661.8 DL 57.4 661.8 52.4 661.8 DL 62.4 661.8
57.4 661.8 DL(Status IceWriteAuthFileEntry)72 674.4 Q(\().833 E F2
(auth_\214le).833 E F1(,)A F2(entry)2.5 E F1(\)).833 E(FILE *)82 686.4 Q
F2(auth_\214le)A F1(;).833 E(IceAuthFileEntry *)82 698.4 Q F2(entry)A F1
(;).833 E F2(auth_\214le)72 717.6 Q F1(The authorization \214le.)37 E
2.5<ad33>274.86 768 S 2.5<33ad>-2.5 G 0 Cg EP
%%Page: 34 36
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E/F1 10/Times-Italic@0 SF(entry)72 84 Q/F2 10
/Times-Roman@0 SF(The entry to write.)51.45 E .4 LW 50.4 80.1 50.4 90.1
DL 50.4 78.1 50.4 88.1 DL 55.4 91.6 50.4 91.6 DL 57.4 91.6 52.4 91.6 DL
62.4 91.6 57.4 91.6 DL .714(Note that it is the responsibility of the a\
pplication to open the \214le for writing before calling this function.)
72 111.6 R(The function returns a nonzero status if the operation w)72
123.6 Q(as successful.)-.1 E 6.539 -.8(To s)72 151.2 T 4.939
(earch the def).8 F 4.939
(ault authorization \214le for an entry that matches a gi)-.1 F -.15(ve)
-.25 G 7.44(np).15 G(rotocol_name/net-)-7.44 E -.1(wo)72 163.2 S
(rk_id/auth_name tuple, use).1 E F0(IceGetA)3.333 E(uthFileEntry)-.5 E
F2(.).833 E 50.4 179.7 50.4 189.7 DL 50.4 177.7 50.4 187.7 DL 55.4 178.2
50.4 178.2 DL 57.4 178.2 52.4 178.2 DL 62.4 178.2 57.4 178.2 DL
(IceAuthFileEntry *IceGetAuthFileEntry)72 190.8 Q(\().833 E F1(pr).833 E
(otocol_name)-.45 E F2(,)A F1(network_id)2.5 E F2(,).833 E F1(auth_name)
2.5 E F2(\)).833 E(char *)82 202.8 Q F1(pr)A(otocol_name)-.45 E F2(;)
.833 E(char *)82 214.8 Q F1(network_id)A F2(;).833 E(char *)82 226.8 Q
F1(auth_name)A F2(;).833 E F1(pr)72 246 Q(otocol_name)-.45 E F2
(The name of the protocol to search on.)11.9 E F1(network_id)72 261.6 Q
F2(The netw)27 E(ork ID to search on.)-.1 E F1(auth_name)72 277.2 Q F2
(The authentication method to search on.)27.56 E 50.4 273.3 50.4 283.3
DL 50.4 271.3 50.4 281.3 DL 55.4 284.8 50.4 284.8 DL 57.4 284.8 52.4
284.8 DL 62.4 284.8 57.4 284.8 DL(If)72 304.8 Q F0(IceGetA)3.333 E
(uthFileEntry)-.5 E F2 -.1(fa)3.333 G(ils to \214nd such an entry).1 E
2.5(,N)-.65 G(ULL is returned.)-2.5 E 2.279 -.8(To f)72 332.4 T .679
(ree an entry returned by).8 F F0(IceReadA)4.011 E(uthFileEntry)-.5 E F2
(or)4.011 E F0(IceGetA)4.011 E(uthFileEntry)-.5 E F2 3.178(,u).833 G(se)
-3.178 E F0(IceFr)4.011 E(eeA)-.18 E(uthFileEn-)-.5 E(try)72 344.4 Q F2
(.).833 E 50.4 360.9 50.4 370.9 DL 50.4 358.9 50.4 368.9 DL 55.4 359.4
50.4 359.4 DL 57.4 359.4 52.4 359.4 DL 62.4 359.4 57.4 359.4 DL -.2(vo)
72 372 S(id IceFreeAuthFileEntry).2 E(\().833 E F1(entry).833 E F2(\))
.833 E(IceAuthFileEntry *)82 384 Q F1(entry)A F2(;).833 E F1(entry)72
403.2 Q F2(The entry to free.)51.45 E 50.4 399.3 50.4 409.3 DL 50.4
397.3 50.4 407.3 DL 55.4 410.8 50.4 410.8 DL 57.4 410.8 52.4 410.8 DL
62.4 410.8 57.4 410.8 DL 2.5<ad33>274.86 768 S 2.5<34ad>-2.5 G 0 Cg EP
%%Page: 35 37
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Bold@0 SF(Inter)72 48 Q(-Client Exchange Library)-.37 E
(X11, Release 6.4)231.28 E/F1 12/Times-Bold@0 SF -.3(Ap)257.64 84 S
(pendix B).3 E/F2 11/Times-Bold@0 SF(MIT)191.156 108 Q(-MA)-1.012 E
(GIC-COOKIE-1 A)-.605 E(uthentication)-.55 E/F3 10/Times-Roman@0 SF
2.068(The X Consortium')72 135.6 R 4.569(sI)-.55 G 2.069
(CElib implementation supports a simple MIT)-4.569 F(-MA)-.92 E 2.069
(GIC-COOKIE-1 authentication)-.4 F
(scheme using the authority \214le utilities described in Appendix A.)72
147.6 Q 1.497(In this model, an application, such as a session manager)
72 163.2 R 3.997(,o)-.4 G 1.496(btains a magic cookie by calling)-3.997
F F0(IceGener)4.829 E(-)-.37 E(ateMagicCookie)72 175.2 Q F3 3.218(,a)
.833 G .718(nd then stores it in the user')-3.218 F 3.219(sl)-.55 G .719
(ocal .ICEauthority \214le so that local clients can connect.)-3.219 F
.481(In order to allo)72 187.2 R 2.981(wr)-.25 G .481
(emote clients to connect, some remote e)-2.981 F -.15(xe)-.15 G .48
(cution mechanism should be used to store the).15 F
(magic cookie in the user')72 199.2 Q 2.5(s.)-.55 G
(ICEauthority \214le on a remote machine.)-2.5 E .904(In addition to st\
oring the magic cookie in the .ICEauthority \214le, the application nee\
ds to call the)72 214.8 R F0(IceSet-)4.238 E -.1(Pa)72 226.8 S -.5(Au).1
G(thData).5 E F3 1.196
(function in order to store the magic cookie in memory)4.53 F 6.196(.W)
-.65 G 1.196(hen it comes time for the MIT)-6.196 F(-)-.92 E(MA)72 238.8
Q .448(GIC-COOKIE-1 authentication procedure to accept or reject the co\
nnection, it will compare the magic)-.4 F
(cookie presented by the requestor to the magic cookie in memory)72
250.8 Q(.)-.65 E .4 LW 50.4 270.9 50.4 280.9 DL 50.4 268.9 50.4 278.9 DL
55.4 269.4 50.4 269.4 DL 57.4 269.4 52.4 269.4 DL 62.4 269.4 57.4 269.4
DL(char *IceGenerateMagicCookie)72 282 Q(\().833 E/F4 10/Times-Italic@0
SF(length).833 E F3(\)).833 E(int)82 294 Q F4(length)2.5 E F3(;).833 E
F4(length)72 313.2 Q F3(The desired length of the magic cookie.)47 E
50.4 309.3 50.4 319.3 DL 50.4 307.3 50.4 317.3 DL 55.4 320.8 50.4 320.8
DL 57.4 320.8 52.4 320.8 DL 62.4 320.8 57.4 320.8 DL .669
(The magic cookie returned will be null-terminated.)72 344.4 R .669
(If memory can not be allocated for the magic cookie,)5.669 F
(the function will return NULL.)72 356.4 Q
(Otherwise, the magic cookie should be freed with a call to)5 E F0(fr)
3.333 E(ee)-.18 E F3(.).833 E 2.256 -.8(To s)72 384 T .656
(tore the authentication data in memory).8 F 3.156(,u)-.65 G(se)-3.156 E
F0(IceSetP)3.989 E(aA)-.1 E(uthData)-.5 E F3 5.656(.C).833 G(urrently)
-5.656 E 3.156(,t)-.65 G .656(his function is only used)-3.156 F .019
(for MIT)72 396 R(-MA)-.92 E .019(GIC-COOKIE-1 authentication, b)-.4 F
.018(ut it may be used for additional authentication methods in the)-.2
F(future.)72 408 Q 50.4 424.5 50.4 434.5 DL 50.4 422.5 50.4 432.5 DL
55.4 423 50.4 423 DL 57.4 423 52.4 423 DL 62.4 423 57.4 423 DL -.2(vo)72
435.6 S(id IceSetP).2 E -1.667(aAuthData \()-.15 F F4(num_entries).833 E
F3(,)A F4(entries)2.5 E F3(\)).833 E(int)82 447.6 Q F4(num_entries)2.5 E
F3(;).833 E(IceAuthDataEntry *)82 459.6 Q F4(entries)A F3(;).833 E F4
(num_entries)72 478.8 Q F3(The number of authentication data entries.)
22.56 E F4(entries)72 494.4 Q F3
(The list of authentication data entries.)44.78 E 50.4 490.5 50.4 500.5
DL 50.4 488.5 50.4 498.5 DL 55.4 502 50.4 502 DL 57.4 502 52.4 502 DL
62.4 502 57.4 502 DL .424
(Each entry has associated with it a protocol name \(for e)72 522 R .424
(xample, `)-.15 F(`ICE')-.74 E 2.924('f)-.74 G .424
(or ICE connection setup authenti-)-2.924 F 1.807(cation, `)72 534 R
(`XSMP')-.74 E 4.307('f)-.74 G 1.807
(or session management authentication\), a netw)-4.307 F 1.807
(ork ID for the `)-.1 F(`accepting')-.74 E 4.307('c)-.74 G 1.806
(lient, an)-4.307 F 1.745(authentication name \(for e)72 546 R 1.745
(xample, MIT)-.15 F(-MA)-.92 E 1.745
(GIC-COOKIE-1\), and authentication data.)-.4 F 1.745(The ICE library)
6.745 F .457(will mer)72 558 R .456(ge these entries with pre)-.18 F
.456(viously set entries, based on the \(protocol_name, netw)-.25 F .456
(ork_id, auth_name\))-.1 F(tuple.)72 570 Q 50.4 590.1 50.4 600.1 DL 50.4
588.1 50.4 598.1 DL 55.4 588.6 50.4 588.6 DL 57.4 588.6 52.4 588.6 DL
62.4 588.6 57.4 588.6 DL(typedef struct {)72 603.6 Q
(char *protocol_name;)108 615.6 Q(char *netw)108 627.6 Q(ork_id;)-.1 E
(char *auth_name;)108 639.6 Q(unsigned short auth_data_length;)108 651.6
Q(char *auth_data;)108 663.6 Q 2.5(}I)72 675.6 S(ceAuthDataEntry;)-2.5 E
50.4 677.7 50.4 687.7 DL 50.4 675.7 50.4 685.7 DL 55.4 689.2 50.4 689.2
DL 57.4 689.2 52.4 689.2 DL 62.4 689.2 57.4 689.2 DL 2.5<ad33>274.86 768
S 2.5<35ad>-2.5 G 0 Cg EP
%%Page: 36 38
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5<ad33>274.86 768 S 2.5<36ad>-2.5 G 0 Cg EP
%%Page: 3 39
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Bold@0 SF -1.104(Ta)242.886 96 S(ble of Contents)1.104 E/F1
10/Times-Roman@0 SF(1. Ov)72 132 Q(ervie)-.15 E 2.5(wo)-.25 G 2.5(fI)
-2.5 G 11.03(CE .)-2.5 F -2.5 10(......................... 1)10 H
(2. The ICE Library - C Language Interf)72 144 Q(ace to ICE)-.1 E -2.5
10(................. 1)4.1 H(3. Intended Audience)72 156 Q -2.5 10
(.......................... 1)6.19 H(4. Header Files and Library Name)72
168 Q -2.5 10(...................... 1)5.37 H(5. Note on Pre\214x)72 180
Q .49(es .)-.15 F -2.5 10(.......................... 1)10 H
(6. Protocol Re)72 192 Q 6.87(gistration .)-.15 F -2.5 10
(........................ 1)10 H(6.1. Callbacks for Processing Messages)
72 204 Q -2.5 10(.................... 5)8.69 H
(6.2. Authentication Methods)72 216 Q -2.5 10
(........................ 7)2.56 H(7. ICE Connections)72 228 Q -2.5 10
(.......................... 9)13.39 H(7.1. Opening an ICE Connection)72
240 Q -2.5 10(...................... 9)10.9 H
(7.2. Listening for ICE Connections)72 252 Q -7.5 10
(..................... 1)13.95 H(0)-10 E
(7.3. Host Based Authentication for ICE Connections)72 264 Q -7.5 10
(................ 1)6.46 H(2)-10 E(7.4. Accepting ICE Connections)72 276
Q -7.5 10(...................... 1)12.29 H(3)-10 E
(7.5. Closing ICE Connections)72 288 Q -7.5 10
(....................... 1)9.77 H(5)-10 E(7.6. Connection W)72 300 Q
(atch Procedures)-.8 E -7.5 10(...................... 1)3.66 H(6)-10 E
(8. Protocol Setup and Shutdo)72 312 Q 10.58(wn .)-.25 F -7.5 10
(..................... 1)10 H(7)-10 E(9. Processing Messages)72 324 Q
-7.5 10(......................... 1)9.79 H(8)-10 E(10. Ping)72 336 Q
-7.5 10(.............................. 1)8.66 H(9)-10 E
(11. Using ICElib Informational Functions)72 348 Q -7.5 10
(................... 1)12 H(9)-10 E(12. ICE Messages)72 360 Q -7.5 10
(........................... 2)7.01 H(1)-10 E
(12.1. Sending ICE Messages)72 372 Q -7.5 10(....................... 2)
14.23 H(1)-10 E(12.2. Reading ICE Messages)72 384 Q -7.5 10
(....................... 2)13.68 H(5)-10 E(13. Error Handling)72 396 Q
-7.5 10(........................... 2)3.68 H(8)-10 E
(14. Multi-Threading Support)72 408 Q -7.5 10(....................... 3)
13.67 H(0)-10 E(15. Miscellaneous Functions)72 420 Q -7.5 10
(....................... 3)14.78 H(1)-10 E(16. Ackno)72 432 Q 7.82
(wledgements .)-.25 F -7.5 10(........................ 3)10 H(1)-10 E
(Appendix A \255 Authentication Utility Functions)72 444 Q -7.5 10
(................. 3)14.69 H(2)-10 E(Appendix B \255 MIT)72 456 Q(-MA)
-.92 E(GIC-COOKIE-1 Authentication)-.4 E -7.5 10(............... 3)5.21
H(5)-10 E(iii)283.83 768 Q 0 Cg EP
%%Trailer
end
%%EOF
